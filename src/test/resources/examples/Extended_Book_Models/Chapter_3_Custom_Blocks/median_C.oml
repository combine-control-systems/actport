function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'median_C');
scsm = set_diagram_context(scsm, {['g=1.4;',char(10)]});
blk = instantiate_block('system/CustomBlocks/CCustomBlock');
blk = set_block_origin(blk,[138.500000,-44.434128]);
blk = set_block_size(blk,[72.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.925490,0.874510,0.913725,0.996078]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.inports=struct('inrow',{{'-1'}},'incol',{{'-2'}},'it',{{'''double'''}},'depu',{{'1'}},'name',{{'''mat'''}});
params.nevin='0';
params.nout='1';
params.outports=struct('outrow',{{'1'}},'outcol',{{'1'}},'ot',{{'''double'''}},'name',{{'''med'''}});
params.nevout='0';
params.evoutports=struct('fir',{{}});
params.xx='[]';
params.xd='[]';
params.z='[]';
params.noz='0';
params.ozparams=struct('oztyp',{{}},'ozvalue',{{}},'name',{{}});
params.rpar='[]';
params.ipar='[]';
params.nopar='0';
params.oparparams=struct('opartyp',{{}},'oparvalue',{{}},'name',{{}});
params.inlined='1';
params.code='[''typedef double elem_type ;'',char(10),char(10),''elem_type torben(elem_type m[], int n)'',char(10),''{'',char(10),''    int         i, less, greater, equal;'',char(10),''    elem_type  min, max, guess, maxltguess, mingtguess;'',char(10),char(10),''    min = max = m[0] ;'',char(10),''    for (i=1 ; i<n ; i++) {'',char(10),''        if (m[i]<min) min=m[i];'',char(10),''        if (m[i]>max) max=m[i];'',char(10),''    }'',char(10),char(10),''    while (1) {'',char(10),''        guess = (min+max)/2;'',char(10),''        less = 0; greater = 0; equal = 0;'',char(10),''        maxltguess = min ;'',char(10),''        mingtguess = max ;'',char(10),''        for (i=0; i<n; i++) {'',char(10),''            if (m[i]<guess) {'',char(10),''                less++;'',char(10),''                if (m[i]>maxltguess) maxltguess = m[i] ;'',char(10),''            } else if (m[i]>guess) {'',char(10),''                greater++;'',char(10),''                if (m[i]<mingtguess) mingtguess = m[i] ;'',char(10),''            } else equal++;'',char(10),''        }'',char(10),''        if (less <= (n+1)/2 && greater <= (n+1)/2) break ; '',char(10),''        else if (less>greater) max = maxltguess ;'',char(10),''        else min = mingtguess;'',char(10),''    }'',char(10),''    if (less >= (n+1)/2) return maxltguess;'',char(10),''    else if (less+equal >= (n+1)/2) return guess;'',char(10),''    else return mingtguess;'',char(10),''}'',char(10),char(10),''#include "vss_block4.h"'',char(10),''VSS_EXPORT void CBlockFunction(vss_block *block,int flag)'',char(10),''{'',char(10),''  SCSREAL_COP *mat=(SCSREAL_COP *)GetInPortPtrs(block,1);'',char(10),''  int mmat=GetInPortRows(block,1);'',char(10),''  int nmat=GetInPortCols(block,1);'',char(10),''  SCSREAL_COP *med=(SCSREAL_COP *)GetOutPortPtrs(block,1);'',char(10),''  switch (flag){'',char(10),''  case VssFlag_OutputUpdate:'',char(10),''    med[0]=torben(mat, mmat*nmat);'',char(10),''    break;'',char(10),''  }'',char(10),''}'',char(10),char(10)]';
params.fcn=struct('slib',{{''''''}},'epoint',{{''''''}});
params.impl='0';
params.nincludepath='0';
params.includepath=struct('path',{{}});
params.ndefine='0';
params.define=struct('path',{{}});
params.ncompileflags='0';
params.compileflags=struct('path',{{}});
params.nlibpath='0';
params.libpath=struct('path',{{}});
params.nlibs='0';
params.libs=struct('path',{{}});
params.nmode='0';
params.nzcr='0';
params.dept='''Standard mode''';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'CCustomBlock');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[-9.500000,-38.434128]);
blk = set_block_size(blk,[60.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.854902,0.898039,0.945098,0.996078]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='rand(4,5)';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Constant');
blk = instantiate_block('system/SignalViewers/Display');
blk = set_block_origin(blk,[304.310669,-44.434128]);
blk = set_block_size(blk,[96.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.913725,0.941176,0.858824,0.996078]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.fmt='''%6f''';
params.dt='1';
params.externalActivation='0';
params.showatend='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Display');
blk = instantiate_block('system/SignalViewers/Display');
blk = set_block_origin(blk,[112.310669,-163.771469]);
blk = set_block_size(blk,[288.000000,96.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.913725,0.941176,0.858824,0.996078]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.fmt='''%6f''';
params.dt='1';
params.externalActivation='0';
params.showatend='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Display_1');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[84.000000,-20.434128]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Split');
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag4, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag4, '2', 'output'},{block_tag3, '1', 'input'}, [84.000000,-115.771469], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation');
blk = set_block_origin(blk,[159.070892,-153.038132]);
blk = set_block_size(blk,[110.000000,28.000000]);
params=struct();
  params.txt='median_C.scm';
blk = set_block_parameters (blk, params);
[scsm, block_tag5] = add_block(scsm, blk, 'Annotation');
out_1 = scsm;
end

median_C = subsystem_1();
median_C = set_model_workspace (median_C, {''});
median_C = set_initial_time (median_C, '0');
median_C = set_final_time (median_C, '3');
tol = {'0.000001', '0.000001', '-1', '0' , '0', 'lsodar', '0'};
median_C = set_solver_parameters( median_C, tol);
median_C = evaluate_model (median_C);
scsm = median_C;
