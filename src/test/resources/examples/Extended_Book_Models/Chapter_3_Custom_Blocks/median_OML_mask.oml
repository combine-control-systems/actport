function [out_1] = subsystem_2 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'Median');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/Ports/Output');
blk = set_block_ident (blk,'med');
blk = set_block_origin(blk,[336.500000,-30.434128]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'med');
blk = instantiate_block('system/Ports/Input');
blk = set_block_ident (blk,'mat');
blk = set_block_origin(blk,[20.500000,-30.434128]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'mat');
blk = instantiate_block('system/CustomBlocks/OmlCustomBlock');
blk = set_block_origin(blk,[140.500000,-38.434128]);
blk = set_block_size(blk,[96.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.inports=struct('inrow',{{'-1'}},'incol',{{'-2'}},'it',{{'''double'''}},'depu',{{'1'}},'name',{{'''mat'''}});
params.nevin='0';
params.nout='1';
params.outports=struct('outrow',{{'1'}},'outcol',{{'1'}},'ot',{{'''double'''}},'name',{{'''med'''}});
params.nevout='0';
params.evoutports=struct('fir',{{}});
params.xx='[]';
params.xd='[]';
params.z='[]';
params.noz='0';
params.ozparams=struct('oztyp',{{}},'ozvalue',{{}},'name',{{}});
params.rpar='[]';
params.ipar='[]';
params.nopar='0';
params.oparparams=struct('opartyp',{{}},'oparvalue',{{}},'name',{{}});
params.inlined='1';
params.code='[''function OmlBlockFunction(block, flag)'',char(10),''  mat=block.GetInputData(1);'',char(10),''  if flag==vssBlockOutputUpdateFlag'',char(10),''    med=median(mat(:));'',char(10),''    block.SetOutputData(1,med,block.GetOutputDataType(1));'',char(10),''  end'',char(10),''end'',char(10),char(10),char(10),''function OmlBlockFunction(block, flag)'',char(10),''  mat=vssGetInPortData(block,1);'',char(10),''  nevprt=vssGetEventCode(block);'',char(10),''  '',char(10),''  if flag==vssBlockOutputUpdateFlag'',char(10),''    med=median(mat(:));'',char(10),''    vssSetOutPortData(block,1,med,vssGetOutputDataType(block,1));'',char(10),''    '',char(10),''  end'',char(10),''end'',char(10)]';
params.fcn=struct('slib',{{''''''}},'epoint',{{''''''}});
params.impl='0';
params.nmode='0';
params.nzcr='0';
params.dept='''Standard mode''';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'OmlCustomBlock');
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
out_1 = scsm;
end

function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'median_OML_mask');
scsm = set_diagram_context(scsm, {['g=1.4;',char(10)]});
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[-7.322754,-38.434128]);
blk = set_block_size(blk,[60.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.854902,0.898039,0.945098,0.996078]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='rand(4,5)';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'Constant');
blk = instantiate_block('system/SignalViewers/Display');
blk = set_block_origin(blk,[292.500000,-44.434128]);
blk = set_block_size(blk,[96.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.913725,0.941176,0.858824,0.996078]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.fmt='''%6f''';
params.dt='1';
params.externalActivation='0';
params.showatend='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Display');
blk = instantiate_block('system/SignalViewers/Display');
blk = set_block_origin(blk,[100.500000,-171.149338]);
blk = set_block_size(blk,[288.000000,96.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.913725,0.941176,0.858824,0.996078]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.fmt='''%6f''';
params.dt='1';
params.externalActivation='0';
params.showatend='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Display_1');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[84.000000,-20.434128]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Split');
blk = instantiate_super_block();
scsm0 = subsystem_2();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'Median');
blk = set_block_origin(blk,[121.006226,-50.434128]);
blk = set_block_size(blk,[108.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.980392,0.792157,0.639216,0.996078]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag4] = add_block(scsm, blk, 'Median');
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag3, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag1, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '2', 'output'},{block_tag2, '1', 'input'}, [84.000000,-123.149338], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag4, '1', 'input'}, [], false);
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation');
blk = set_block_origin(blk,[161.717025,-190.565506]);
blk = set_block_size(blk,[164.000000,28.000000]);
params=struct();
  params.txt='median_OML_mask.scm';
blk = set_block_parameters (blk, params);
[scsm, block_tag5] = add_block(scsm, blk, 'Annotation');
out_1 = scsm;
end

median_OML_mask = subsystem_1();
median_OML_mask = set_model_workspace (median_OML_mask, {''});
median_OML_mask = set_initial_time (median_OML_mask, '0');
median_OML_mask = set_final_time (median_OML_mask, '3');
tol = {'0.000001', '0.000001', '-1', '0' , '0', 'lsodar', '0'};
median_OML_mask = set_solver_parameters( median_OML_mask, tol);
median_OML_mask = evaluate_model (median_OML_mask);
scsm = median_OML_mask;
