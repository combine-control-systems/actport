function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'delayVar');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/CustomBlocks/CCustomBlock');
blk = set_block_origin(blk,[-13.500000,47.500000]);
blk = set_block_size(blk,[70.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.572549,0.815686,0.313725,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('inrow',{{'1','1'}},'incol',{{'1','1'}},'it',{{'''double''','''double'''}},'depu',{{'0','1'}},'name',{{'''''','''d'''}});
params.nevin='0';
params.nout='1';
params.outports=struct('outrow',{{'1'}},'outcol',{{'1'}},'ot',{{'''double'''}},'name',{{''''''}});
params.nevout='0';
params.evoutports=struct('fir',{{}});
params.xx='[]';
params.xd='[]';
params.z='zeros(1,N)';
params.noz='1';
params.ozparams=struct('oztyp',{{'''int32'''}},'ozvalue',{{'0'}},'name',{{'''idx'''}});
params.rpar='[]';
params.ipar='[]';
params.nopar='0';
params.oparparams=struct('opartyp',{{}},'oparvalue',{{}},'name',{{}});
params.inlined='1';
params.code=['[''int mod(int a, int b)'',char(10),''{'',char(10),''    int r = a % b;'',char(10),''    return r < 0 ? r + b : r;'',char(10),''}'',char(10),char(10),''#include "vss_block4.h"'',char(10),''VSS_EXPORT void CBlockFunction(vss_block *block,int flag)'',char(10),''{'',char(10),''  SCSREAL_COP *u1=(SCSREAL_COP *)GetInPortPtrs(block,1);'',char(10),''  SCSREAL_COP *d=(SCSREAL_COP *)GetInPortPtrs(block,2);'',char(10),''  SCSREAL_COP *y1=(SCSREAL_COP *)GetOutPortPtrs(block,1);'',char(10),''  int nevprt=GetNevin(block);'',char(10),''  int nz=GetNdstate(block);'',char(10),''  SCSREAL_COP *z=GetDstate(block);'',char(10),''  SCSINT32_COP *idx=(SCSINT32_COP *)GetOzPtrs(block,1);'',char(10),''  int i,n;',char(9),''',char(10),''  switch (flag){'',char(10),''  case VssFlag_OutputUpdate:'',char(10),''',char(9),'n=(int)(*d-1);'',char(10),''',char(9),'if(n>nz-1) n=nz-1;'',char(10),''',char(9),'else if(n<0) n=0;'',char(10),''    i=mod(*idx- n,nz);'',char(10),''',char(9),'y1[0]=z[i];'',char(10),''    break;'',char(10),''  case VssFlag_StateUpdate:'',char(10),''    *idx = mod(*idx +1,nz);'',char(10),''',char(9),'z[*idx]=*u1;'',char(10),''    break;'',char(10),''  }'',char(10),''}'',char(10)]'];
params.fcn=struct('slib',{{''''''}},'epoint',{{''''''}});
params.impl='0';
params.nincludepath='0';
params.includepath=struct('path',{{}});
params.ndefine='0';
params.define=struct('path',{{}});
params.ncompileflags='0';
params.compileflags=struct('path',{{}});
params.nlibpath='0';
params.libpath=struct('path',{{}});
params.nlibs='0';
params.libs=struct('path',{{}});
params.nmode='0';
params.nzcr='0';
params.dept='''Standard mode''';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'CCustomBlock');
blk = instantiate_block('system/SignalGenerators/ModuloCounter');
blk = set_block_origin(blk,[-209.523628,53.500000]);
blk = set_block_size(blk,[72.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.ini_state='0';
params.base='30';
params.step='1';
params.typ='''double''';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'ModuloCounter_1');
blk = instantiate_block('system/ActivationOperations/SampleClock');
blk = set_block_origin(blk,[-137.222351,157.500000]);
blk = set_block_size(blk,[60.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,0.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
params=struct();
params.frequ='1';
params.offset='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'SampleClock');
blk = instantiate_block('system/Links/ActivationSplit');
blk = set_block_origin(blk,[-107.222351,129.500000]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.717647,0.058824,0.074510,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,3);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'ActivationSplit');
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[109.376846,49.500000]);
blk = set_block_size(blk,[7.000000,72.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('size',{{'1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Mux');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[-60.457108,77.500000]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Split');
blk = instantiate_block('system/SignalGenerators/Counter');
blk = set_block_origin(blk,[-137.222351,-27.152702]);
blk = set_block_size(blk,[60.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.minim='1';
params.step='1';
params.maxim='4';
params.Initv='1';
params.rule='''Increment''';
params.typ='''double''';
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'Counter');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Scope');
blk = set_block_origin(blk,[148.938904,65.500000]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[-1,-1]';
params.winPos='[-1,-1]';
params.winNam='''''';
params.winHidden='0';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[0,30]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'Scope');
scsm=add_event_link(scsm,{block_tag2, '1', 'output'},{block_tag3, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag3, '2', 'output'},{block_tag6, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag3, '1', 'output'},{block_tag1, '1', 'input'}, [-173.523628,129.500000], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag5, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag7, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag4, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag5, '2', 'output'},{block_tag4, '1', 'input'}, [-60.457108,103.500000], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag0, '2', 'input'}, [-41.523628,2.847298;-41.523628,57.500000], false);
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation');
blk = set_block_origin(blk,[-51.632532,-5.466064]);
blk = set_block_size(blk,[98.000000,28.000000]);
params=struct();
  params.txt='delayVar.scm';
blk = set_block_parameters (blk, params);
[scsm, block_tag8] = add_block(scsm, blk, 'Annotation');
out_1 = scsm;
end

delayVar = subsystem_1();
delayVar = set_model_workspace (delayVar, {['N=5;',char(10)]});
delayVar = set_initial_time (delayVar, '0');
delayVar = set_final_time (delayVar, '30');
tol = {'0.000001', '0.000001', '-1', '0' , '0', 'lsodar', '-1'};
delayVar = set_solver_parameters( delayVar, tol);
delayVar = evaluate_model (delayVar);
scsm = delayVar;
