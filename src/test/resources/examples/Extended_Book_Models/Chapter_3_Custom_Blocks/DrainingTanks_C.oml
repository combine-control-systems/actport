function [out_1] = subsystem_2 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'SuperBlock');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/ActivationOperations/IfThenElse');
blk = set_block_origin(blk,[1119.371460,-328.942871]);
blk = set_block_size(blk,[60.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,2);
params=struct();
params.externalActivation='0';
params.nmod='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'IfThenElse');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[870.698181,-283.625061]);
blk = set_block_size(blk,[36.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''-'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Sum');
blk = instantiate_block('system/MathOperations/Bias');
blk = set_block_origin(blk,[1021.107180,-316.942871]);
blk = set_block_size(blk,[60.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.b='-.00001';
params.over='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Bias');
blk = instantiate_block('system/Ports/EventOutput');
blk = set_block_origin(blk,[1154.371460,-380.035736]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'EventOutput');
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[751.000000,-257.500000]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Input');
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[751.000000,-281.625061]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='2';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Input_1');
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[751.000000,-308.942871]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='3';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'Input_1_1');
blk = instantiate_block('system/MathOperations/MaxMin');
blk = set_block_origin(blk,[870.698181,-348.632141]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.mm='''Min''';
params.nin='2';
params.zc='1';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'MaxMin');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[848.494629,-247.500000]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'Split');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[830.098206,-247.500000]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'Block');
blk = instantiate_block('system/Routing/ConditionalSelect');
blk = set_block_origin(blk,[944.744629,-318.942871]);
blk = set_block_size(blk,[60.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,3);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.u2typ='''double''';
params.rule='''u2>a''';
params.thra='0';
params.nzz='1';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'ConditionalSelect');
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag0, '2', 'output'},{block_tag3, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag9, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag1, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag8, '2', 'output'},{block_tag7, '1', 'input'}, [848.495000,-318.632000], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag1, '1', 'input'}, [860.698181,-247.500000], false);
scsm=add_explicit_link(scsm,{block_tag9, '2', 'output'},{block_tag7, '2', 'input'}, [830.098000,-338.632000], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'output'},{block_tag8, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag10, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag10, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag10, '1', 'input'}, [920.698181,-285.610462], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag10, '3', 'input'}, [930.737000,-259.625061;930.737000,-312.276000], false);
out_1 = scsm;
end

function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'DrainingTanks_C');
scsm = set_diagram_context(scsm, {['h10=3;',char(10),'h20=0;',char(10)]});
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[815.329529,-194.772736]);
blk = set_block_size(blk,[7.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('size',{{'1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'Mux');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[800.363586,-149.772736]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Split');
blk = instantiate_block('system/ActivationOperations/End');
blk = set_block_origin(blk,[878.067139,-308.678833]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.000000,0.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.job='''Stop''';
params.bmessage='''Request a stop.''';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'End');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[785.547119,-179.772736]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Block');
blk = instantiate_block('system/SignalGenerators/Time');
blk = set_block_origin(blk,[732.928955,-308.678833]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.933333,0.886275,0.921569,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Time');
blk = instantiate_super_block();
scsm0 = subsystem_2();
blk = fill_super_block(blk,scsm0);
blk = set_block_origin(blk,[878.067139,-248.678833]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.000000,0.000000,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,3);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
blk = set_atomic_property(blk,0);
[scsm, block_tag5] = add_block(scsm, blk, 'SuperBlock');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[628.269897,-159.000000]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'Block_1');
blk = instantiate_block('system/CustomBlocks/CCustomBlock');
blk = set_block_ident (blk,'two-tank');
blk = set_block_origin(blk,[652.103271,-177.000000]);
blk = set_block_size(blk,[96.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.607843,0.733333,0.349020,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,2);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.inports=struct('inrow',{{'1'}},'incol',{{'1'}},'it',{{'''double'''}},'depu',{{'0'}},'name',{{'''pump'''}});
params.nevin='0';
params.nout='2';
params.outports=struct('outrow',{{'1','1'}},'outcol',{{'1','1'}},'ot',{{'''double''','''double'''}},'name',{{'''h1''','''h2'''}});
params.nevout='0';
params.evoutports=struct('fir',{{}});
params.xx='[h10;h20;2.24;.01]';
params.xd='[]';
params.z='[]';
params.noz='0';
params.ozparams=struct('oztyp',{{}},'ozvalue',{{}},'name',{{}});
params.rpar='[]';
params.ipar='[]';
params.nopar='10';
params.oparparams=struct('opartyp',{{'''double''','''double''','''double''','''double''','''double''','''double''','''double''','''double''','''double''','''double'''}},'oparvalue',{{'20','0.05','1000','0.0001','1','0.0001','64','2000','4000','0.0400084'}},'name',{{'''L''','''D''','''rho''','''mu''','''At''','''e''','''Ks''','''ReL''','''ReT''','''fT'''}});
params.inlined='1';
params.code=['[''#include "vss_block4.h"'',char(10),''VSS_EXPORT void CBlockFunction(vss_block *block,int flag)'',char(10),''{'',char(10),''  SCSREAL_COP pump=*(SCSREAL_COP *)GetInPortPtrs(block,1);'',char(10),''  SCSREAL_COP *h1=(SCSREAL_COP *)GetOutPortPtrs(block,1);'',char(10),''  SCSREAL_COP *h2=(SCSREAL_COP *)GetOutPortPtrs(block,2);'',char(10),''  SCSREAL_COP *x=GetState(block);'',char(10),''  SCSREAL_COP *xd=GetDerState(block);'',char(10),''  SCSREAL_COP *res=GetResState(block);'',char(10),''  SCSREAL_COP L=*(SCSREAL_COP *)GetOparPtrs(block,1);'',char(10),''  SCSREAL_COP D=*(SCSREAL_COP *)GetOparPtrs(block,2);'',char(10),''  SCSREAL_COP rho=*(SCSREAL_COP *)GetOparPtrs(block,3);'',char(10),''  SCSREAL_COP mu=*(SCSREAL_COP *)GetOparPtrs(block,4);'',char(10),''  SCSREAL_COP At=*(SCSREAL_COP *)GetOparPtrs(block,5);'',char(10),''  SCSREAL_COP e=*(SCSREAL_COP *)GetOparPtrs(block,6);'',char(10),''  SCSREAL_COP Ks=*(SCSREAL_COP *)GetOparPtrs(block,7);'',char(10),''  SCSREAL_COP ReL=*(SCSREAL_COP *)GetOparPtrs(block,8);'',char(10),''  SCSREAL_COP ReT=*(SCSREAL_COP *)GetOparPtrs(block,9);'',char(10),''  SCSREAL_COP fT=*(SCSREAL_COP *)GetOparPtrs(block,10);'',char(10),''  SCSREAL_COP pi=3.14, g=9.81, V, f, Q, H, Re, Ad, fL;'',char(10),''  switch (flag){'',char(10),''   case VssFlag_OutputUpdate:'',char(10),''',char(9),'*h1=x[0];',char(9),''',char(10),''',char(9),'*h2=x[1];'',char(10),''    break;'',char(10),''  case VssFlag_Derivatives:'',char(10),''',char(9),'Ad=D*D*pi/4;fL=Ks/ReL;'',char(10),''',char(9),'V=x[2];f=x[3];'',char(10),''',char(9),'Q=pi*V*D*D/4;'',char(10),''',char(9),'H=pump*(4-8.0e4*Q*Q);'',char(10),''    Re=D*V*rho/mu;'',char(10),''    res[0]=x[1]+f*2*L*V*V/(D*2*g)+V*V/(2*g)-x[0]-H;'',char(10),''    res[1]=xd[0]+V*Ad/At;'',char(10),''    res[2]=xd[1]-V*Ad/At;'',char(10),''    if (Re>ReT) res[3]=1/sqrt(f)+2*log10(e/3.7+2.51/(Re*sqrt(f)));'',char(10),''    else if (Re<ReL) res[3]=f-Ks/Re;'',char(10),''',char(9),'else res[3]=fL+(fT-fL)*(Re-ReL)/(ReT-ReL)-f;'',char(10),''    break;'',char(10),''  }'',char(10),''}'',char(10)]'];
params.fcn=struct('slib',{{''''''}},'epoint',{{''''''}});
params.impl='1';
params.nincludepath='0';
params.includepath=struct('path',{{}});
params.ndefine='0';
params.define=struct('path',{{}});
params.ncompileflags='0';
params.compileflags=struct('path',{{}});
params.nlibpath='0';
params.libpath=struct('path',{{}});
params.nlibs='0';
params.libs=struct('path',{{}});
params.nmode='0';
params.nzcr='0';
params.dept='''Always Active mode''';
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'two-tank');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[472.819961,-224.000000]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.752941,0.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='1';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'Constant_1');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[472.819961,-169.000000]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.752941,0.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='0';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'Constant_2');
blk = instantiate_block('system/Routing/ManualSelect');
blk = set_block_origin(blk,[550.319946,-179.000000]);
blk = set_block_size(blk,[60.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.752941,0.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.z0='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'ManualSelect');
blk = instantiate_block('system/SignalViewers/Display');
blk = set_block_origin(blk,[798.561890,-306.678833]);
blk = set_block_size(blk,[60.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.933333,0.886275,0.921569,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.fmt='''%3.2f''';
params.dt='1';
params.externalActivation='0';
params.showatend='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag11] = add_block(scsm, blk, 'Display');
blk = instantiate_block('system/SignalExporters/SignalOut');
blk = set_block_origin(blk,[878.067139,-131.903519]);
blk = set_block_size(blk,[100.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.varname='''A''';
params.externalActivation='0';
params.buffsize='128';
params.R_MP='1';
params.R_DE='1';
params.R_MPLL='1';
params.R_ZCLL='1';
params.R_TRY='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag12] = add_block(scsm, blk, 'SignalOut');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[849.204102,-164.772736]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag13] = add_block(scsm, blk, 'Block_2');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Scope');
blk = set_block_origin(blk,[878.067139,-184.772736]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400;400]';
params.winPos='[355;500]';
params.winNam='''''';
params.winHidden='0';
params.showAtEnd='0';
params.option='''Overlay''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[0,3]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag14] = add_block(scsm, blk, 'Scope');
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag1, '1', 'input'}, [800.363586,-150.000000], false);
scsm=add_explicit_link(scsm,{block_tag7, '2', 'output'},{block_tag3, '1', 'input'}, [785.547119,-168.000000], false);
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag13, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '2', 'output'},{block_tag5, '1', 'input'}, [800.363586,-215.345190], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '2', 'output'},{block_tag5, '2', 'input'}, [785.547119,-228.678935], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag0, '2', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag5, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag11, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag10, '1', 'output'},{block_tag6, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag6, '2', 'output'},{block_tag5, '3', 'input'}, [628.269990,-242.012022], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag7, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'output'},{block_tag10, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag10, '2', 'input'}, [529.319961,-204.000000;529.319961,-169.000000], false);
scsm=add_explicit_link(scsm,{block_tag13, '2', 'output'},{block_tag12, '1', 'input'}, [849.204102,-111.903519], false);
scsm=add_explicit_link(scsm,{block_tag13, '1', 'output'},{block_tag14, '1', 'input'}, [], false);
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation');
blk = set_block_origin(blk,[498.867149,-255.839203]);
blk = set_block_size(blk,[148.000000,28.000000]);
params=struct();
  params.txt='DrainingTanks_C.scm';
blk = set_block_parameters (blk, params);
[scsm, block_tag15] = add_block(scsm, blk, 'Annotation');
out_1 = scsm;
end

DrainingTanks_C = subsystem_1();
DrainingTanks_C = set_model_workspace (DrainingTanks_C, {''});
DrainingTanks_C = set_initial_time (DrainingTanks_C, '0');
DrainingTanks_C = set_final_time (DrainingTanks_C, '1000');
tol = {'0.0001', '0.0001', '-1', '0' , '0', 'ida', '-1'};
DrainingTanks_C = set_solver_parameters( DrainingTanks_C, tol);
DrainingTanks_C = evaluate_model (DrainingTanks_C);
scsm = DrainingTanks_C;
