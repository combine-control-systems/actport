function [out_1] = subsystem_3 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'SuperBlock');
scsm = set_diagram_context(scsm, {''});
out_1 = scsm;
end

function [out_1] = subsystem_2 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'cart on beam');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/Ports/Output');
blk = set_block_ident (blk,'y');
blk = set_block_origin(blk,[134.379818,-306.479889]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.insize='[-1; -2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'y');
blk = instantiate_block('system/CustomBlocks/MoCustomBlock');
blk = set_block_origin(blk,[-23.620182,-326.479889]);
blk = set_block_size(blk,[108.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.945098,0.854902,0.854902,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,2);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.inports=struct('name',{{'''T'''}},'value',{{'u0'}});
params.nout='2';
params.outports=struct('name',{{'''z''','''th'''}});
params.nparams='5';
params.params=struct('name',{{'''h''','''m''','''J''','''th0''','''z0'''}},'value',{{'h','m','J','th0','z0'}},'typ',{{'''Fixed''','''Fixed''','''Fixed''','''Fixed''','''Fixed'''}});
params.codename='''cart''';
params.code='[''model cart'',char(10),''  //parameters '',char(10),''  parameter Real h = 1;'',char(10),''  parameter Real m = 2;'',char(10),''  parameter Real J = 10;'',char(10),''  parameter Real th0 = 0;'',char(10),''  parameter Real z0 = 0;'',char(10),''  //input variables '',char(10),''   Real T;'',char(10),''  //output variables '',char(10),''   Real z(start=z0), th(start=th0);'',char(10),''   Real zd(start=0), thd(start=0);'',char(10),''   Real g=9.81;'',char(10),''equation'',char(10),''  der(th)=thd;'',char(10),''  der(z)=zd;'',char(10),''  der(zd) = z*thd*thd-m*g*sin(th);'',char(10),''  (J+m*z*z)*der(thd) = T-2*m*z*zd*thd-'',char(10),''      m*g*z*cos(th)+m*g*h*sin(th);'',char(10),''end cart;'']';
params.nlibs='0';
params.libs=struct('path',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'MoCustomBlock');
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[104.379818,-326.479889]);
blk = set_block_size(blk,[10.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('size',{{'1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Mux');
blk = instantiate_block('system/Ports/Input');
blk = set_block_ident (blk,'T');
blk = set_block_origin(blk,[-85.174591,-306.479889]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1; -2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'T');
blk = instantiate_super_block();
scsm0 = subsystem_3();
blk = fill_super_block(blk,scsm0);
blk = set_block_origin(blk,[-99.419243,-378.075714]);
blk = set_block_size(blk,[300.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag4] = add_block(scsm, blk, 'SuperBlock');
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '2', 'input'},{block_tag1, '2', 'output'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag1, '1', 'input'}, [], false);
out_1 = scsm;
end

function [out_1] = subsystem_4 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'Observer');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[293.055817,-257.858955]);
blk = set_block_size(blk,[6.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,0.996078]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('size',{{'-1','-2'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'Mux');
blk = instantiate_block('system/Dynamical/ContStateSpace');
blk = set_block_ident (blk,'obs');
blk = set_block_origin(blk,[333.471527,-251.951889]);
blk = set_block_size(blk,[72.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,0.996078]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.A='obs.a';
params.B='obs.b';
params.C='obs.c';
params.D='obs.d';
params.x0='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'obs');
blk = instantiate_block('system/Ports/Input');
blk = set_block_ident (blk,'u');
blk = set_block_origin(blk,[253.055817,-211.467750]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'u');
blk = instantiate_block('system/Ports/Input');
blk = set_block_ident (blk,'y');
blk = set_block_origin(blk,[253.055817,-276.175727]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='2';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'y');
blk = instantiate_block('system/Ports/Output');
blk = set_block_ident (blk,'x̂');
blk = set_block_origin(blk,[441.253204,-243.951889]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'x̂');
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag1, '1', 'input'}, [309.055817,-233.951889], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag0, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag4, '1', 'input'}, [], false);
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation_4');
blk = set_block_origin(blk,[298.463196,-211.842651]);
blk = set_block_size(blk,[46.000000,28.000000]);
params=struct();
  params.txt='[u;y]';
blk = set_block_parameters (blk, params);
[scsm, block_tag5] = add_block(scsm, blk, 'Annotation_4');
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation');
blk = set_block_origin(blk,[290.314850,-183.489288]);
blk = set_block_size(blk,[178.000000,28.000000]);
params=struct();
  params.txt='x̂'' = (A+LC).x̂ + (B+LD).u - L.y';
blk = set_block_parameters (blk, params);
[scsm, block_tag6] = add_block(scsm, blk, 'Annotation');
out_1 = scsm;
end

function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'cart_on_beam_off_center');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/MatrixOperations/MatrixGain');
blk = set_block_ident (blk,'K');
blk = set_block_origin(blk,[301.314545,-194.123052]);
blk = set_block_size(blk,[60.000000,24.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,0.996078]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='K';
params.overflow='''Nothing''';
params.mulmethod='''Gain*u1''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'K');
blk = instantiate_super_block();
scsm0 = subsystem_2();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'cart on beam');
blk = set_block_origin(blk,[127.039978,-301.135174]);
blk = set_block_size(blk,[72.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,0.996078]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag1] = add_block(scsm, blk, 'cart on beam');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_origin(blk,[140.360519,-229.566727]);
blk = set_block_size(blk,[36.000000,36.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.988235,0.890196,0.811765,0.996078]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='0';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{'''u''','''y'''}},'reverseColor',{{'0','0'}},'grid',{{'''Coarse''','''Coarse'''}},'xScale',{{'''linear''','''linear'''}},'xRefresh',{{'-1','-1'}},'yScale',{{'''linear''','''linear'''}},'yInterval',{{'[-600,600]','[-.5,3]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{'''''',''''''}},'color',{{'0','0'}},'marker',{{'0','0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Scope');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[272.363403,-182.123051]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Split');
blk = instantiate_super_block();
scsm0 = subsystem_4();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'Observer');
blk = set_block_origin(blk,[291.031158,-253.537681]);
blk = set_block_size(blk,[72.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag4] = add_block(scsm, blk, 'Observer');
blk = instantiate_block('system/MathOperations/Bias');
blk = set_block_origin(blk,[226.363403,-200.123051]);
blk = set_block_size(blk,[36.000000,36.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.b='u0';
params.over='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Bias');
blk = instantiate_block('system/MathOperations/Bias');
blk = set_block_origin(blk,[224.963470,-262.215378]);
blk = set_block_size(blk,[36.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.b='-y0';
params.over='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'Bias_1');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[214.963470,-244.215378]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'Block_1');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[216.363403,-182.123051]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'Block');
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag0, '1', 'input'}, [382.291138,-235.537681;382.291138,-182.123052], false);
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag3, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '2', 'output'},{block_tag4, '1', 'input'}, [272.363403,-226.537681], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag5, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag7, '1', 'input'}, [214.963470,-271.135174], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'input'},{block_tag7, '2', 'output'}, [], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag2, '2', 'input'}, [214.963470,-220.566727], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag8, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'input'},{block_tag8, '2', 'output'}, [216.363403,-202.566727], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag1, '1', 'input'}, [111.803253,-182.123051;111.803253,-271.135174], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag4, '2', 'input'}, [270.963470,-244.537681], false);
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation');
blk = set_block_origin(blk,[199.707275,-270.121124]);
blk = set_block_size(blk,[46.000000,28.000000]);
params=struct();
  params.txt='[z;θ]';
blk = set_block_parameters (blk, params);
[scsm, block_tag9] = add_block(scsm, blk, 'Annotation');
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation_5');
blk = set_block_origin(blk,[270.520294,-158.879715]);
blk = set_block_size(blk,[52.000000,28.000000]);
params=struct();
  params.txt='u=Kx̂';
blk = set_block_parameters (blk, params);
[scsm, block_tag10] = add_block(scsm, blk, 'Annotation_5');
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation_6');
blk = set_block_origin(blk,[364.913940,-175.654419]);
blk = set_block_size(blk,[30.000000,28.000000]);
params=struct();
  params.txt='x̂';
blk = set_block_parameters (blk, params);
[scsm, block_tag11] = add_block(scsm, blk, 'Annotation_6');
out_1 = scsm;
end

cart_on_beam_off_center = subsystem_1();
cart_on_beam_off_center = set_model_workspace (cart_on_beam_off_center, {['h=1; m=2; J=10;',char(10),'nx=4;nu=1;ny=2;',char(10),'th0=pi/50;',char(10),'z0=0.5;',char(10),'zobj=1;y0=[zobj;0];',char(10),char(10),'if ~vssIsInLinearization',char(10),'  ctx=struct;',char(10),'  ctx.K=zeros(1,nx);',char(10),'  ctx.obs=ss([],zeros(0,nu+ny),zeros(nx,0),zeros(nx,nu+ny));',char(10),'  ctx.th0=0;ctx.z0=zobj;ctx.u0=0;',char(10),'  model=bdeGetCurrentModel;',char(10),'  ctx=vssEquilibriumPointSuperBlock(model,...',char(10),char(9),'''cart on beam'',ctx,{''u0''});',char(10),'  [A,B,C,D]=vssLinearizeSuperBlock(model,...',char(10),char(9),'   ''cart on beam'',[1],[1],0,ctx);',char(10),'  L=-place(A'',C'',-7*ones(nx,1))'';',char(10),'  obs=ss(A+L*C,[B+L*D,-L],eye(nx),zeros(nx,nu+ny));',char(10),'  K=-place(A,B,-7*ones(nx,1));',char(10),'  u0=ctx.u0;',char(10),'end',char(10),char(10)]});
cart_on_beam_off_center = set_initial_time (cart_on_beam_off_center, '0');
cart_on_beam_off_center = set_final_time (cart_on_beam_off_center, '7');
tol = {'0.000001', '0.000001', '1e-10', '0' , '0', 'lsodar', '-1'};
cart_on_beam_off_center = set_solver_parameters( cart_on_beam_off_center, tol);
cart_on_beam_off_center = evaluate_model (cart_on_beam_off_center);
scsm = cart_on_beam_off_center;
