function [out_1] = subsystem_3 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'SuperBlock');
scsm = set_diagram_context(scsm, {''});
out_1 = scsm;
end

function [out_1] = subsystem_2 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'cart on beam');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/Ports/Output');
blk = set_block_ident (blk,'ym');
blk = set_block_origin(blk,[186.841808,-307.860321]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='2';
params.insize='[-1; -2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'ym');
blk = instantiate_block('system/CustomBlocks/MoCustomBlock');
blk = set_block_origin(blk,[-147.535824,-327.860321]);
blk = set_block_size(blk,[108.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.945098,0.854902,0.854902,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,2);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.inports=struct('name',{{'''T'''}},'value',{{'0'}});
params.nout='2';
params.outports=struct('name',{{'''z''','''th'''}});
params.nparams='5';
params.params=struct('name',{{'''h''','''m''','''J''','''th0''','''z0'''}},'value',{{'h','m','J','th0','z0'}},'typ',{{'''Fixed''','''Fixed''','''Fixed''','''Fixed''','''Fixed'''}});
params.codename='''cart''';
params.code='[''model cart'',char(10),''  //parameters '',char(10),''  parameter Real h = 1;'',char(10),''  parameter Real m = 2;'',char(10),''  parameter Real J = 10;'',char(10),''  parameter Real th0 = 0;'',char(10),''  parameter Real z0 = 0;'',char(10),''  //input variables '',char(10),''   Real T;'',char(10),''  //output variables '',char(10),''   Real z(start=z0), th(start=th0);'',char(10),''   Real zd(start=0), thd(start=0);'',char(10),''   Real g=9.81;'',char(10),''equation'',char(10),''  der(th)=thd;'',char(10),''  der(z)=zd;'',char(10),''  der(zd) = z*thd*thd-m*g*sin(th);'',char(10),''  (J+m*z*z)*der(thd) = T-2*m*z*zd*thd-'',char(10),''      m*g*z*cos(th)+m*g*h*sin(th);'',char(10),''end cart;'']';
params.nlibs='0';
params.libs=struct('path',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'MoCustomBlock');
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[156.841808,-327.860321]);
blk = set_block_size(blk,[10.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('size',{{'1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Mux');
blk = instantiate_block('system/Ports/Input');
blk = set_block_ident (blk,'T');
blk = set_block_origin(blk,[-209.090233,-307.860321]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1; -2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'T');
blk = instantiate_super_block();
scsm0 = subsystem_3();
blk = fill_super_block(blk,scsm0);
blk = set_block_origin(blk,[-202.668762,-372.825745]);
blk = set_block_size(blk,[300.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag4] = add_block(scsm, blk, 'SuperBlock');
blk = instantiate_block('system/Dynamical/Integral');
blk = set_block_origin(blk,[80.388763,-306.860321]);
blk = set_block_size(blk,[24.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.x0='0';
params.reinit='0';
params.satur='0';
params.limit=struct('max',{{}},'min',{{}},'zcross',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Integral');
blk = instantiate_block('system/Ports/Output');
blk = set_block_ident (blk,'y');
blk = set_block_origin(blk,[126.712589,-211.777542]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.insize='[-1; -2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'y');
blk = instantiate_block('system/MathOperations/Bias');
blk = set_block_origin(blk,[12.958939,-300.860321]);
blk = set_block_size(blk,[36.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.b='-zobj';
params.over='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'Bias_1');
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[85.258892,-231.777542]);
blk = set_block_size(blk,[10.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('size',{{'1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'Mux_1');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[-10.165840,-282.860321]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'Split');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[-1.999210,-312.860321]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'Block');
scsm=add_explicit_link(scsm,{block_tag2, '2', 'input'},{block_tag10, '1', 'output'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag1, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag9, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag5, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'input'},{block_tag9, '2', 'output'}, [-10.165840,-186.777542], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'output'},{block_tag7, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag8, '2', 'input'},{block_tag10, '2', 'output'}, [-1.999210,-216.777542], false);
scsm=add_explicit_link(scsm,{block_tag10, '1', 'input'},{block_tag1, '2', 'output'}, [], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag6, '1', 'input'}, [], false);
out_1 = scsm;
end

function [out_1] = subsystem_4 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'Observer');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[293.055817,-257.858955]);
blk = set_block_size(blk,[6.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,0.996078]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('size',{{'-1','-2'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'Mux');
blk = instantiate_block('system/Dynamical/ContStateSpace');
blk = set_block_ident (blk,'obs');
blk = set_block_origin(blk,[333.471527,-251.951889]);
blk = set_block_size(blk,[72.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,0.996078]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.A='obs.a';
params.B='obs.b';
params.C='obs.c';
params.D='obs.d';
params.x0='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'obs');
blk = instantiate_block('system/Ports/Input');
blk = set_block_ident (blk,'u');
blk = set_block_origin(blk,[253.055817,-211.467750]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'u');
blk = instantiate_block('system/Ports/Input');
blk = set_block_ident (blk,'y');
blk = set_block_origin(blk,[253.055817,-276.175727]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='2';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'y');
blk = instantiate_block('system/Ports/Output');
blk = set_block_ident (blk,'x̂');
blk = set_block_origin(blk,[441.253204,-243.951889]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'x̂');
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag1, '1', 'input'}, [309.055817,-233.951889], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag0, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag4, '1', 'input'}, [], false);
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation_4');
blk = set_block_origin(blk,[298.463196,-211.842651]);
blk = set_block_size(blk,[46.000000,28.000000]);
params=struct();
  params.txt='[u;y]';
blk = set_block_parameters (blk, params);
[scsm, block_tag5] = add_block(scsm, blk, 'Annotation_4');
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation');
blk = set_block_origin(blk,[290.314850,-183.489288]);
blk = set_block_size(blk,[178.000000,28.000000]);
params=struct();
  params.txt='x̂'' = (A+LC).x̂ + (B+LD).u - L.y';
blk = set_block_parameters (blk, params);
[scsm, block_tag6] = add_block(scsm, blk, 'Annotation');
out_1 = scsm;
end

function [out_1] = subsystem_5 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'RotMatTrans');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/MathOperations/TrigFunc');
blk = set_block_origin(blk,[328.050629,-326.993591]);
blk = set_block_size(blk,[24.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.func='''sin''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'TrigFunc');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[303.154236,-330.037811]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Block_2');
blk = instantiate_block('system/MathOperations/TrigFunc');
blk = set_block_origin(blk,[329.942902,-356.993591]);
blk = set_block_size(blk,[24.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.func='''cos''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'TrigFunc_1');
blk = instantiate_block('system/MathOperations/Gain');
blk = set_block_origin(blk,[378.984344,-326.993591]);
blk = set_block_size(blk,[48.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='[0,1;-1,0]';
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Gain_1');
blk = instantiate_block('system/MathOperations/Gain');
blk = set_block_origin(blk,[377.092072,-356.993591]);
blk = set_block_size(blk,[48.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='eye(2)';
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Gain');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[439.872452,-359.993591]);
blk = set_block_size(blk,[12.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''+'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Sum');
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[183.154236,-340.037811]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'Input');
blk = instantiate_block('system/Ports/Output');
blk = set_block_origin(blk,[551.872452,-339.993591]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'Output');
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag3, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag0, '1', 'input'}, [303.154236,-314.993591], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'input'},{block_tag1, '2', 'output'}, [303.154236,-344.993591], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag4, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag5, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag5, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag1, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag7, '1', 'input'}, [], false);
out_1 = scsm;
end

function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'cart_on_beam_off_center_integral2_anim');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/MatrixOperations/MatrixGain');
blk = set_block_ident (blk,'K');
blk = set_block_origin(blk,[301.314545,-194.123052]);
blk = set_block_size(blk,[60.000000,24.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,0.996078]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='K';
params.overflow='''Nothing''';
params.mulmethod='''Gain*u1''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'K');
blk = instantiate_super_block();
scsm0 = subsystem_2();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'cart on beam');
blk = set_block_origin(blk,[98.177124,-301.135174]);
blk = set_block_size(blk,[72.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,0.996078]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,2);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag1] = add_block(scsm, blk, 'cart on beam');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_origin(blk,[140.360519,-229.566727]);
blk = set_block_size(blk,[36.000000,36.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.988235,0.890196,0.811765,0.996078]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='0';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{'''u''','''y'''}},'reverseColor',{{'0','0'}},'grid',{{'''Coarse''','''Coarse'''}},'xScale',{{'''linear''','''linear'''}},'xRefresh',{{'-1','-1'}},'yScale',{{'''linear''','''linear'''}},'yInterval',{{'[-600,600]','[-.5,3]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{'''''',''''''}},'color',{{'0','0'}},'marker',{{'0','0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Scope');
blk = instantiate_super_block();
scsm0 = subsystem_4();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'Observer');
blk = set_block_origin(blk,[291.031158,-253.537681]);
blk = set_block_size(blk,[72.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag3] = add_block(scsm, blk, 'Observer');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[280.609894,-182.123051]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Split');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[210.872940,-182.123051]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Block');
blk = instantiate_block('system/CustomBlocks/OmlCustomBlock');
blk = set_block_origin(blk,[703.547760,-327.949402]);
blk = set_block_size(blk,[120.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('inrow',{{'-1','-2'}},'incol',{{'2','2'}},'it',{{'''double''','''double'''}},'depu',{{'1','1'}},'name',{{'''poly1''','''poly2'''}});
params.nevin='0';
params.nout='0';
params.outports=struct('outrow',{{}},'outcol',{{}},'ot',{{}},'name',{{}});
params.nevout='0';
params.evoutports=struct('fir',{{}});
params.xx='[]';
params.xd='[]';
params.z='[0;0]';
params.noz='0';
params.ozparams=struct('oztyp',{{}},'ozvalue',{{}},'name',{{}});
params.rpar='[]';
params.ipar='[]';
params.nopar='4';
params.oparparams=struct('opartyp',{{'''double''','''double''','''double''','''double'''}},'oparvalue',{{'[-100,-50,200,100]/20','[1 0 1]','[1 0 0]','100'}},'name',{{'''sz''','''col1''','''col2''','''zoom'''}});
params.inlined='1';
params.code='[''function OmlBlockFunction(block,flag)'',char(10),''  if bdeIsInBatchMode || vssIsInLinearization'',char(10),''    return;'',char(10),''  end'',char(10),''  type=''''on'''';'',char(10),''  zoom=vssGetOparData(block,4);'',char(10),''  poly1=zoom*vssGetInputData(block,1);'',char(10),''  poly2=zoom*vssGetInputData(block,2);'',char(10),''  sz=zoom*vssGetOparData(block,1);'',char(10),''  xm=sz(1);ym=sz(2);'',char(10),''  lw=sz(3);lh=sz(4);'',char(10),''  col1=vssGetOparData(block,2);'',char(10),''  col2=vssGetOparData(block,3);'',char(10),''  z=vssGetDstate(block);'',char(10),''  p1=z(1);p2=z(2);'',char(10),''  if flag == vssBlockInitializeFlag'',char(10),char(9),''guiname=''''eeee'''';'',char(10),char(9),''h=vssGetFigure(block,guiname);'',char(10),char(9),''if h>0 clf(h)'',char(10),char(9),''else h=vssCreateFigure(block,guiname);'',char(10),char(9),''end'',char(10),char(9),char(9),''set(h,''''position'''',[0,0,lw,lh]);'',char(10),char(9),char(9),''p1=polyline(h, ''''polydata'''', zeros(2,0), ''''closed'''', type);'',char(10),char(9),char(9),''p2=polyline(h, ''''polydata'''', zeros(2,0), ''''closed'''', type);'',char(10),char(9),char(9),''vssSetDstate(block,[p1;p2]);'',char(10),''  %end'',char(10),''  elseif flag == vssBlockOutputUpdateFlag'',char(10),''    poly1(:,1)=poly1(:,1)-xm;'',char(10),''    poly1(:,2)=lh-poly1(:,2)+ym;'',char(10),''    set(p1,''''polydata'''',poly1);'',char(10),''    set(p1,''''facecolor'''',col1);'',char(10),''    poly2(:,1)=poly2(:,1)-xm;'',char(10),''    poly2(:,2)=lh-poly2(:,2)+ym;'',char(10),''    set(p2,''''polydata'''',poly2);'',char(10),''    set(p2,''''facecolor'''',col2); '',char(10),''  end'',char(10),''end'',char(10)]';
params.fcn=struct('slib',{{''''''}},'epoint',{{''''''}});
params.impl='0';
params.nmode='0';
params.nzcr='0';
params.dept='''Standard mode''';
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'OmlCustomBlock');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_ident (blk,'beam');
blk = set_block_origin(blk,[388.672134,-296.949402]);
blk = set_block_size(blk,[120.000000,12.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='[-10,1;-10,-1;10,-1;10,1]';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'beam');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_ident (blk,'cart');
blk = set_block_origin(blk,[332.705338,-494.278107]);
blk = set_block_size(blk,[96.000000,12.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='[-3,3;-3,-3;3,-3;3,3]';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'cart');
blk = instantiate_block('system/Routing/Demux');
blk = set_block_origin(blk,[268.257843,-375.037811]);
blk = set_block_size(blk,[10.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,2);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nout='2';
params.outports=struct('size',{{'1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'Demux');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[212.478821,-256.135174]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'Block_1');
blk = instantiate_block('system/MatrixOperations/MatrixMultiplication');
blk = set_block_origin(blk,[559.473206,-320.949402]);
blk = set_block_size(blk,[70.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''*''','''*'''}});
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag11] = add_block(scsm, blk, 'MatrixMultiplication');
blk = instantiate_super_block();
scsm0 = subsystem_5();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'RotMatTrans');
blk = set_block_origin(blk,[369.961540,-347.993591]);
blk = set_block_size(blk,[72.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag12] = add_block(scsm, blk, 'RotMatTrans');
blk = instantiate_block('system/MatrixOperations/MatrixMultiplication');
blk = set_block_origin(blk,[554.279846,-421.253235]);
blk = set_block_size(blk,[70.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''*''','''*'''}});
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag13] = add_block(scsm, blk, 'MatrixMultiplication_1');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[530.702484,-321.333374]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag14] = add_block(scsm, blk, 'Block_2');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[83.353165,-365.935577]);
blk = set_block_size(blk,[72.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='[0,h+.2]';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag15] = add_block(scsm, blk, 'Constant');
blk = instantiate_block('system/MatrixOperations/Assignment');
blk = set_block_origin(blk,[314.348999,-420.935577]);
blk = set_block_size(blk,[80.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.assignx=struct('x_selectall','1','x_vectorindex','0','x_startingindex','0','x_startingindexdecreasing','0','x_vectorindexport','0','x_startingindexport','0','x_startingindexportdecreasing','0');;
params.x_vector_index=struct('x_vi',{{}});
params.x_starting_index=struct('x_si',{{}});
params.x_starting_indexdecreasing=struct('x_si',{{}});
params.assigny=struct('y_selectall','0','y_vectorindex','1','y_startingindex','0','y_startingindexdecreasing','0','y_vectorindexport','0','y_startingindexport','0','y_startingindexportdecreasing','0');;
params.y_vector_index=struct('y_vi',{{'1'}});
params.y_starting_index=struct('y_si',{{}});
params.y_starting_index_portdecreasing=struct('y_si',{{}});
params.onebased='1';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag16] = add_block(scsm, blk, 'Assignment');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[434.335144,-448.256012]);
blk = set_block_size(blk,[40.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''+'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag17] = add_block(scsm, blk, 'Sum');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_ident (blk,'cart_1');
blk = set_block_origin(blk,[122.705353,-445.256012]);
blk = set_block_size(blk,[72.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='[-1,1;-1,-1;1,-1;1,1]';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag18] = add_block(scsm, blk, 'cart_1');
blk = instantiate_block('system/MatrixOperations/MatrixGain');
blk = set_block_origin(blk,[221.545044,-458.256012]);
blk = set_block_size(blk,[80.000000,50.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='.8';
params.overflow='''Nothing''';
params.mulmethod='''Gain*u1''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag19] = add_block(scsm, blk, 'MatrixGain');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_ident (blk,'cart_1_1');
blk = set_block_origin(blk,[449.705338,-157.278137]);
blk = set_block_size(blk,[72.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='[-1,1;-1,-1;1,-1;1,1]';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag20] = add_block(scsm, blk, 'cart_1_1');
blk = instantiate_block('system/MatrixOperations/MatrixGain');
blk = set_block_origin(blk,[563.545044,-212.250549]);
blk = set_block_size(blk,[80.000000,50.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='[.1,0;0,.01]*40';
params.overflow='''Nothing''';
params.mulmethod='''u1*Gain''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag21] = add_block(scsm, blk, 'MatrixGain_1');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[133.353165,-402.935577]);
blk = set_block_size(blk,[72.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='zeros(1,2)';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag22] = add_block(scsm, blk, 'Constant_1');
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag0, '1', 'input'}, [382.291138,-235.537681;382.291138,-182.123052], false);
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag4, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'input'},{block_tag5, '1', 'output'}, [82.618301,-271.135174;82.618301,-182.123051], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag3, '1', 'input'}, [280.609894,-226.537681], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'input'},{block_tag5, '2', 'output'}, [210.872940,-202.566727], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'input'},{block_tag4, '2', 'output'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag10, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '2', 'output'},{block_tag3, '2', 'input'}, [260.866547,-286.135174;260.866547,-244.537681], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'input'},{block_tag10, '2', 'output'}, [212.478821,-345.037811], false);
scsm=add_explicit_link(scsm,{block_tag10, '1', 'output'},{block_tag2, '2', 'input'}, [212.478821,-220.566727], false);
scsm=add_explicit_link(scsm,{block_tag12, '1', 'output'},{block_tag14, '1', 'input'}, [530.702484,-329.993591], false);
scsm=add_explicit_link(scsm,{block_tag11, '1', 'output'},{block_tag6, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag13, '2', 'input'},{block_tag14, '2', 'output'}, [530.702484,-411.253235], false);
scsm=add_explicit_link(scsm,{block_tag14, '1', 'output'},{block_tag11, '2', 'input'}, [530.702484,-310.949402], false);
scsm=add_explicit_link(scsm,{block_tag13, '1', 'output'},{block_tag6, '2', 'input'}, [647.221802,-401.253235;647.221802,-318.949402], false);
scsm=add_explicit_link(scsm,{block_tag16, '1', 'output'},{block_tag17, '1', 'input'}, [414.342072,-400.935577;414.342072,-403.256012], false);
scsm=add_explicit_link(scsm,{block_tag17, '1', 'output'},{block_tag13, '1', 'input'}, [514.307495,-418.256012;514.307495,-391.253235], false);
scsm=add_explicit_link(scsm,{block_tag19, '1', 'input'},{block_tag18, '1', 'output'}, [], false);
scsm=add_explicit_link(scsm,{block_tag21, '1', 'input'},{block_tag20, '1', 'output'}, [542.625191,-187.250549;542.625191,-145.278137], false);
scsm=add_explicit_link(scsm,{block_tag21, '1', 'output'},{block_tag11, '1', 'input'}, [653.545044,-239.099976;549.473206,-239.099976], false);
scsm=add_explicit_link(scsm,{block_tag19, '1', 'output'},{block_tag17, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag15, '1', 'output'},{block_tag16, '1', 'input'}, [234.851082,-353.935577;234.851082,-390.935577], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'output'},{block_tag16, '2', 'input'}, [296.303421,-330.037811;296.303421,-410.935577], false);
scsm=add_explicit_link(scsm,{block_tag9, '2', 'output'},{block_tag12, '1', 'input'}, [324.109692,-360.037811;324.109692,-329.993591], false);
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation');
blk = set_block_origin(blk,[171.693329,-234.467010]);
blk = set_block_size(blk,[46.000000,28.000000]);
params=struct();
  params.txt='[z;θ]';
blk = set_block_parameters (blk, params);
[scsm, block_tag23] = add_block(scsm, blk, 'Annotation');
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation_5');
blk = set_block_origin(blk,[270.520294,-158.879715]);
blk = set_block_size(blk,[52.000000,28.000000]);
params=struct();
  params.txt='u=Kx̂';
blk = set_block_parameters (blk, params);
[scsm, block_tag24] = add_block(scsm, blk, 'Annotation_5');
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation_6');
blk = set_block_origin(blk,[364.913940,-175.654419]);
blk = set_block_size(blk,[30.000000,28.000000]);
params=struct();
  params.txt='x̂';
blk = set_block_parameters (blk, params);
[scsm, block_tag25] = add_block(scsm, blk, 'Annotation_6');
out_1 = scsm;
end

cart_on_beam_off_center_integral2_anim = subsystem_1();
cart_on_beam_off_center_integral2_anim = set_model_workspace (cart_on_beam_off_center_integral2_anim, {['h=1; m=2; J=10;',char(10),'nx=5;nu=1;ny=2;',char(10),'th0=pi/50;',char(10),'z0=0.25;',char(10),'zobj=0.025;y0=[zobj;0];',char(10),char(10),'if ~vssIsInLinearization',char(10),'  ctx=struct;',char(10),'  ctx.K=zeros(1,nx);',char(10),'  ctx.obs=ss([],zeros(0,nu+ny),zeros(nx,0),zeros(nx,nu+ny));',char(10),'  ctx.th0=0;ctx.z0=0;ctx.zobj=0;',char(10),'  model=bdeGetCurrentModel;',char(10),'  [A,B,C,D]=vssLinearizeSuperBlock(model,...',char(10),char(9),'   ''cart on beam'',[1],[2],0,ctx);',char(10),'  L=-place(A'',C'',-5*ones(nx,1))'';',char(10),'  obs=ss(A+L*C,[B+L*D,-L],eye(nx),zeros(nx,nu+ny));',char(10),'  K=-place(A,B,-5*ones(nx,1));',char(10),'end',char(10),char(10)]});
cart_on_beam_off_center_integral2_anim = set_initial_time (cart_on_beam_off_center_integral2_anim, '0');
cart_on_beam_off_center_integral2_anim = set_final_time (cart_on_beam_off_center_integral2_anim, '7');
tol = {'0.000001', '0.000001', '1e-10', '0' , '1', 'lsodar', '-1'};
cart_on_beam_off_center_integral2_anim = set_solver_parameters( cart_on_beam_off_center_integral2_anim, tol);
cart_on_beam_off_center_integral2_anim = evaluate_model (cart_on_beam_off_center_integral2_anim);
scsm = cart_on_beam_off_center_integral2_anim;
