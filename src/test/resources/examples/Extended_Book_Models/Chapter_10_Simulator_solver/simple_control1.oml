function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'simple_control1');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/SignalGenerators/SineWaveGenerator');
blk = set_block_origin(blk,[-230.895531,27.000000]);
blk = set_block_size(blk,[72.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.854902,0.898039,0.945098,0.996078]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.M='3';
params.F='0.1';
params.P='0';
params.offs='-2';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'SineWaveGenerator_2_1');
blk = instantiate_block('system/Dynamical/ContStateSpace');
blk = set_block_ident (blk,'Controller');
blk = set_block_origin(blk,[-33.500000,12.000000]);
blk = set_block_size(blk,[90.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.898039,0.874510,0.925490,0.996078]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.A='-1';
params.B='1';
params.C='1';
params.D='0';
params.x0='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Controller');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[-113.944702,2.000000]);
blk = set_block_size(blk,[40.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''-'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Sum');
blk = instantiate_block('system/Dynamical/ContStateSpace');
blk = set_block_ident (blk,'plant');
blk = set_block_origin(blk,[95.500000,12.000000]);
blk = set_block_size(blk,[90.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.988235,0.890196,0.811765,0.996078]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.A='-1';
params.B='1';
params.C='1';
params.D='0';
params.x0='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'plant');
blk = instantiate_block('system/MathOperations/Gain');
blk = set_block_origin(blk,[28.151611,-58.801567]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='1';
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Gain');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[226.500000,32.000000]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Split');
blk = instantiate_block('system/ActivationOperations/SampleClock');
blk = set_block_origin(blk,[258.997375,98.599075]);
blk = set_block_size(blk,[60.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,0.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
params=struct();
params.frequ='1';
params.offset='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'SampleClock');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_origin(blk,[268.997375,12.000000]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.913725,0.941176,0.858824,0.996078]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='1';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='0';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[NaN,NaN]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'Scope_1');
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag1, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag3, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag5, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag2, '2', 'input'}, [-141.944702,-38.801567;-141.944702,17.000000], false);
scsm=add_explicit_link(scsm,{block_tag5, '2', 'output'},{block_tag7, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag4, '1', 'input'}, [226.500000,-38.801567], false);
scsm=add_event_link(scsm,{block_tag6, '1', 'output'},{block_tag7, '1', 'input'}, [], false);
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation_1');
blk = set_block_origin(blk,[-27.460691,-55.926041]);
blk = set_block_size(blk,[142.000000,28.000000]);
params=struct();
  params.txt='simple_control1.scm';
blk = set_block_parameters (blk, params);
[scsm, block_tag8] = add_block(scsm, blk, 'Annotation_1');
out_1 = scsm;
end

simple_control1 = subsystem_1();
simple_control1 = set_model_workspace (simple_control1, {''});
simple_control1 = set_initial_time (simple_control1, '0');
simple_control1 = set_final_time (simple_control1, '30');
tol = {'0.000001', '0.000001', '-1', '0' , '0', 'lsodar', '-1'};
simple_control1 = set_solver_parameters( simple_control1, tol);
simple_control1 = evaluate_model (simple_control1);
scsm = simple_control1;
