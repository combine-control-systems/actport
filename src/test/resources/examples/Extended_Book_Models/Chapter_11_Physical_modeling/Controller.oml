function [out_1] = subsystem_2 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'SuperBlock');
scsm = set_diagram_context(scsm, {['A=[-0.3,3,1;0,0,2;0,0,0];',char(10),'B=[1;2;3];',char(10),'C=[1,1,2;0,2,3];',char(10),'D=0;',char(10),'x0=[-2;1;2];',char(10),'K=[0.1834511,-0.0635571;0.0556004,0.5931633;0.0409687,0.0975615];',char(10),'L=[-0.0041585,-0.1489701,-0.4993004];',char(10)]});
blk = instantiate_block('system/MatrixOperations/MatrixGain');
blk = set_block_origin(blk,[767.147708,-330.942970]);
blk = set_block_size(blk,[72.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='C';
params.overflow='''Nothing''';
params.mulmethod='''Gain*u1''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'MatrixGain');
blk = instantiate_block('system/Ports/Input');
blk = set_block_ident (blk,'Input');
blk = set_block_origin(blk,[547.433719,-328.942970]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Input');
blk = instantiate_block('system/Ports/Output');
blk = set_block_ident (blk,'Output');
blk = set_block_origin(blk,[892.147708,-328.942970]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Output');
blk = instantiate_block('system/Ports/Output');
blk = set_block_ident (blk,'Output_1');
blk = set_block_origin(blk,[893.147708,-399.820686]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='2';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Output_1');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[727.158267,-318.942970]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'fork');
blk = instantiate_block('system/Dynamical/ContStateSpace');
blk = set_block_origin(blk,[617.147708,-338.942970]);
blk = set_block_size(blk,[90.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.A='A';
params.B='B';
params.C='eye(size(A))';
params.D='zeros(size(B))';
params.x0='x0';
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'ContStateSpace_1');
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag4, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag5, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag4, '2', 'output'},{block_tag3, '1', 'input'}, [727.158000,-389.821000], false);
out_1 = scsm;
end

function [out_1] = subsystem_3 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'SuperBlock_1');
scsm = set_diagram_context(scsm, {['A=[-0.3,3,1;0,0,2;0,0,0];',char(10),'B=[1;2;3];',char(10),'C=[1,1,2;0,2,3];',char(10),'D=0;',char(10),'x0=[-2;1;2];',char(10),'K=[0.1834511,-0.0635571;0.0556004,0.5931633;0.0409687,0.0975615];',char(10),'L=[-0.0041585,-0.1489701,-0.4993004];',char(10)]});
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[1229.147710,-443.320686]);
blk = set_block_size(blk,[7.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('size',{{'1','2'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'Mux');
blk = instantiate_block('system/Ports/Input');
blk = set_block_ident (blk,'Input');
blk = set_block_origin(blk,[1133.623170,-408.101387]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Input');
blk = instantiate_block('system/Ports/Input');
blk = set_block_ident (blk,'Input_1');
blk = set_block_origin(blk,[1134.354860,-438.101387]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='2';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Input_1');
blk = instantiate_block('system/Ports/Output');
blk = set_block_ident (blk,'Output');
blk = set_block_origin(blk,[1496.647710,-423.820686]);
blk = set_block_size(blk,[20.000000,21.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Output');
blk = instantiate_block('system/Dynamical/ContStateSpace');
blk = set_block_origin(blk,[1293.147710,-433.320686]);
blk = set_block_size(blk,[90.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.A='A-K*C';
params.B='[B,K]';
params.C='eye(size(A))';
params.D='zeros(size([B,K]))';
params.x0='zeros(size(x0))';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'ContStateSpace_1');
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag4, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag0, '1', 'input'}, [1191.385440,-398.101387;1191.385440,-398.320686], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag0, '2', 'input'}, [1191.751285,-428.101387;1191.751285,-428.320686], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag3, '1', 'input'}, [], false);
out_1 = scsm;
end

function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'Controller');
scsm = set_diagram_context(scsm, {['A=[-0.3,3,1;0,0,2;0,0,0];',char(10),'B=[1;2;3];',char(10),'C=[1,1,2;0,2,3];',char(10),'D=0;',char(10),'x0=[-2;1;2];',char(10),'K=[0.1834511,-0.0635571;0.0556004,0.5931633;0.0409687,0.0975615];',char(10),'L=[-0.0041585,-0.1489701,-0.4993004];',char(10)]});
blk = instantiate_block('system/SignalGenerators/Random');
blk = set_block_origin(blk,[127.143856,-394.087860]);
blk = set_block_size(blk,[81.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.913725,0.941176,0.858824,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.distribution='''Normal''';
params.A='[0;0;0]';
params.B='[0.1;0.1;0.1]';
params.seed='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'Random');
blk = instantiate_block('system/Routing/Demux');
blk = set_block_origin(blk,[240.147708,-404.087860]);
blk = set_block_size(blk,[7.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,2);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nout='2';
params.outports=struct('size',{{'1','2'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Demux');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[315.147708,-307.320686]);
blk = set_block_size(blk,[32.000000,47.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''+'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Sum');
blk = instantiate_super_block();
scsm0 = subsystem_2();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'SuperBlock');
blk = set_block_origin(blk,[376.147708,-303.820686]);
blk = set_block_size(blk,[72.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.988235,0.890196,0.811765,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,2);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag3] = add_block(scsm, blk, 'SuperBlock');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[535.647708,-308.320686]);
blk = set_block_size(blk,[33.000000,46.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''+'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Sum_1');
blk = instantiate_super_block();
scsm0 = subsystem_3();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'SuperBlock_1');
blk = set_block_origin(blk,[659.647708,-295.398689]);
blk = set_block_size(blk,[96.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.988235,0.890196,0.811765,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag5] = add_block(scsm, blk, 'SuperBlock_1');
blk = instantiate_block('system/MatrixOperations/MatrixGain');
blk = set_block_origin(blk,[447.147708,-175.320686]);
blk = set_block_size(blk,[72.000000,48.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='L';
params.overflow='''Nothing''';
params.mulmethod='''Gain*u1''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'MatrixGain');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[256.587648,-216.308378]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'fork');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[872.147708,-353.320686]);
blk = set_block_size(blk,[30.000000,44.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''-''','''+'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'Sum_2');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[807.082335,-275.441270]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'fork_1');
blk = instantiate_block('system/ActivationOperations/EventClock');
blk = set_block_origin(blk,[142.643856,-295.582401]);
blk = set_block_size(blk,[50.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,0.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
params=struct();
params.period='0.03';
params.init='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'EventClock_1');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Scope');
blk = set_block_origin(blk,[936.721807,-351.320686]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.945098,0.854902,0.854902,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='0';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[-2,2]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag11] = add_block(scsm, blk, 'Scope');
scsm=add_event_link(scsm,{block_tag10, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag1, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag2, '2', 'input'}, [290.148000,-359.087860;290.148000,-295.571000], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag3, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag4, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag9, '1', 'input'}, [807.082000,-275.398689;807.082000,-275.441270], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag7, '1', 'input'}, [256.587648,-151.321001], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag2, '1', 'input'}, [256.148000,-272.071000], false);
scsm=add_explicit_link(scsm,{block_tag7, '2', 'output'},{block_tag5, '1', 'input'}, [604.148000,-216.321000;604.148000,-265.399000], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'output'},{block_tag6, '1', 'input'}, [807.082335,-151.320968], false);
scsm=add_explicit_link(scsm,{block_tag9, '2', 'output'},{block_tag8, '1', 'input'}, [807.082000,-320.321000], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag11, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '2', 'output'},{block_tag8, '2', 'input'}, [458.148000,-342.321000], false);
scsm=add_explicit_link(scsm,{block_tag1, '2', 'output'},{block_tag4, '2', 'input'}, [513.600000,-389.087860;513.600000,-296.821000], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag5, '2', 'input'}, [578.648000,-285.320686;578.648000,-285.398000], false);
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation_1');
blk = set_block_origin(blk,[473.746765,-384.751129]);
blk = set_block_size(blk,[102.000000,28.000000]);
params=struct();
  params.txt='controller.scm';
blk = set_block_parameters (blk, params);
[scsm, block_tag12] = add_block(scsm, blk, 'Annotation_1');
out_1 = scsm;
end

Controller = subsystem_1();
Controller = set_model_workspace (Controller, {''});
Controller = set_initial_time (Controller, '0');
Controller = set_final_time (Controller, '30');
tol = {'0.000001', '0.000001', '1e-10', '0' , '0', 'lsodar', '0'};
Controller = set_solver_parameters( Controller, tol);
Controller = evaluate_model (Controller);
scsm = Controller;
