function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'simpleODE');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/CustomBlocks/MoCustomBlock');
blk = set_block_origin(blk,[-50.000000,53.000000]);
blk = set_block_size(blk,[60.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.988235,0.890196,0.811765,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,2);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.inports=struct('name',{{'''u'''}},'value',{{'0'}});
params.nout='2';
params.outports=struct('name',{{'''x''','''y'''}});
params.nparams='0';
params.params=struct('name',{{}},'value',{{}},'typ',{{}});
params.codename='''simpleODE''';
params.code='[''model simpleODE '',char(10),''    Real x(start =5);'',char(10),''   Real y(start=2);'',char(10),''   Real u;'',char(10),''equation'',char(10),''   der(x)=2-15*y+u;'',char(10),''   der(y)=x+6;'',char(10),''end simpleODE;'']';
params.nlibs='0';
params.libs=struct('path',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'MoCustomBlock');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[-130.000000,57.000000]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.913725,0.941176,0.858824,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='1';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Constant');
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[63.500000,53.000000]);
blk = set_block_size(blk,[6.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('size',{{'1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Mux');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Scope');
blk = set_block_origin(blk,[105.250000,57.000000]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.854902,0.898039,0.945098,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='1';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[NaN,NaN]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Scope');
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag0, '2', 'output'},{block_tag2, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag3, '1', 'input'}, [], false);
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation_1');
blk = set_block_origin(blk,[-58.796387,58.043060]);
blk = set_block_size(blk,[116.000000,28.000000]);
params=struct();
  params.txt='simpleODE.scm';
blk = set_block_parameters (blk, params);
[scsm, block_tag4] = add_block(scsm, blk, 'Annotation_1');
out_1 = scsm;
end

simpleODE = subsystem_1();
simpleODE = set_model_workspace (simpleODE, {''});
simpleODE = set_initial_time (simpleODE, '0');
simpleODE = set_final_time (simpleODE, '10');
tol = {'0.000001', '0.000001', '-1', '0' , '0', 'lsodar', '-1'};
simpleODE = set_solver_parameters( simpleODE, tol);
simpleODE = evaluate_model (simpleODE);
scsm = simpleODE;
