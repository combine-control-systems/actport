function [out_1] = subsystem_2 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'SB1');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/MathOperations/MathExpression');
blk = set_block_origin(blk,[566.754944,-305.708923]);
blk = set_block_size(blk,[156.000000,36.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.work='getcurrentenv()';
params.exx='''-u3+A11*u1+A12*u2+B11''';
params.zc='0';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'MathExpression');
blk = instantiate_block('system/MathOperations/MathExpression');
blk = set_block_origin(blk,[560.754944,-365.000000]);
blk = set_block_size(blk,[168.000000,36.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.work='getcurrentenv()';
params.exx='''-u4+A21*u1+A22*u2+B12''';
params.zc='0';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'MathExpression_1');
blk = instantiate_block('system/MathOperations/MathExpression');
blk = set_block_origin(blk,[603.130005,-481.500000]);
blk = set_block_size(blk,[108.000000,36.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.work='getcurrentenv()';
params.exx='''-a*(u1-Vref)+u5''';
params.zc='0';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'MathExpression_1_1');
blk = instantiate_block('system/MathOperations/Gain');
blk = set_block_origin(blk,[477.533875,-483.500000]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='-1';
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Gain');
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[450.000000,-362.000000]);
blk = set_block_size(blk,[20.000000,60.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('size',{{'1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Mux');
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[326.000000,-434.575287]);
blk = set_block_size(blk,[7.000000,60.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,3);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='3';
params.inports=struct('size',{{'2','2','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Mux_1');
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[815.864868,-357.000000]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'Input');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[758.500000,-347.000000]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'fork');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[770.519341,-347.000000]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'fork_1');
blk = instantiate_block('system/Ports/Output');
blk = set_block_origin(blk,[252.037628,-414.575287]);
blk = set_block_size(blk,[30.000000,20.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'Output');
blk = instantiate_block('system/MatrixOperations/MatrixExtractor');
blk = set_block_origin(blk,[614.754944,-424.575287]);
blk = set_block_size(blk,[80.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.extractx=struct('x_selectall','0','x_vectorindex','1','x_startingindex','0','x_startingindexdecreasing','0','x_vectorindexport','0','x_startingindexport','0','x_startingindexportdecreasing','0');;
params.x_vector_index=struct('x_vi',{{'[1:2]'}});
params.x_starting_index=struct('x_si',{{}},'x_osz',{{}});
params.x_starting_indexdecreasing=struct('x_si',{{}},'x_osz',{{}});
params.x_starting_index_port=struct('x_osz',{{}});
params.x_starting_index_portdecreasing=struct('x_osz',{{}});
params.extracty=struct('y_selectall','0','y_vectorindex','1','y_startingindex','0','y_startingindexdecreasing','0','y_vectorindexport','0','y_startingindexport','0','y_startingindexportdecreasing','0');;
params.y_vector_index=struct('y_vi',{{'1'}});
params.y_starting_index=struct('y_si',{{}},'y_osz',{{}});
params.y_starting_indexdecreasing=struct('y_si',{{}},'y_osz',{{}});
params.y_starting_index_port=struct('y_osz',{{}});
params.y_starting_index_portdecreasing=struct('y_osz',{{}});
params.onebased='1';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'MatrixExtractor');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[770.519178,-404.575287]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag11] = add_block(scsm, blk, 'Split');
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag4, '1', 'input'}, [501.951233,-287.708982;501.951233,-317.000000], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag3, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag5, '1', 'input'}, [405.000000,-332.000000;405.000000,-384.575287], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag8, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag1, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag7, '2', 'output'},{block_tag0, '1', 'input'}, [758.500000,-287.709000], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag7, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag8, '2', 'output'},{block_tag11, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag9, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag5, '3', 'input'}, [403.500000,-463.500000;403.500000,-424.575000], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag4, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag11, '2', 'output'},{block_tag10, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag11, '1', 'output'},{block_tag2, '1', 'input'}, [770.519000,-463.500000], false);
scsm=add_explicit_link(scsm,{block_tag10, '1', 'output'},{block_tag5, '2', 'input'}, [], false);
out_1 = scsm;
end

function [out_1] = subsystem_3 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'SB2');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/MathOperations/MathExpression');
blk = set_block_origin(blk,[422.990082,-380.432617]);
blk = set_block_size(blk,[170.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.work='getcurrentenv()';
params.exx='''-u3+A11*u1+A12*u2+B21''';
params.zc='0';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'MathExpression');
blk = instantiate_block('system/MathOperations/MathExpression');
blk = set_block_origin(blk,[422.990082,-441.419226]);
blk = set_block_size(blk,[170.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.work='getcurrentenv()';
params.exx='''-u4+A21*u1+A22*u2+B22''';
params.zc='0';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'MathExpression_1');
blk = instantiate_block('system/MathOperations/MathExpression');
blk = set_block_origin(blk,[447.990082,-573.432617]);
blk = set_block_size(blk,[120.000000,36.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.work='getcurrentenv()';
params.exx='''-a*(u1-Vref)+u5''';
params.zc='0';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'MathExpression_2');
blk = instantiate_block('system/MathOperations/MathExpression');
blk = set_block_origin(blk,[467.990082,-637.432617]);
blk = set_block_size(blk,[80.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.work='getcurrentenv()';
params.exx='''-u2''';
params.zc='0';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'MathExpression_1_1');
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[309.163452,-421.932617]);
blk = set_block_size(blk,[7.000000,60.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('size',{{'1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Mux');
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[223.663452,-617.932617]);
blk = set_block_size(blk,[7.000000,60.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('size',{{'-1','-2'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Mux_1');
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[129.163452,-527.163605]);
blk = set_block_size(blk,[7.000000,60.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,3);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='3';
params.inports=struct('size',{{'2','2','2'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'Mux_2');
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[710.632873,-507.163605]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'Input');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[653.663452,-497.163605]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'fork');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[653.663452,-421.419226]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'fork_1');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[663.703792,-497.163605]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'fork_2');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[663.703792,-555.432617]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag11] = add_block(scsm, blk, 'fork_3');
blk = instantiate_block('system/Ports/Output');
blk = set_block_origin(blk,[61.240448,-507.163605]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag12] = add_block(scsm, blk, 'Output');
blk = instantiate_block('system/MatrixOperations/MatrixExtractor');
blk = set_block_origin(blk,[467.990082,-517.163605]);
blk = set_block_size(blk,[80.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.extractx=struct('x_selectall','0','x_vectorindex','1','x_startingindex','0','x_startingindexdecreasing','0','x_vectorindexport','0','x_startingindexport','0','x_startingindexportdecreasing','0');;
params.x_vector_index=struct('x_vi',{{'[1:2]'}});
params.x_starting_index=struct('x_si',{{}},'x_osz',{{}});
params.x_starting_indexdecreasing=struct('x_si',{{}},'x_osz',{{}});
params.x_starting_index_port=struct('x_osz',{{}});
params.x_starting_index_portdecreasing=struct('x_osz',{{}});
params.extracty=struct('y_selectall','0','y_vectorindex','1','y_startingindex','0','y_startingindexdecreasing','0','y_vectorindexport','0','y_startingindexport','0','y_startingindexportdecreasing','0');;
params.y_vector_index=struct('y_vi',{{'1'}});
params.y_starting_index=struct('y_si',{{}},'y_osz',{{}});
params.y_starting_indexdecreasing=struct('y_si',{{}},'y_osz',{{}});
params.y_starting_index_port=struct('y_osz',{{}});
params.y_starting_index_portdecreasing=struct('y_osz',{{}});
params.onebased='1';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag13] = add_block(scsm, blk, 'MatrixExtractor_1_1');
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag4, '1', 'input'}, [372.163452,-360.432617;372.163452,-376.932617], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag4, '2', 'input'}, [371.163452,-421.419226;371.163452,-406.932617], false);
scsm=add_explicit_link(scsm,{block_tag13, '1', 'output'},{block_tag6, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag5, '2', 'input'}, [315.163452,-617.432617;315.163452,-602.932617], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag6, '1', 'input'}, [238.163452,-391.932617;238.163452,-477.163605], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag10, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag13, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'output'},{block_tag0, '1', 'input'}, [653.663452,-360.432617], false);
scsm=add_explicit_link(scsm,{block_tag9, '2', 'output'},{block_tag1, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag8, '2', 'output'},{block_tag9, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag10, '1', 'output'},{block_tag8, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag10, '2', 'output'},{block_tag11, '1', 'input'}, [663.703792,-541.453617;663.819452,-541.453617;663.819452,-555.432617], false);
scsm=add_explicit_link(scsm,{block_tag11, '1', 'output'},{block_tag3, '1', 'input'}, [663.703452,-617.432617], false);
scsm=add_explicit_link(scsm,{block_tag11, '2', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag12, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag6, '3', 'input'}, [173.663452,-587.932617;173.663452,-517.163605], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag5, '1', 'input'}, [283.083452,-555.432617;283.083452,-572.932617], false);
out_1 = scsm;
end

function [out_1] = subsystem_4 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'SB3');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/MathOperations/MathExpression');
blk = set_block_origin(blk,[877.000000,-394.500000]);
blk = set_block_size(blk,[156.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.work='getcurrentenv()';
params.exx='''-u3+A11*u1+A12*u2+B21''';
params.zc='0';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'MathExpression');
blk = instantiate_block('system/MathOperations/MathExpression');
blk = set_block_origin(blk,[915.000000,-463.000000]);
blk = set_block_size(blk,[80.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.work='getcurrentenv()';
params.exx='''u2''';
params.zc='0';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'MathExpression_1');
blk = instantiate_block('system/MathOperations/MathExpression');
blk = set_block_origin(blk,[915.000000,-609.340332]);
blk = set_block_size(blk,[80.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.work='getcurrentenv()';
params.exx='''-a*(u1-Vref)+u5''';
params.zc='0';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'MathExpression_2');
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[787.732178,-436.000000]);
blk = set_block_size(blk,[7.000000,60.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('size',{{'1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Mux');
blk = instantiate_block('system/MathOperations/Gain');
blk = set_block_origin(blk,[764.585083,-609.340332]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='1';
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Gain');
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[617.732178,-553.980103]);
blk = set_block_size(blk,[7.000000,60.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,3);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='3';
params.inports=struct('size',{{'2','2','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Mux_1');
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[1039.174690,-561.798462]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'Input');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[1072.456540,-523.980103]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'fork');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[1097.139450,-443.000000]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'fork_1');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[1097.205827,-523.980103]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'fork_2');
blk = instantiate_block('system/Ports/Output');
blk = set_block_origin(blk,[544.976929,-533.980103]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'Output');
blk = instantiate_block('system/MatrixOperations/MatrixExtractor');
blk = set_block_origin(blk,[915.000000,-543.980103]);
blk = set_block_size(blk,[80.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.extractx=struct('x_selectall','0','x_vectorindex','1','x_startingindex','0','x_startingindexdecreasing','0','x_vectorindexport','0','x_startingindexport','0','x_startingindexportdecreasing','0');;
params.x_vector_index=struct('x_vi',{{'[1:2]'}});
params.x_starting_index=struct('x_si',{{}},'x_osz',{{}});
params.x_starting_indexdecreasing=struct('x_si',{{}},'x_osz',{{}});
params.x_starting_index_port=struct('x_osz',{{}});
params.x_starting_index_portdecreasing=struct('x_osz',{{}});
params.extracty=struct('y_selectall','0','y_vectorindex','1','y_startingindex','0','y_startingindexdecreasing','0','y_vectorindexport','0','y_startingindexport','0','y_startingindexportdecreasing','0');;
params.y_vector_index=struct('y_vi',{{'1'}});
params.y_starting_index=struct('y_si',{{}},'y_osz',{{}});
params.y_starting_indexdecreasing=struct('y_si',{{}},'y_osz',{{}});
params.y_starting_index_port=struct('y_osz',{{}});
params.y_starting_index_portdecreasing=struct('y_osz',{{}});
params.onebased='1';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag11] = add_block(scsm, blk, 'MatrixExtractor_1_1_1_1');
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag3, '1', 'input'}, [823.232000,-374.500000;823.232000,-391.000000], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag3, '2', 'input'}, [823.232000,-443.000000;823.232000,-421.000000], false);
scsm=add_explicit_link(scsm,{block_tag11, '1', 'output'},{block_tag5, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag5, '1', 'input'}, [705.732000,-406.000000;705.732000,-503.980103], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag7, '1', 'input'}, [1072.460000,-551.798000], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag11, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag7, '2', 'output'},{block_tag9, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag0, '1', 'input'}, [1097.139450,-374.500000], false);
scsm=add_explicit_link(scsm,{block_tag8, '2', 'output'},{block_tag1, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'output'},{block_tag8, '1', 'input'}, [1097.139450,-523.980103], false);
scsm=add_explicit_link(scsm,{block_tag9, '2', 'output'},{block_tag2, '1', 'input'}, [1097.210547,-589.340332], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag10, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag5, '3', 'input'}, [708.000000,-589.340000;708.000000,-543.980103], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag4, '1', 'input'}, [], false);
out_1 = scsm;
end

function [out_1] = subsystem_5 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'Sawtooth Generator');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/SignalGenerators/SawtoothBase');
blk = set_block_origin(blk,[694.797547,-384.112066]);
blk = set_block_size(blk,[71.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.init='0.0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'SawtoothBase');
blk = instantiate_block('system/MathOperations/Gain');
blk = set_block_origin(blk,[563.374634,-387.862066]);
blk = set_block_size(blk,[73.250000,47.500000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='(VU-VL)/T';
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Gain');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[434.901528,-303.632116]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='VL';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Constant');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[528.041199,-328.631719]);
blk = set_block_size(blk,[40.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''+'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Sum');
blk = instantiate_block('system/Ports/Output');
blk = set_block_origin(blk,[619.118183,-308.632036]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Output');
blk = instantiate_block('system/ActivationOperations/EventClock');
blk = set_block_origin(blk,[705.297547,-295.814712]);
blk = set_block_size(blk,[50.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,0.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
params=struct();
params.period='T';
params.init='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'EventClock_1');
scsm=add_event_link(scsm,{block_tag5, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag1, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag3, '2', 'input'}, [497.345000,-364.112000;497.345000,-313.632000], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag3, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag4, '1', 'input'}, [], false);
out_1 = scsm;
end

function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'Finite_state_Buck');
scsm = set_diagram_context(scsm, {['L=0.03;',char(10),'T=400e-6;',char(10),'R=220/2;',char(10),'C=47e-6;',char(10),'a=8.4;',char(10),'Vref=11.3;',char(10),'VL=3.8;',char(10),'VU=8.2;',char(10),'E=20;',char(10),'A11=-1/R/C;',char(10),'A12=1/C;',char(10),'A21=-1/L;',char(10),'A22=0;',char(10),'B11=0;',char(10),'B12=E/L;',char(10),'B21=0;',char(10),'B22=0;',char(10)]});
blk = instantiate_super_block();
scsm0 = subsystem_2();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'SB1');
blk = set_block_origin(blk,[288.283142,-383.758825]);
blk = set_block_size(blk,[50.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.945098,0.854902,0.854902,0.996078]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag0] = add_block(scsm, blk, 'SB1');
blk = instantiate_super_block();
scsm0 = subsystem_3();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'SB2');
blk = set_block_origin(blk,[288.283142,-462.758825]);
blk = set_block_size(blk,[50.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.945098,0.854902,0.854902,0.996078]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag1] = add_block(scsm, blk, 'SB2');
blk = instantiate_super_block();
scsm0 = subsystem_4();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'SB3');
blk = set_block_origin(blk,[288.283142,-542.758825]);
blk = set_block_size(blk,[50.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.945098,0.854902,0.854902,0.996078]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag2] = add_block(scsm, blk, 'SB3');
blk = instantiate_super_block();
scsm0 = subsystem_5();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'Sawtooth Generator');
blk = set_block_origin(blk,[488.349932,-398.758825]);
blk = set_block_size(blk,[50.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.854902,0.898039,0.945098,0.996078]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag3] = add_block(scsm, blk, 'Sawtooth Generator');
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[420.479296,-393.758825]);
blk = set_block_size(blk,[7.000000,60.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('size',{{'4','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Mux');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[380.783299,-363.758825]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'fork_4');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[380.783299,-442.758825]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'fork_5');
blk = instantiate_block('system/Hybrid/Automat');
blk = set_block_origin(blk,[273.283142,-299.021154]);
blk = set_block_size(blk,[80.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.988235,0.890196,0.811765,0.996078]);
blk = set_block_nin (blk,3);
blk = set_block_nout (blk,2);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.NMode='3';
params.jumps=struct('tmodev',{{'2','[1;3]','1'}});
params.Minitial='1';
params.X0='[0;0]';
params.outevent='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'Automat');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Scope');
blk = set_block_origin(blk,[609.924954,-330.032817]);
blk = set_block_size(blk,[45.158542,44.061666]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.913725,0.941176,0.858824,0.996078]);
blk = set_block_nin (blk,3);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='3';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='1';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{'''''','''''',''''''}},'reverseColor',{{'0','0','0'}},'grid',{{'''Coarse''','''Coarse''','''Coarse'''}},'xScale',{{'''linear''','''linear''','''linear'''}},'xRefresh',{{'-1','-1','-1'}},'yScale',{{'''linear''','''linear''','''linear'''}},'yInterval',{{'[1,3]','[NaN,NaN]','[NaN,NaN]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{'''''','''''',''''''}},'color',{{'0','0','0'}},'marker',{{'0','0','0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'Scope');
blk = instantiate_block('system/Routing/Demux');
blk = set_block_origin(blk,[502.988770,-293.021154]);
blk = set_block_size(blk,[6.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,2);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nout='2';
params.outports=struct('size',{{'1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'Demux');
blk = instantiate_block('system/Routing/Demux');
blk = set_block_origin(blk,[560.600830,-360.501984]);
blk = set_block_size(blk,[7.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,4);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nout='4';
params.outports=struct('size',{{'1','1','1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'Demux_1');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[452.696000,-330.501984]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag11] = add_block(scsm, blk, 'Split');
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag4, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag5, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag7, '1', 'input'}, [247.479142,-363.758825;247.479142,-265.687904], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag7, '2', 'input'}, [229.479142,-442.758825;229.479142,-279.021053], false);
scsm=add_explicit_link(scsm,{block_tag7, '2', 'output'},{block_tag11, '1', 'input'}, [452.696000,-289.021000], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag5, '2', 'output'},{block_tag6, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag2, '1', 'input'}, [380.783142,-522.758825], false);
scsm=add_explicit_link(scsm,{block_tag6, '2', 'output'},{block_tag1, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag7, '3', 'input'}, [208.081142,-522.758825;208.081142,-292.354119], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag9, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'output'},{block_tag8, '1', 'input'}, [585.448853,-257.021154;585.448853,-293.314762], false);
scsm=add_explicit_link(scsm,{block_tag11, '2', 'output'},{block_tag10, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag11, '1', 'output'},{block_tag4, '1', 'input'}, [452.696000,-348.758825], false);
scsm=add_explicit_link(scsm,{block_tag10, '1', 'output'},{block_tag8, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag10, '2', 'output'},{block_tag8, '3', 'input'}, [599.924954,-323.001984], false);
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation_1');
blk = set_block_origin(blk,[463.665733,-460.320053]);
blk = set_block_size(blk,[150.000000,28.000000]);
params=struct();
  params.txt='Finite_state_buck.scm';
blk = set_block_parameters (blk, params);
[scsm, block_tag12] = add_block(scsm, blk, 'Annotation_1');
out_1 = scsm;
end

Finite_state_Buck = subsystem_1();
Finite_state_Buck = set_model_workspace (Finite_state_Buck, {''});
Finite_state_Buck = set_initial_time (Finite_state_Buck, '0');
Finite_state_Buck = set_final_time (Finite_state_Buck, '0.028');
tol = {'0.000001', '0.000001', '1e-10', '0' , '0', 'ida', '0'};
Finite_state_Buck = set_solver_parameters( Finite_state_Buck, tol);
Finite_state_Buck = evaluate_model (Finite_state_Buck);
scsm = Finite_state_Buck;
