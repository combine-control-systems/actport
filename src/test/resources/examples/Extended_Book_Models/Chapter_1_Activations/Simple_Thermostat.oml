function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'Simple_Thermostat');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[19.468719,-92.500000]);
blk = set_block_size(blk,[42.000000,39.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.572549,0.815686,0.313725,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='-10';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'Constant');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[349.737335,-93.000000]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.572549,0.815686,0.313725,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='10';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Constant_1');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[105.000000,-118.000000]);
blk = set_block_size(blk,[12.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.933333,0.886275,0.921569,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''+'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Sum');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[300.000000,-118.000000]);
blk = set_block_size(blk,[12.000000,60.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.933333,0.886275,0.921569,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''+'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Sum_1');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[105.000000,-347.250000]);
blk = set_block_size(blk,[12.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.933333,0.886275,0.921569,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''+'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Sum_2');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[281.000000,-178.103531]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.572549,0.815686,0.313725,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='-6';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Constant_2');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[281.000000,-231.724228]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.572549,0.815686,0.313725,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='6';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'Constant_3');
blk = instantiate_block('system/ActivationOperations/ZeroCrossUp');
blk = set_block_origin(blk,[145.000000,-108.000000]);
blk = set_block_size(blk,[48.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
params=struct();
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'ZeroCrossUp');
blk = instantiate_block('system/ActivationOperations/ZeroCrossDown');
blk = set_block_origin(blk,[216.000000,-108.000000]);
blk = set_block_size(blk,[48.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
params=struct();
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'ZeroCrossDown');
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[300.000000,-305.000000]);
blk = set_block_size(blk,[7.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('size',{{'1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'Mux');
blk = instantiate_block('system/Routing/SelectInput');
blk = set_block_origin(blk,[166.000000,-206.000000]);
blk = set_block_size(blk,[64.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,2);
blk = set_block_evtnout (blk,0);
params=struct();
params.typ='''double''';
params.nin='2';
params.externalActivation='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'EventSelectInput');
blk = instantiate_block('system/SignalGenerators/Random');
blk = set_block_origin(blk,[41.999763,-350.250000]);
blk = set_block_size(blk,[36.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.572549,0.815686,0.313725,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.distribution='''Normal''';
params.A='0';
params.B='20';
params.seed='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag11] = add_block(scsm, blk, 'Random');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[379.000000,-317.250000]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag12] = add_block(scsm, blk, 'fork');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[251.861673,-317.570638]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag13] = add_block(scsm, blk, 'fork_1');
blk = instantiate_block('system/ActivationOperations/SampleClock');
blk = set_block_origin(blk,[30.172470,-263.000000]);
blk = set_block_size(blk,[60.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,0.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
params=struct();
params.frequ='.1';
params.offset='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag14] = add_block(scsm, blk, 'SampleClock');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[168.000000,-253.000000]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.572549,0.815686,0.313725,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='-6';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag15] = add_block(scsm, blk, 'Constant_4');
blk = instantiate_block('system/Routing/Merge');
blk = set_block_origin(blk,[109.000000,-230.551651]);
blk = set_block_size(blk,[7.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
blk = set_block_parameters(blk,params);
[scsm, block_tag16] = add_block(scsm, blk, 'Merge');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[88.430710,-260.312970]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag17] = add_block(scsm, blk, 'fork_2');
blk = instantiate_block('system/Dynamical/Integral');
blk = set_block_origin(blk,[183.517059,-347.250000]);
blk = set_block_size(blk,[36.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.752941,0.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.x0='0';
params.reinit='0';
params.satur='0';
params.limit=struct('max',{{}},'min',{{}},'zcross',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag18] = add_block(scsm, blk, 'Integral');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Scope');
blk = set_block_origin(blk,[329.000000,-295.000000]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='0';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[-25,15]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag19] = add_block(scsm, blk, 'Scope');
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag3, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag7, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag8, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag10, '1', 'input'}, [263.500000,-158.103531;263.500000,-176.000000], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag10, '2', 'input'}, [263.026245,-211.724228;263.026245,-196.000000], false);
scsm=add_explicit_link(scsm,{block_tag11, '1', 'output'},{block_tag4, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag18, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag18, '1', 'output'},{block_tag13, '1', 'input'}, [251.861673,-317.250000], false);
scsm=add_explicit_link(scsm,{block_tag12, '1', 'output'},{block_tag3, '2', 'input'}, [379.000000,-103.000000], false);
scsm=add_explicit_link(scsm,{block_tag12, '2', 'output'},{block_tag2, '2', 'input'}, [379.000000,-365.000000;26.690292,-365.000000;26.690292,-103.000000], false);
scsm=add_explicit_link(scsm,{block_tag13, '1', 'output'},{block_tag12, '1', 'input'}, [251.861673,-317.250000], false);
scsm=add_explicit_link(scsm,{block_tag13, '2', 'output'},{block_tag9, '2', 'input'}, [251.861853,-290.000000], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'output'},{block_tag19, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag14, '1', 'output'},{block_tag11, '1', 'input'}, [60.172470,-291.000000;59.999763,-291.000000], false);
scsm=add_explicit_link(scsm,{block_tag10, '1', 'output'},{block_tag16, '1', 'input'}, [142.000000,-186.000000;142.000000,-200.551651], false);
scsm=add_explicit_link(scsm,{block_tag15, '1', 'output'},{block_tag16, '2', 'input'}, [139.197891,-233.000000;139.197891,-220.551651], false);
scsm=add_explicit_link(scsm,{block_tag16, '1', 'output'},{block_tag17, '1', 'input'}, [88.500000,-210.551651;88.500000,-260.312970], false);
scsm=add_explicit_link(scsm,{block_tag17, '1', 'output'},{block_tag9, '1', 'input'}, [88.430710,-260.000000], false);
scsm=add_explicit_link(scsm,{block_tag17, '2', 'output'},{block_tag4, '1', 'input'}, [88.430710,-302.250000], false);
scsm=add_event_link(scsm,{block_tag7, '1', 'output'},{block_tag10, '1', 'input'}, [169.000000,-128.000000;214.000000,-128.000000], false);
scsm=add_event_link(scsm,{block_tag8, '1', 'output'},{block_tag10, '2', 'input'}, [240.000000,-141.000000;182.000000,-141.000000], false);
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation');
blk = set_block_origin(blk,[216.458923,-300.422089]);
blk = set_block_size(blk,[96.000000,28.000000]);
params=struct();
  params.txt='Temperature';
blk = set_block_parameters (blk, params);
[scsm, block_tag20] = add_block(scsm, blk, 'Annotation');
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation_1');
blk = set_block_origin(blk,[124.020981,-354.238159]);
blk = set_block_size(blk,[162.000000,28.000000]);
params=struct();
  params.txt='Simple_Thermostat.scm';
blk = set_block_parameters (blk, params);
[scsm, block_tag21] = add_block(scsm, blk, 'Annotation_1');
out_1 = scsm;
end

Simple_Thermostat = subsystem_1();
Simple_Thermostat = set_model_workspace (Simple_Thermostat, {''});
Simple_Thermostat = set_initial_time (Simple_Thermostat, '0');
Simple_Thermostat = set_final_time (Simple_Thermostat, '30');
tol = {'0.000001', '0.000001', '1e-10', '0' , '0', 'lsodar', '0'};
Simple_Thermostat = set_solver_parameters( Simple_Thermostat, tol);
Simple_Thermostat = evaluate_model (Simple_Thermostat);
scsm = Simple_Thermostat;
