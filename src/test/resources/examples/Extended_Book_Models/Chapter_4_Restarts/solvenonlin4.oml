function [out_1] = subsystem_2 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'restart');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/ActivationOperations/End');
blk = set_block_origin(blk,[159.777069,39.573758]);
blk = set_block_size(blk,[48.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.000000,0.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.job='''Restart''';
params.bmessage='''''';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'End');
blk = instantiate_block('system/Ports/EventInput');
blk = set_block_origin(blk,[161.777069,148.802762]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
params=struct();
params.portNumber='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'EventInput');
blk = instantiate_block('system/ActivationOperations/IfThenElse');
blk = set_block_origin(blk,[147.777069,81.005646]);
blk = set_block_size(blk,[48.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.000000,0.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,2);
params=struct();
params.externalActivation='1';
params.nmod='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'IfThenElse');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[86.693085,93.005646]);
blk = set_block_size(blk,[36.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.572549,0.815686,0.313725,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='done';
params.typ='''boolean''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Constant');
scsm=add_event_link(scsm,{block_tag1, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag2, '2', 'output'},{block_tag0, '1', 'input'}, [], false);
out_1 = scsm;
end

function [out_1] = subsystem_3 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, '2D scope');
scsm = set_diagram_context(scsm, {['if ~done',char(10),'  return',char(10),'end']});
blk = instantiate_block('system/SignalViewers/ScopeXY');
blk = set_block_origin(blk,[132.538834,-28.879332]);
blk = set_block_size(blk,[36.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.externalActivation='0';
params.winSize='[500,250]';
params.winPos='[300,300]';
params.winNam='''Grusins Metric state variables''';
params.winHidden='0';
params.showAtEnd='0';
params.option='''Reuse''';
params.plotTitle='''x1 vs x2''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xInterval='[NaN,NaN]';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.curvesStyle='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'ScopeXY');
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[88.309341,-11.879332]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Input');
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[88.309341,-29.879332]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='2';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Input_1');
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag0, '2', 'input'}, [], false);
out_1 = scsm;
end

function [out_1] = subsystem_4 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'Scope');
scsm = set_diagram_context(scsm, {['if ~done',char(10),'  return',char(10),'end']});
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Scope');
blk = set_block_origin(blk,[208.505737,-129.845428]);
blk = set_block_size(blk,[36.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.externalActivation='0';
params.winSize='[500,250]';
params.winPos='[300,700]';
params.winNam='''Grusins Metric control''';
params.winHidden='0';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='0';
params.win_s=struct('title',{{'''u1     u2''',''''''}},'reverseColor',{{'0','0'}},'grid',{{'''Coarse''','''Coarse'''}},'xScale',{{'''linear''','''linear'''}},'xRefresh',{{'-1','-1'}},'yScale',{{'''linear''','''linear'''}},'yInterval',{{'[NaN,NaN]','[NaN,NaN]'}});
params.plotTitle='''Grusins Metric control''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{'''u1''','''u2'''}},'color',{{'0','0'}},'marker',{{'0','0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'Scope');
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[120.661079,-122.686249]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Input');
blk = instantiate_block('system/Routing/Demux');
blk = set_block_origin(blk,[160.929230,-142.686249]);
blk = set_block_size(blk,[10.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,2);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nout='2';
params.outports=struct('size',{{'1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Demux');
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag0, '1', 'input'}, [189.717484,-97.686249;189.717484,-102.845428], false);
scsm=add_explicit_link(scsm,{block_tag2, '2', 'output'},{block_tag0, '2', 'input'}, [189.717484,-127.686249;189.717484,-120.845428], false);
out_1 = scsm;
end

function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'solvenonlin4');
scsm = set_diagram_context(scsm, {['n=length(p0);N=2*n;',char(10),'if __counter__==1',char(10),'  done=false;',char(10),'  G=[eye(n,n),eye(n,n),eye(n,n)];G=G(:,1:N);',char(10),'  P=[eye(n,n),eye(n,n),eye(n,n)];P=P(:,1:N);',char(10),'  wi=ones(1,N)*1e32;',char(10),'  TT=[G;P;wi];',char(10),'  p=p0;',char(10),'else',char(9),char(10),'  TT=GetFromBase(''_TT'',[]);',char(10),'  p=GetFromBase(''_p'',[]);',char(10),'  gp=GetFromBase(''_gp'',[]);',char(10),'  if norm(gp)<1e-5',char(10),'    printf(''succesfull convergence, p=%g, g(p)=%g'',p,gp);',char(10),'    done=true;',char(10),'  elseif __counter__>100',char(10),'    error(''Max nb. of iterations reached.'');',char(10),'  else',char(10),'    done=false;',char(10),'    [pn,TT]=nsolve(p,gp,TT);',char(10),char(9),'al=(__counter__<=N)*0.9;',char(10),char(9),'p=al*p+(1-al)*pn;',char(10),'  end',char(10),'end',char(10),'AddToBase(''_p'',p);',char(10),'AddToBase(''_TT'',TT);']});
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[-187.252426,-67.253777]);
blk = set_block_size(blk,[36.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.572549,0.815686,0.313725,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='p';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'Constant');
blk = instantiate_block('system/SignalViewers/Display');
blk = set_block_ident (blk,'g(p)=x-xT');
blk = set_block_origin(blk,[191.461380,3.619789]);
blk = set_block_size(blk,[72.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.fmt='''%6g''';
params.dt='1';
params.showatend='0';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'g(p)=x-xT');
blk = instantiate_block('system/SignalViewers/Display');
blk = set_block_ident (blk,'p=[λ0;µ]');
blk = set_block_origin(blk,[-194.930771,-21.249843]);
blk = set_block_size(blk,[60.000000,36.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.fmt='''%6g''';
params.dt='1';
params.showatend='0';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'p=[λ0;µ]');
blk = instantiate_block('system/SignalExporters/ToBase');
blk = set_block_origin(blk,[146.072952,45.583652]);
blk = set_block_size(blk,[48.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.572549,0.815686,0.313725,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.varname='''_gp''';
params.externalActivation='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'ToBase');
blk = instantiate_block('system/Dynamical/Integral');
blk = set_block_ident (blk,'x');
blk = set_block_origin(blk,[39.959553,-19.524087]);
blk = set_block_size(blk,[24.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.925490,0.874510,0.913725,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.x0='[0;0]';
params.reinit='0';
params.satur='0';
params.limit=struct('max',{{}},'min',{{}},'zcross',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'x');
blk = instantiate_block('system/Dynamical/Integral');
blk = set_block_ident (blk,'λ');
blk = set_block_origin(blk,[-74.577629,-7.524087]);
blk = set_block_size(blk,[36.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.x0='0';
params.reinit='1';
params.satur='0';
params.limit=struct('max',{{}},'min',{{}},'zcross',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'λ');
blk = instantiate_block('system/Routing/Demux');
blk = set_block_origin(blk,[89.009789,-34.879332]);
blk = set_block_size(blk,[6.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,2);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nout='2';
params.outports=struct('size',{{'1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'Demux');
blk = instantiate_block('system/ActivationOperations/InitialEvent');
blk = set_block_origin(blk,[-80.577629,110.177535]);
blk = set_block_size(blk,[48.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.000000,0.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
[scsm, block_tag7] = add_block(scsm, blk, 'InitialEvent');
blk = instantiate_block('system/MathOperations/Bias');
blk = set_block_origin(blk,[91.591156,45.583652]);
blk = set_block_size(blk,[36.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.572549,0.815686,0.313725,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.b='-xT';
params.over='''Nothing''';
params.externalActivation='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'Bias');
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[20.148220,-19.524087]);
blk = set_block_size(blk,[6.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.925490,0.874510,0.913725,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('size',{{'1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'Mux');
blk = instantiate_block('system/Routing/Demux');
blk = set_block_origin(blk,[-110.732422,-70.703781]);
blk = set_block_size(blk,[6.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.572549,0.815686,0.313725,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,2);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nout='2';
params.outports=struct('size',{{'1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'Demux_1');
blk = instantiate_block('system/MathOperations/MathFunc');
blk = set_block_origin(blk,[41.857212,-58.419781]);
blk = set_block_size(blk,[24.000000,24.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.925490,0.874510,0.913725,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.func='''u^2''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag11] = add_block(scsm, blk, 'MathFunc');
blk = instantiate_block('system/MathOperations/RoundProduct');
blk = set_block_origin(blk,[-11.577263,-17.524087]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.925490,0.874510,0.913725,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.overflow='''Nothing''';
blk = set_block_parameters(blk,params);
[scsm, block_tag12] = add_block(scsm, blk, 'RoundProduct');
blk = instantiate_block('system/MathOperations/MathFunc');
blk = set_block_origin(blk,[-165.044079,-101.707142]);
blk = set_block_size(blk,[24.000000,24.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.func='''u^2''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag13] = add_block(scsm, blk, 'MathFunc_1');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[-94.939575,-58.703781]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag14] = add_block(scsm, blk, 'Split');
blk = instantiate_block('system/MathOperations/RoundProduct');
blk = set_block_origin(blk,[-213.096222,18.475913]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.overflow='''Nothing''';
blk = set_block_parameters(blk,params);
[scsm, block_tag15] = add_block(scsm, blk, 'RoundProduct_1');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[111.806099,-46.419781]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag16] = add_block(scsm, blk, 'Block');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[74.684067,4.475913]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag17] = add_block(scsm, blk, 'Block_1');
blk = instantiate_block('system/ActivationOperations/EventGenerate');
blk = set_block_origin(blk,[134.072968,113.720482]);
blk = set_block_size(blk,[72.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.000000,0.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
params=struct();
params.nevout='1';
params.etimes=struct('time',{{'1.0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag18] = add_block(scsm, blk, 'EventGenerate');
blk = instantiate_block('system/MathOperations/Gain');
blk = set_block_origin(blk,[-129.743454,16.475913]);
blk = set_block_size(blk,[24.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='-1';
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag19] = add_block(scsm, blk, 'Gain');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[137.325256,63.583652]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag20] = add_block(scsm, blk, 'Block_2');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[111.614861,-1.879332]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag21] = add_block(scsm, blk, 'Block_4');
blk = instantiate_block('system/MathOperations/RoundProduct');
blk = set_block_origin(blk,[-68.844131,-117.302872]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.752941,0.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.overflow='''Nothing''';
blk = set_block_parameters(blk,params);
[scsm, block_tag22] = add_block(scsm, blk, 'RoundProduct_2');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[-58.918129,-132.062225]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag23] = add_block(scsm, blk, 'Block_6');
blk = instantiate_block('system/Dynamical/Integral');
blk = set_block_origin(blk,[169.547209,-98.202522]);
blk = set_block_size(blk,[24.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.752941,0.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.x0='0';
params.reinit='0';
params.satur='0';
params.limit=struct('max',{{}},'min',{{}},'zcross',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag24] = add_block(scsm, blk, 'J');
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[15.324089,-119.302872]);
blk = set_block_size(blk,[6.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.752941,0.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('size',{{'1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag25] = add_block(scsm, blk, 'Mux_1');
blk = instantiate_block('system/MatrixOperations/MatrixNorm');
blk = set_block_origin(blk,[49.418819,-86.335777]);
blk = set_block_size(blk,[48.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.752941,0.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.normtype='''2-Norm''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag26] = add_block(scsm, blk, 'MatrixNorm');
blk = instantiate_block('system/MathOperations/MathFunc');
blk = set_block_origin(blk,[125.547209,-86.202522]);
blk = set_block_size(blk,[24.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.752941,0.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.func='''u^2''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag27] = add_block(scsm, blk, 'MathFunc_2');
blk = instantiate_block('system/SignalViewers/Display');
blk = set_block_ident (blk,'J ');
blk = set_block_origin(blk,[207.566862,-86.202522]);
blk = set_block_size(blk,[60.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.fmt='''%6g''';
params.dt='1';
params.showatend='0';
params.externalActivation='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag28] = add_block(scsm, blk, 'J ');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[-120.732422,-46.703781]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag29] = add_block(scsm, blk, 'Block_5');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[-22.915298,16.475913]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag30] = add_block(scsm, blk, 'Block_8');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[33.331596,-95.302872]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag31] = add_block(scsm, blk, 'Block_12');
blk = instantiate_block('system/Links/ActivationSplit');
blk = set_block_origin(blk,[170.072959,95.484924]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.717647,0.058824,0.074510,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,3);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag32] = add_block(scsm, blk, 'ActivationSplit');
blk = instantiate_block('system/Links/ActivationSplit');
blk = set_block_origin(blk,[230.576996,95.976761]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.717647,0.058824,0.074510,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,3);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag33] = add_block(scsm, blk, 'Block_9');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[-94.939575,-89.707142]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag34] = add_block(scsm, blk, 'Block_3');
blk = instantiate_super_block();
scsm0 = subsystem_2();
blk = fill_super_block(blk,scsm0);
blk = set_block_origin(blk,[200.576996,45.853230]);
blk = set_block_size(blk,[60.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.000000,0.000000,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,['conditional',char(10),'restart'],'text1');
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag35] = add_block(scsm, blk, 'restart');
blk = instantiate_super_block();
scsm0 = subsystem_3();
blk = fill_super_block(blk,scsm0);
blk = set_block_origin(blk,[127.465454,-28.879332]);
blk = set_block_size(blk,[60.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.000000,0.690196,0.941176,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,['conditional',char(10),'2D scope'],'text1');
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag36] = add_block(scsm, blk, '2D scope');
blk = instantiate_super_block();
scsm0 = subsystem_4();
blk = fill_super_block(blk,scsm0);
blk = set_block_origin(blk,[196.065170,-137.660034]);
blk = set_block_size(blk,[72.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.000000,0.690196,0.941176,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,['conditional',char(10),'scope'],'text1');
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag37] = add_block(scsm, blk, 'Scope');
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag29, '1', 'input'}, [-120.732422,-55.253777], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag17, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag7, '1', 'output'},{block_tag5, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'output'},{block_tag4, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag30, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag11, '1', 'input'},{block_tag16, '1', 'output'}, [], false);
scsm=add_explicit_link(scsm,{block_tag10, '2', 'output'},{block_tag14, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag11, '1', 'output'},{block_tag12, '2', 'input'}, [-1.577263,-46.419781], false);
scsm=add_explicit_link(scsm,{block_tag12, '1', 'output'},{block_tag9, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag10, '1', 'output'},{block_tag5, '2', 'input'}, [-84.226044,-34.703781;-84.226044,4.475913], false);
scsm=add_explicit_link(scsm,{block_tag13, '1', 'input'},{block_tag34, '1', 'output'}, [], false);
scsm=add_explicit_link(scsm,{block_tag14, '1', 'output'},{block_tag12, '1', 'input'}, [-30.361031,-58.703781;-30.361031,-7.524087], false);
scsm=add_explicit_link(scsm,{block_tag13, '1', 'output'},{block_tag15, '2', 'input'}, [-203.267303,-89.707142;-203.267303,-0.160532;-203.096222,-0.160532], false);
scsm=add_explicit_link(scsm,{block_tag15, '1', 'input'},{block_tag23, '1', 'output'}, [-223.096222,-132.062225], false);
scsm=add_explicit_link(scsm,{block_tag16, '1', 'input'},{block_tag21, '1', 'output'}, [111.614861,-46.419781], false);
scsm=add_explicit_link(scsm,{block_tag17, '1', 'output'},{block_tag6, '1', 'input'}, [74.684067,-4.879332], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag20, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag18, '1', 'output'},{block_tag32, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag15, '1', 'output'},{block_tag19, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag19, '1', 'output'},{block_tag5, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'input'},{block_tag20, '2', 'output'}, [137.325256,21.619789], false);
scsm=add_explicit_link(scsm,{block_tag20, '1', 'output'},{block_tag3, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag17, '2', 'output'},{block_tag8, '1', 'input'}, [74.684067,63.583652], false);
scsm=add_explicit_link(scsm,{block_tag36, '1', 'input'},{block_tag21, '2', 'output'}, [], false);
scsm=add_explicit_link(scsm,{block_tag21, '1', 'input'},{block_tag6, '1', 'output'}, [111.614861,10.120668], false);
scsm=add_explicit_link(scsm,{block_tag36, '2', 'input'},{block_tag6, '2', 'output'}, [], false);
scsm=add_explicit_link(scsm,{block_tag22, '2', 'input'},{block_tag23, '2', 'output'}, [-58.844131,-132.062225], false);
scsm=add_explicit_link(scsm,{block_tag23, '1', 'input'},{block_tag16, '2', 'output'}, [111.806099,-132.062225], false);
scsm=add_explicit_link(scsm,{block_tag22, '1', 'output'},{block_tag25, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag25, '1', 'output'},{block_tag31, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag26, '1', 'output'},{block_tag27, '1', 'input'}, [115.547209,-74.335777], false);
scsm=add_explicit_link(scsm,{block_tag27, '1', 'output'},{block_tag24, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag24, '1', 'output'},{block_tag28, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'input'},{block_tag29, '2', 'output'}, [-120.732422,-3.249843], false);
scsm=add_explicit_link(scsm,{block_tag29, '1', 'output'},{block_tag10, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag25, '1', 'input'},{block_tag30, '2', 'output'}, [-22.915298,-83.302872], false);
scsm=add_explicit_link(scsm,{block_tag30, '1', 'output'},{block_tag9, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag37, '1', 'input'},{block_tag31, '2', 'output'}, [33.331596,-119.660034], false);
scsm=add_explicit_link(scsm,{block_tag31, '1', 'output'},{block_tag26, '1', 'input'}, [33.331596,-74.335777], false);
scsm=add_event_link(scsm,{block_tag32, '1', 'output'},{block_tag3, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag32, '2', 'output'},{block_tag8, '1', 'input'}, [109.591156,95.484924], false);
scsm=add_event_link(scsm,{block_tag28, '1', 'input'},{block_tag33, '1', 'output'}, [267.386353,-52.202522;267.386353,95.976761], false);
scsm=add_event_link(scsm,{block_tag35, '1', 'input'},{block_tag33, '2', 'output'}, [], false);
scsm=add_event_link(scsm,{block_tag32, '3', 'output'},{block_tag33, '1', 'input'}, [230.576996,95.484924], false);
scsm=add_explicit_link(scsm,{block_tag22, '1', 'input'},{block_tag34, '2', 'output'}, [-94.939575,-107.302872], false);
scsm=add_explicit_link(scsm,{block_tag34, '1', 'input'},{block_tag14, '2', 'output'}, [], false);
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation');
blk = set_block_origin(blk,[95.635345,30.808565]);
blk = set_block_size(blk,[38.000000,28.000000]);
params=struct();
  params.txt='x1';
blk = set_block_parameters (blk, params);
[scsm, block_tag38] = add_block(scsm, blk, 'Annotation');
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation_1');
blk = set_block_origin(blk,[93.896165,0.562506]);
blk = set_block_size(blk,[38.000000,28.000000]);
params=struct();
  params.txt='x2';
blk = set_block_parameters (blk, params);
[scsm, block_tag39] = add_block(scsm, blk, 'Annotation_1');
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation_3');
blk = set_block_origin(blk,[-106.127899,-35.389397]);
blk = set_block_size(blk,[32.000000,28.000000]);
params=struct();
  params.txt='µ';
blk = set_block_parameters (blk, params);
[scsm, block_tag40] = add_block(scsm, blk, 'Annotation_3');
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation_4');
blk = set_block_origin(blk,[-103.714935,-13.569277]);
blk = set_block_size(blk,[38.000000,28.000000]);
params=struct();
  params.txt='λ0';
blk = set_block_parameters (blk, params);
[scsm, block_tag41] = add_block(scsm, blk, 'Annotation_4');
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation_2');
blk = set_block_origin(blk,[3.270054,40.047732]);
blk = set_block_size(blk,[30.000000,28.000000]);
params=struct();
  params.txt='λ';
blk = set_block_parameters (blk, params);
[scsm, block_tag42] = add_block(scsm, blk, 'Annotation_2');
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation_5');
blk = set_block_origin(blk,[-82.644409,-109.982193]);
blk = set_block_size(blk,[38.000000,28.000000]);
params=struct();
  params.txt='x1';
blk = set_block_parameters (blk, params);
[scsm, block_tag43] = add_block(scsm, blk, 'Annotation_5');
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation_6');
blk = set_block_origin(blk,[-39.441223,-84.703194]);
blk = set_block_size(blk,[68.000000,28.000000]);
params=struct();
  params.txt='u2=µ.x1';
blk = set_block_parameters (blk, params);
[scsm, block_tag44] = add_block(scsm, blk, 'Annotation_6');
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation_2_1');
blk = set_block_origin(blk,[-23.883324,-62.050835]);
blk = set_block_size(blk,[52.000000,28.000000]);
params=struct();
  params.txt='u1=λ';
blk = set_block_parameters (blk, params);
[scsm, block_tag45] = add_block(scsm, blk, 'Annotation_2_1');
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation_3_1');
blk = set_block_origin(blk,[-86.420212,-83.201759]);
blk = set_block_size(blk,[32.000000,28.000000]);
params=struct();
  params.txt='µ';
blk = set_block_parameters (blk, params);
[scsm, block_tag46] = add_block(scsm, blk, 'Annotation_3_1');
out_1 = scsm;
end

solvenonlin4 = subsystem_1();
solvenonlin4 = set_model_workspace (solvenonlin4, {['folder=fileparts(bdeGetCurrentModelFilePath);',char(10),'cd(folder);',char(10),'xT=[0;1/(2*pi)];',char(10),'p0=[1;1];']});
solvenonlin4 = set_initial_time (solvenonlin4, '0');
solvenonlin4 = set_final_time (solvenonlin4, '1');
tol = {'0.000001', '0.000001', '-1', '0' , '0', 'lsodar', '-1'};
solvenonlin4 = set_solver_parameters( solvenonlin4, tol);
solvenonlin4 = evaluate_model (solvenonlin4);
scsm = solvenonlin4;
