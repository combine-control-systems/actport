function [out_1] = subsystem_2 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'solve non linear system');
scsm = set_diagram_context(scsm, {['if count==1',char(10),'  n=prod(sz);N=2*n;',char(10),'  G=[eye(n,n),eye(n,n)];G=G(:,1:N);',char(10),'  P=[eye(n,n),eye(n,n)];P=P(:,1:N);',char(10),'  wi=ones(1,N)*1e32;',char(10),'  TT=[G;P;wi];',char(10),'else',char(10),'  TT=GetFromBase(''_TT'',[]);',char(10),'end']});
blk = instantiate_block('system/CustomBlocks/OmlCustomBlock');
blk = set_block_origin(blk,[13.644745,-88.805729]);
blk = set_block_size(blk,[84.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.000000,0.690196,0.941176,1.000000]);
blk = set_block_nin (blk,3);
blk = set_block_nout (blk,2);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='3';
params.inports=struct('inrow',{{'-1','-1','-3'}},'incol',{{'-2','-2','-4'}},'it',{{'''double''','''double''','''double'''}},'depu',{{'1','1','1'}},'name',{{'''p''','''gp''','''TT'''}});
params.nevin='1';
params.nout='2';
params.outports=struct('outrow',{{'-1','-3'}},'outcol',{{'-2','-4'}},'ot',{{'''double''','''double'''}},'name',{{'''pnew''','''TT'''}});
params.nevout='0';
params.evoutports=struct('fir',{{}});
params.xx='[]';
params.xd='[]';
params.z='[]';
params.noz='0';
params.ozparams=struct('oztyp',{{}},'ozvalue',{{}},'name',{{}});
params.rpar='[]';
params.ipar='[]';
params.nopar='1';
params.oparparams=struct('opartyp',{{'''double'''}},'oparvalue',{{'sz'}},'name',{{'''sz'''}});
params.inlined='1';
params.code='[''function [pnext,TT]=nsolve(p,gp,TT)'',char(10),''  n=length(p);N=size(TT,2);'',char(10),''  G=TT(1:n,:);P=TT(1+n:2*n,:);wi=TT(2*n+1,:);'',char(10),''  wi=wi*(1+1/n);'',char(10),''  [_x,idx]=max(wi);'',char(10),''  G(:,idx)=gp;P(:,idx)=p;wi(idx)=gp''''*gp;'',char(10),''  [Q,R]=qr(G'''');r=rank(R);Gperp=Q*[zeros(N-r,r);eye(r)];'',char(10),''  At=ones(1,N)*Gperp;Bt=P*Gperp;Ct=Gperp;'',char(10),''  A=kron(At'''',eye(n));b=Bt(:);C=kron(Ct'''',eye(n));'',char(10),''  Wi=kron(diag(wi),eye(n));'',char(10),''  m=size(A,1);'',char(10),''  pnext=[eye(n),zeros(n,m)]*...'',char(10),''    inv([A,-C*Wi*C'''';zeros(n,n),A''''])*[b;zeros(n,1)];'',char(10),''  if norm(p-pnext)<eps'',char(10),''    pnext=pnext+2*eps*rand(n,1);'',char(10),''  end'',char(10),''  TT=[G;P;wi];'',char(10),''end'',char(10),char(10),''function OmlBlockFunction(block,flag)'',char(10),''  p=vssGetInputData(block,1);'',char(10),''  gp=vssGetInputData(block,2);'',char(10),''  TT=vssGetInputData(block,3);'',char(10),''  sz=vssGetOparData(block,1);'',char(10),''  if flag==vssBlockOutputUpdateFlag'',char(10),''    [pnext,TT]=nsolve(p(:),gp(:),TT);'',char(10),char(9),''pnext=reshape(pnext,sz(1),sz(2));'',char(10),''    vssSetOutputData(block,1,pnext,1);'',char(10),''    vssSetOutputData(block,2,TT,1);'',char(10),''  end'',char(10),''end'']';
params.fcn=struct('slib',{{''''''}},'epoint',{{''''''}});
params.impl='0';
params.nmode='0';
params.nzcr='0';
params.dept='''Standard mode''';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'OmlCustomBlock');
blk = instantiate_block('system/MatrixOperations/MatrixNorm');
blk = set_block_origin(blk,[-16.759644,-124.183754]);
blk = set_block_size(blk,[48.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.normtype='''2-Norm''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'MatrixNorm');
blk = instantiate_block('system/LogicalOperations/CompareToConstant');
blk = set_block_origin(blk,[42.322781,-124.183754]);
blk = set_block_size(blk,[48.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.op='''<''';
params.C='ftol';
params.zcr='0';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'CompareToConstant');
blk = instantiate_block('system/LogicalOperations/CompareToConstant');
blk = set_block_origin(blk,[-0.063576,-156.556183]);
blk = set_block_size(blk,[84.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.op='''>''';
params.C='maxiter';
params.zcr='0';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'CompareToConstant_1');
blk = instantiate_block('system/LogicalOperations/LogicalOp');
blk = set_block_origin(blk,[104.240334,-139.183754]);
blk = set_block_size(blk,[48.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.rule='''OR''';
params.Datatype='''double''';
params.tp='0';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'LogicalOp');
blk = instantiate_block('system/SignalExporters/ToBase');
blk = set_block_origin(blk,[109.916176,-91.805729]);
blk = set_block_size(blk,[48.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.572549,0.815686,0.313725,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.varname='''_TT''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'ToBase');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[-26.874092,-58.805729]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'Split');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[-53.307076,-156.556183]);
blk = set_block_size(blk,[36.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='count';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'Constant');
blk = instantiate_block('system/Ports/Input');
blk = set_block_ident (blk,'p');
blk = set_block_origin(blk,[-53.307076,-32.307968]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'p');
blk = instantiate_block('system/Ports/Output');
blk = set_block_ident (blk,'pnew');
blk = set_block_origin(blk,[176.464417,-53.805729]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'pnew');
blk = instantiate_block('system/Ports/Input');
blk = set_block_ident (blk,'g(p)');
blk = set_block_origin(blk,[-53.307076,-68.805729]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='2';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'g(p)');
blk = instantiate_block('system/Ports/EventInput');
blk = set_block_origin(blk,[45.644745,-15.620737]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
params=struct();
params.portNumber='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag11] = add_block(scsm, blk, 'EventInput_1_1');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[-22.098022,-90.805729]);
blk = set_block_size(blk,[24.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.572549,0.815686,0.313725,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='TT';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag12] = add_block(scsm, blk, 'Constant_1');
blk = instantiate_block('system/Ports/Output');
blk = set_block_ident (blk,'stop');
blk = set_block_origin(blk,[174.237164,-112.010487]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='2';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag13] = add_block(scsm, blk, 'stop');
blk = instantiate_block('system/Ports/Output');
blk = set_block_ident (blk,'err');
blk = set_block_origin(blk,[174.726959,-154.556183]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='3';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag14] = add_block(scsm, blk, 'err');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[93.936424,-144.556183]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag15] = add_block(scsm, blk, 'Block');
scsm=add_event_link(scsm,{block_tag11, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag9, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag0, '1', 'input'}, [3.644745,-22.307968], false);
scsm=add_explicit_link(scsm,{block_tag0, '2', 'output'},{block_tag5, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'input'},{block_tag1, '1', 'output'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag4, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag15, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag12, '1', 'output'},{block_tag0, '3', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag10, '1', 'output'},{block_tag6, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'input'},{block_tag6, '2', 'output'}, [-26.874092,-112.183754], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag0, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag3, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag13, '1', 'input'}, [162.240334,-102.010487], false);
scsm=add_explicit_link(scsm,{block_tag14, '1', 'input'},{block_tag15, '2', 'output'}, [], false);
scsm=add_explicit_link(scsm,{block_tag15, '1', 'output'},{block_tag4, '2', 'input'}, [93.936424,-130.183754], false);
out_1 = scsm;
end

function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'solvenonlin1');
scsm = set_diagram_context(scsm, {['if __counter__==1',char(10),char(9),'p=-ones(4,1);',char(10),'else',char(10),char(9),'p=GetFromBase(''p'');',char(10),'end']});
blk = instantiate_super_block();
scsm0 = subsystem_2();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'solve non linear system');
blk = set_block_origin(blk,[182.979965,4.475913]);
blk = set_block_size(blk,[108.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.572549,0.815686,0.313725,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'g(p)=0','text1');
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.ftol.rank=0;
params.ftol.value='1e-5';
params.ftol.prompt='Stop if norm of function below this threshold';
params.ftol.evaluate = 1;
params.ftol.enable=1;
params.ftol.visible=1;
params.ftol.parameter_style= { 'entry', {}};
params.ftol.callback= '';
params.ftol.tabname= 'Parameters';
params.ftol.tooltip= '';
params.ftol.buttonimage= '';
params.ftol.buttontext= '';
params.ftol.buttontooltip= '';
params.ftol.type= 'scalar';
params.ftol.dimensions= '[]';
params.ftol.unit= '';
params.maxiter.rank=1;
params.maxiter.value='130';
params.maxiter.prompt='Maximum number of iterations';
params.maxiter.evaluate = 1;
params.maxiter.enable=1;
params.maxiter.visible=1;
params.maxiter.parameter_style= { 'entry', {}};
params.maxiter.callback= '';
params.maxiter.tabname= 'Parameters';
params.maxiter.tooltip= '';
params.maxiter.buttonimage= '';
params.maxiter.buttontext= '';
params.maxiter.buttontooltip= '';
params.maxiter.type= 'scalar';
params.maxiter.dimensions= '[]';
params.maxiter.unit= '';
params.sz.rank=2;
params.sz.value='[4,1]';
params.sz.prompt='size of system';
params.sz.evaluate = 1;
params.sz.enable=1;
params.sz.visible=1;
params.sz.parameter_style= { 'entry', {}};
params.sz.callback= '';
params.sz.tabname= 'Parameters';
params.sz.tooltip= '';
params.sz.buttonimage= '';
params.sz.buttontext= '';
params.sz.buttontooltip= '';
params.sz.type= 'matrix';
params.sz.dimensions= '[1,2]';
params.sz.unit= '';
params.count.rank=3;
params.count.value='__counter__';
params.count.prompt='iteration number (do not edit)';
params.count.evaluate = 1;
params.count.enable=1;
params.count.visible=1;
params.count.parameter_style= { 'entry', {}};
params.count.callback= '';
params.count.tabname= 'Parameters';
params.count.tooltip= '';
params.count.buttonimage= '';
params.count.buttontext= '';
params.count.buttontooltip= '';
params.count.type= 'scalar';
params.count.dimensions= '[]';
params.count.unit= '';
blk = set_block_mask(blk,params,'Nonliear solver');
blk = set_atomic_property(blk,0);
[scsm, block_tag0] = add_block(scsm, blk, 'solve non linear system');
blk = instantiate_block('system/ActivationOperations/IfThenElse');
blk = set_block_origin(blk,[316.875832,-45.524087]);
blk = set_block_size(blk,[48.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.000000,0.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,2);
params=struct();
params.externalActivation='1';
params.nmod='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'IfThenElse_1');
blk = instantiate_block('system/ActivationOperations/End');
blk = set_block_origin(blk,[392.391060,-33.524087]);
blk = set_block_size(blk,[48.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.000000,0.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.job='''Restart''';
params.bmessage='''''';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'End');
blk = instantiate_block('system/ActivationOperations/IfThenElse');
blk = set_block_origin(blk,[380.391060,10.475913]);
blk = set_block_size(blk,[48.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.000000,0.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,2);
params=struct();
params.externalActivation='1';
params.nmod='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'IfThenElse');
blk = instantiate_block('system/ActivationOperations/End');
blk = set_block_origin(blk,[304.875832,-89.524087]);
blk = set_block_size(blk,[48.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.000000,0.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.job='''Error''';
params.bmessage='''Max number of iterations reached''';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'End_1');
blk = instantiate_block('system/ActivationOperations/End');
blk = set_block_origin(blk,[369.625725,-89.524087]);
blk = set_block_size(blk,[48.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.000000,0.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.job='''Stop''';
params.bmessage='''Successful''';
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'End_1_1');
blk = instantiate_block('system/ActivationOperations/EventGenerate');
blk = set_block_origin(blk,[200.979965,98.332611]);
blk = set_block_size(blk,[72.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
params=struct();
params.nevout='1';
params.etimes=struct('time',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'EventGenerate');
blk = instantiate_block('system/MatrixOperations/MatrixExpression');
blk = set_block_origin(blk,[-147.067390,-19.524087]);
blk = set_block_size(blk,[300.000000,72.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.work='getcurrentenv()';
params.exx='[''[-200*u1(1)*(u1(2)-u1(1)*u1(1))-(1.0-u1(1));'',char(10),''200*(u1(2)-u1(1)*u1(1))+20.2*(u1(2)-1.0)+19.8*(u1(4)-1);'',char(10),''-180*u1(3)*(u1(4)-u1(3)*u1(3))-(1.0-u1(3));'',char(10),''180*(u1(4)-u1(3)*u1(3))+20.2*(u1(4)-1.0)+19.8*(u1(2)-1)]'']';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'MatrixExpression');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[-192.856342,54.019136]);
blk = set_block_size(blk,[24.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.572549,0.815686,0.313725,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='p';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'Constant');
blk = instantiate_block('system/SignalViewers/Display');
blk = set_block_origin(blk,[66.052246,-90.175035]);
blk = set_block_size(blk,[72.000000,60.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.fmt='''%6g''';
params.dt='1';
params.showatend='0';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'Display_1');
blk = instantiate_block('system/SignalViewers/Display');
blk = set_block_origin(blk,[69.836716,77.393333]);
blk = set_block_size(blk,[72.000000,60.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.fmt='''%6g''';
params.dt='1';
params.showatend='0';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'Display');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[-158.856342,66.019136]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag11] = add_block(scsm, blk, 'Split');
blk = instantiate_block('system/SignalExporters/ToBase');
blk = set_block_origin(blk,[317.056328,35.005920]);
blk = set_block_size(blk,[48.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.572549,0.815686,0.313725,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.varname='''p''';
params.externalActivation='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag12] = add_block(scsm, blk, 'ToBase');
blk = instantiate_block('system/Links/ActivationSplit');
blk = set_block_origin(blk,[236.979965,88.332611]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.717647,0.058824,0.074510,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,3);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag13] = add_block(scsm, blk, 'ActivationSplit');
blk = instantiate_block('system/Links/ActivationSplit');
blk = set_block_origin(blk,[341.056328,88.931587]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.717647,0.058824,0.074510,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,3);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag14] = add_block(scsm, blk, 'Block');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[166.829498,16.475913]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag15] = add_block(scsm, blk, 'Block_2');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[161.876038,66.019136]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag16] = add_block(scsm, blk, 'Block_1');
scsm=add_event_link(scsm,{block_tag4, '1', 'input'},{block_tag1, '1', 'output'}, [], false);
scsm=add_event_link(scsm,{block_tag1, '2', 'output'},{block_tag5, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag3, '1', 'output'},{block_tag1, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag3, '2', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag0, '2', 'output'},{block_tag3, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag0, '3', 'output'},{block_tag1, '1', 'input'}, [300.979965,-27.524087], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag11, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag15, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag0, '1', 'input'},{block_tag16, '1', 'output'}, [161.876038,40.475913], false);
scsm=add_explicit_link(scsm,{block_tag11, '1', 'output'},{block_tag7, '1', 'input'}, [-158.856342,16.475913], false);
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag12, '1', 'input'}, [307.056328,44.475913], false);
scsm=add_event_link(scsm,{block_tag6, '1', 'output'},{block_tag13, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag12, '1', 'input'},{block_tag14, '1', 'output'}, [], false);
scsm=add_event_link(scsm,{block_tag13, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag3, '1', 'input'},{block_tag14, '2', 'output'}, [404.391060,88.931587], false);
scsm=add_event_link(scsm,{block_tag14, '1', 'input'},{block_tag13, '2', 'output'}, [236.979965,88.931587], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'input'},{block_tag15, '2', 'output'}, [166.829498,-60.175035], false);
scsm=add_explicit_link(scsm,{block_tag15, '1', 'output'},{block_tag0, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag10, '1', 'input'},{block_tag16, '2', 'output'}, [161.876038,107.393333], false);
scsm=add_explicit_link(scsm,{block_tag16, '1', 'input'},{block_tag11, '2', 'output'}, [], false);
out_1 = scsm;
end

solvenonlin1 = subsystem_1();
solvenonlin1 = set_model_workspace (solvenonlin1, {[char(10),'T=5;',char(10),char(10)]});
solvenonlin1 = set_initial_time (solvenonlin1, '0');
solvenonlin1 = set_final_time (solvenonlin1, 'T');
tol = {'0.000001', '0.000001', '-1', '0' , '0', 'lsodar', '-1'};
solvenonlin1 = set_solver_parameters( solvenonlin1, tol);
solvenonlin1 = evaluate_model (solvenonlin1);
scsm = solvenonlin1;
