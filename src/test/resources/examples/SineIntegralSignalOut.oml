function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'SineIntegralSignalOut');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/SignalGenerators/SineWaveGenerator');
blk = set_block_origin(blk,[187.401855,-11.964790]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.854902,0.898039,0.945098,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.M='1';
params.F='1';
params.P='pi/2';
params.offs='0';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'SineWaveGenerator');
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[439.901825,-6.964790]);
blk = set_block_size(blk,[7.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('size',{{'1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Mux');
blk = instantiate_block('system/Dynamical/Integral');
blk = set_block_origin(blk,[309.401825,-21.964790]);
blk = set_block_size(blk,[40.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.x0='0';
params.reinit='0';
params.satur='0';
params.limit=struct('max',{{}},'min',{{}},'zcross',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Integral');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[272.401840,8.035210]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Split');
blk = instantiate_block('system/SignalExporters/SignalOut');
blk = set_block_origin(blk,[502.401855,3.035210]);
blk = set_block_size(blk,[100.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.913725,0.941176,0.858824,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.varname='''data''';
params.externalActivation='0';
params.buffsize='128';
params.R_MP='1';
params.R_DE='1';
params.R_MPLL='0';
params.R_ZCLL='0';
params.R_TRY='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'SignalOut');
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag3, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag1, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag4, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '2', 'output'},{block_tag1, '1', 'input'}, [272.401840,78.535210;394.901855,78.535210;394.901855,38.035210], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
out_1 = scsm;
end

SineIntegralSignalOut = subsystem_1();
SineIntegralSignalOut = set_model_workspace (SineIntegralSignalOut, {''});
SineIntegralSignalOut = set_initial_time (SineIntegralSignalOut, '0');
SineIntegralSignalOut = set_final_time (SineIntegralSignalOut, '4*pi');
tol = {'0.000001', '0.000001', '-1', '0' , '0', 'lsodar', '-1'};
SineIntegralSignalOut = set_solver_parameters( SineIntegralSignalOut, tol);
SineIntegralSignalOut = evaluate_model (SineIntegralSignalOut);
scsm = SineIntegralSignalOut;
