function [out_1] = subsystem_2 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'plane');
scsm = set_diagram_context(scsm, {['x0=0;',char(10),'y0=0;',char(10),'th0=pi/4;',char(10)]});
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[258.370575,-274.888245]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'Input');
blk = instantiate_block('system/Dynamical/Integral');
blk = set_block_origin(blk,[423.000000,-136.000000]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.x0='x0';
params.reinit='0';
params.satur='0';
params.limit=struct('max',{{}},'min',{{}},'zcross',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Integral');
blk = instantiate_block('system/Dynamical/Integral');
blk = set_block_origin(blk,[423.000000,-208.000000]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.x0='y0';
params.reinit='0';
params.satur='0';
params.limit=struct('max',{{}},'min',{{}},'zcross',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Integral_1');
blk = instantiate_block('system/Dynamical/Integral');
blk = set_block_origin(blk,[423.000000,-284.888245]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.x0='th0';
params.reinit='0';
params.satur='0';
params.limit=struct('max',{{}},'min',{{}},'zcross',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Integral_1_1');
blk = instantiate_block('system/Ports/Output');
blk = set_block_origin(blk,[605.000000,-198.000000]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Output');
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[544.500000,-218.000000]);
blk = set_block_size(blk,[7.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,3);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='3';
params.inports=struct('size',{{'1','1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Mux');
blk = instantiate_block('system/MathOperations/TrigFunc');
blk = set_block_origin(blk,[273.000000,-136.000000]);
blk = set_block_size(blk,[60.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.func='''cos''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'TrigFunc');
blk = instantiate_block('system/MathOperations/TrigFunc');
blk = set_block_origin(blk,[273.000000,-208.000000]);
blk = set_block_size(blk,[60.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.func='''sin''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'TrigFunc_1');
blk = instantiate_block('system/MathOperations/Gain');
blk = set_block_origin(blk,[360.210052,-136.000000]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='v';
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'Gain');
blk = instantiate_block('system/MathOperations/Gain');
blk = set_block_origin(blk,[360.210052,-208.000000]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='v';
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'Gain_1');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[502.250000,-264.888245]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'Split');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[252.000000,-188.000000]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag11] = add_block(scsm, blk, 'Block');
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag3, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag4, '1', 'input'}, [578.250000,-188.000000], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag5, '1', 'input'}, [503.750000,-116.000000;503.750000,-168.000000], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag5, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag10, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag1, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag8, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag9, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag10, '2', 'output'},{block_tag11, '1', 'input'}, [502.250000,-303.903000;252.000000,-303.903000], false);
scsm=add_explicit_link(scsm,{block_tag10, '1', 'output'},{block_tag5, '3', 'input'}, [502.250000,-208.000000], false);
scsm=add_explicit_link(scsm,{block_tag11, '2', 'output'},{block_tag7, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag11, '1', 'output'},{block_tag6, '1', 'input'}, [252.000000,-116.000000], false);
out_1 = scsm;
end

function [out_1] = subsystem_3 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'missile');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/Dynamical/Integral');
blk = set_block_origin(blk,[423.000000,-130.364937]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.x0='x0';
params.reinit='0';
params.satur='0';
params.limit=struct('max',{{}},'min',{{}},'zcross',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'Integral');
blk = instantiate_block('system/Dynamical/Integral');
blk = set_block_origin(blk,[423.000000,-210.254028]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.x0='y0';
params.reinit='0';
params.satur='0';
params.limit=struct('max',{{}},'min',{{}},'zcross',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Integral_1');
blk = instantiate_block('system/Dynamical/Integral');
blk = set_block_origin(blk,[423.000000,-274.802338]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.x0='th0';
params.reinit='0';
params.satur='0';
params.limit=struct('max',{{}},'min',{{}},'zcross',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Integral_1_1');
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[544.500000,-210.000000]);
blk = set_block_size(blk,[7.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,3);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='3';
params.inports=struct('size',{{'1','1','1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Mux');
blk = instantiate_block('system/MathOperations/TrigFunc');
blk = set_block_origin(blk,[264.921722,-130.364937]);
blk = set_block_size(blk,[60.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.func='''cos''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'TrigFunc');
blk = instantiate_block('system/MathOperations/TrigFunc');
blk = set_block_origin(blk,[264.921722,-210.254028]);
blk = set_block_size(blk,[60.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.func='''sin''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'TrigFunc_1');
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[524.080826,-291.717819]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'Input');
blk = instantiate_block('system/Ports/Output');
blk = set_block_origin(blk,[573.443726,-190.000000]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'Output');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[502.250000,-254.802338]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'Split');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[503.750000,-110.364937]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'Block_1');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[513.549744,-190.254028]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'Block_2');
blk = instantiate_block('system/MathOperations/Product');
blk = set_block_origin(blk,[339.893707,-284.802338]);
blk = set_block_size(blk,[40.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''*''','''/'''}});
params.overflow='''Nothing''';
params.rmethod='''Floor''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag11] = add_block(scsm, blk, 'Product');
blk = instantiate_block('system/MathOperations/Gain');
blk = set_block_origin(blk,[353.417877,-130.364937]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='w';
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag12] = add_block(scsm, blk, 'Gain_3');
blk = instantiate_block('system/MathOperations/Gain');
blk = set_block_origin(blk,[353.417877,-210.254028]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='w';
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag13] = add_block(scsm, blk, 'Gain_3_1');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[502.250000,-335.000000]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag14] = add_block(scsm, blk, 'Block');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[235.059128,-190.254028]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag15] = add_block(scsm, blk, 'Block_6');
blk = instantiate_block('system/MathOperations/Gain');
blk = set_block_origin(blk,[420.172343,-377.381405]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='k';
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag16] = add_block(scsm, blk, 'Gain_3_2');
blk = instantiate_block('system/CustomBlocks/IncludeDiagram');
blk = set_block_origin(blk,[649.070831,-280.491211]);
blk = set_block_size(blk,[60.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,4);
blk = set_block_nout (blk,2);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='4';
params.nevin='0';
params.nout='2';
params.nevout='0';
params.ndiagrams='1';
params.choice='1';
params.work='getcurrentenv()';
params.includes=struct('path',{{'feedback_diag'}},'dpath',{{''''''}},'context',{{''''''}});
blk = set_block_parameters(blk,params);
[scsm, block_tag17] = add_block(scsm, blk, 'IncludeDiagram');
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag9, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag8, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag3, '3', 'input'}, [502.250000,-200.000000], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag17, '3', 'input'}, [571.049000,-281.718000;571.049000,-265.491000], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'output'},{block_tag3, '1', 'input'}, [503.750000,-160.000000], false);
scsm=add_explicit_link(scsm,{block_tag10, '2', 'output'},{block_tag17, '2', 'input'}, [513.549744,-255.490999], false);
scsm=add_explicit_link(scsm,{block_tag10, '1', 'output'},{block_tag3, '2', 'input'}, [513.549744,-180.000000], false);
scsm=add_explicit_link(scsm,{block_tag17, '1', 'output'},{block_tag11, '2', 'input'}, [732.682129,-250.490880;732.682129,-388.102203;319.272644,-388.102203;319.272644,-269.802144], false);
scsm=add_explicit_link(scsm,{block_tag11, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag10, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag9, '2', 'output'},{block_tag17, '1', 'input'}, [636.321000,-110.365000;636.321000,-245.491000], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag7, '1', 'input'}, [561.500000,-180.000000], false);
scsm=add_explicit_link(scsm,{block_tag8, '2', 'output'},{block_tag14, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag12, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag12, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag13, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag13, '1', 'output'},{block_tag1, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag14, '2', 'output'},{block_tag15, '1', 'input'}, [235.059000,-335.000000], false);
scsm=add_explicit_link(scsm,{block_tag14, '1', 'output'},{block_tag17, '4', 'input'}, [592.719000,-335.000000;592.719000,-275.491000], false);
scsm=add_explicit_link(scsm,{block_tag15, '2', 'output'},{block_tag5, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag15, '1', 'output'},{block_tag4, '1', 'input'}, [235.059000,-110.364973], false);
scsm=add_explicit_link(scsm,{block_tag17, '2', 'output'},{block_tag16, '1', 'input'}, [719.070973,-357.380932], false);
scsm=add_explicit_link(scsm,{block_tag16, '1', 'output'},{block_tag11, '1', 'input'}, [299.954000,-357.380932;299.954000,-239.802000], false);
out_1 = scsm;
end

function [out_1] = subsystem_4 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'Display');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[116.000023,88.000015]);
blk = set_block_size(blk,[7.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,4);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='4';
params.inports=struct('size',{{'3','3','3','3'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'Mux');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[169.750011,118.000015]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Block_3');
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[16.000027,130.500015]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'regular_in_port');
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[16.000027,103.883438]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='2';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'regular_in_port_1');
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[16.000027,77.908027]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='3';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'regular_in_port_1_1');
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[16.000027,53.750911]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='4';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'regular_in_port_1_1_1');
blk = instantiate_block('system/MatrixOperations/MatrixExtractor');
blk = set_block_origin(blk,[212.500000,76.000008]);
blk = set_block_size(blk,[80.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.extractx=struct('x_selectall','0','x_vectorindex','1','x_startingindex','0','x_startingindexdecreasing','0','x_vectorindexport','0','x_startingindexport','0','x_startingindexportdecreasing','0');;
params.x_vector_index=struct('x_vi',{{'[2,5,8,11]'}});
params.x_starting_index=struct('x_si',{{}},'x_osz',{{}});
params.x_starting_indexdecreasing=struct('x_si',{{}},'x_osz',{{}});
params.x_starting_index_port=struct('x_osz',{{}});
params.x_starting_index_portdecreasing=struct('x_osz',{{}});
params.extracty=struct('y_selectall','1','y_vectorindex','0','y_startingindex','0','y_startingindexdecreasing','0','y_vectorindexport','0','y_startingindexport','0','y_startingindexportdecreasing','0');;
params.y_vector_index=struct('y_vi',{{}});
params.y_starting_index=struct('y_si',{{}},'y_osz',{{}});
params.y_starting_indexdecreasing=struct('y_si',{{}},'y_osz',{{}});
params.y_starting_index_port=struct('y_osz',{{}});
params.y_starting_index_portdecreasing=struct('y_osz',{{}});
params.onebased='1';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'MatrixExtractor_2_1_1_1');
blk = instantiate_block('system/MatrixOperations/MatrixExtractor');
blk = set_block_origin(blk,[212.500000,126.000015]);
blk = set_block_size(blk,[80.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.extractx=struct('x_selectall','0','x_vectorindex','1','x_startingindex','0','x_startingindexdecreasing','0','x_vectorindexport','0','x_startingindexport','0','x_startingindexportdecreasing','0');;
params.x_vector_index=struct('x_vi',{{'[1,4,7,10]'}});
params.x_starting_index=struct('x_si',{{}},'x_osz',{{}});
params.x_starting_indexdecreasing=struct('x_si',{{}},'x_osz',{{}});
params.x_starting_index_port=struct('x_osz',{{}});
params.x_starting_index_portdecreasing=struct('x_osz',{{}});
params.extracty=struct('y_selectall','1','y_vectorindex','0','y_startingindex','0','y_startingindexdecreasing','0','y_vectorindexport','0','y_startingindexport','0','y_startingindexportdecreasing','0');;
params.y_vector_index=struct('y_vi',{{}});
params.y_starting_index=struct('y_si',{{}},'y_osz',{{}});
params.y_starting_indexdecreasing=struct('y_si',{{}},'y_osz',{{}});
params.y_starting_index_port=struct('y_osz',{{}});
params.y_starting_index_portdecreasing=struct('y_osz',{{}});
params.onebased='1';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'MatrixExtractor_2_1_2');
blk = instantiate_block('system/SignalViewers/ScopeXY');
blk = set_block_origin(blk,[364.500031,100.000015]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.externalActivation='0';
params.winSize='[700,700]';
params.winPos='[200,200]';
params.winNam='''''';
params.winHidden='0';
params.showAtEnd='0';
params.option='''Reuse''';
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''No Grid''';
params.xScale='''linear''';
params.xInterval='[-2,1.5]';
params.yScale='''linear''';
params.yInterval='[-1,3]';
params.curvesStyle='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'ScopeXY');
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag7, '1', 'input'}, [169.750000,146.000000], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag8, '1', 'input'}, [326.500000,146.000000;326.500000,130.000000], false);
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag1, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '2', 'output'},{block_tag6, '1', 'input'}, [169.750000,96.000000], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag8, '2', 'input'}, [327.500000,96.000000;327.500000,110.000000], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag0, '2', 'input'}, [76.000000,113.883423;76.000000,125.500000], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag0, '3', 'input'}, [89.408722,87.908016;89.408722,110.500005], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag0, '4', 'input'}, [103.547000,63.750937;103.547000,95.500000], false);
out_1 = scsm;
end

function [out_1] = subsystem_5 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'Collision detection');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/MatrixOperations/MatrixMultiplication');
blk = set_block_origin(blk,[300.500000,-71.000000]);
blk = set_block_size(blk,[70.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,3);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='3';
params.in_ports=struct('sgn',{{'''H''','''*''','''*'''}});
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'MatrixMultiplication');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[127.402115,-81.000000]);
blk = set_block_size(blk,[40.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''-'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Sum');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[408.279175,-96.000000]);
blk = set_block_size(blk,[40.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''-'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Sum_1');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[320.500000,-126.896576]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='d2';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Constant_2');
blk = instantiate_block('system/ActivationOperations/ZeroCross');
blk = set_block_origin(blk,[475.841400,-85.999995]);
blk = set_block_size(blk,[50.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
params=struct();
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'ZeroCross');
blk = instantiate_block('system/ActivationOperations/End');
blk = set_block_origin(blk,[480.841400,-164.005539]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.job='''Stop''';
params.bmessage='''Request a stop.''';
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'End');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[179.500000,-13.000000]);
blk = set_block_size(blk,[72.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='diag([1,1,0])';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'Constant_1');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[237.500000,-51.000000]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'Block');
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[46.500000,-46.000000]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'regular_in_port');
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[46.500000,-76.000000]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='2';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'regular_in_port_1');
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag0, '1', 'input'}, [237.500000,-37.666667], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag0, '2', 'input'}, [274.000000,5.000000;274.000000,-51.000000], false);
scsm=add_explicit_link(scsm,{block_tag7, '2', 'output'},{block_tag0, '3', 'input'}, [237.500000,-64.333333], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag7, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag2, '2', 'input'}, [382.000000,-106.896576;382.000000,-81.000000], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag4, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag4, '1', 'output'},{block_tag5, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag1, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'output'},{block_tag1, '2', 'input'}, [], false);
out_1 = scsm;
end

function [out_1] = subsystem_6 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'Description');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation_1');
blk = set_block_origin(blk,[183.024460,-3.550370]);
blk = set_block_size(blk,[528.000000,234.000000]);
params=struct();
  params.txt=['Plane trying to escape multiple missiles. ',char(10),char(10),'Missiles measure the position of the plane every 0.2 seconds and ',char(10),'uses a strategy to intercept the plane. ',char(10),char(10),'The missile strategy is modeled in a separate model, XFeedback.scm, which must be ',char(10),'placed next to this model in the folder. The missible strategy in XFeedback.scm is used ',char(10),'in this model using an IncludeDiagram block within the masked missile superblock. ',char(10),char(10),'Collision between missile and plane is detected inside the Collision detection superblock. ',char(10),'3 missiles and detectors are used. ',char(10),char(10),'The second and third ones refer to the first ones using self-referring IncludeDiagram blocks.',char(10),char(10)];
blk = set_block_parameters (blk, params);
[scsm, block_tag0] = add_block(scsm, blk, 'Annotation_1');
out_1 = scsm;
end

function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'Plane_missiles');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_super_block();
scsm0 = subsystem_2();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'plane');
blk = set_block_origin(blk,[-1.778572,-23.093722]);
blk = set_block_size(blk,[48.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.925490,0.874510,0.913725,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag0] = add_block(scsm, blk, 'plane');
blk = instantiate_super_block();
scsm0 = subsystem_3();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'missile');
blk = set_block_origin(blk,[-8.698714,-114.504456]);
blk = set_block_size(blk,[48.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.752941,0.000000,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.th0.rank=0;
params.th0.value='-pi/7';
params.th0.prompt='th0';
params.th0.evaluate = 1;
params.th0.enable=1;
params.th0.visible=1;
params.th0.parameter_style= { 'entry', {}};
params.th0.callback= '';
params.th0.tabname= 'Parameters';
params.th0.tooltip= '';
params.th0.buttonimage= '';
params.th0.buttontext= '';
params.th0.buttontooltip= '';
params.th0.type= 'generic';
params.th0.dimensions= '[]';
params.th0.unit= '';
params.x0.rank=1;
params.x0.value='-2';
params.x0.prompt='x0';
params.x0.evaluate = 1;
params.x0.enable=1;
params.x0.visible=1;
params.x0.parameter_style= { 'entry', {}};
params.x0.callback= '';
params.x0.tabname= 'Parameters';
params.x0.tooltip= '';
params.x0.buttonimage= '';
params.x0.buttontext= '';
params.x0.buttontooltip= '';
params.x0.type= 'generic';
params.x0.dimensions= '[]';
params.x0.unit= '';
params.y0.rank=2;
params.y0.value='1';
params.y0.prompt='y0';
params.y0.evaluate = 1;
params.y0.enable=1;
params.y0.visible=1;
params.y0.parameter_style= { 'entry', {}};
params.y0.callback= '';
params.y0.tabname= 'Parameters';
params.y0.tooltip= '';
params.y0.buttonimage= '';
params.y0.buttontext= '';
params.y0.buttontooltip= '';
params.y0.type= 'generic';
params.y0.dimensions= '[]';
params.y0.unit= '';
params.w.rank=3;
params.w.value='1.6';
params.w.prompt='w';
params.w.evaluate = 1;
params.w.enable=1;
params.w.visible=1;
params.w.parameter_style= { 'entry', {}};
params.w.callback= '';
params.w.tabname= 'Parameters';
params.w.tooltip= '';
params.w.buttonimage= '';
params.w.buttontext= '';
params.w.buttontooltip= '';
params.w.type= 'generic';
params.w.dimensions= '[]';
params.w.unit= '';
params.k.rank=4;
params.k.value='1';
params.k.prompt='k';
params.k.evaluate = 1;
params.k.enable=1;
params.k.visible=1;
params.k.parameter_style= { 'entry', {}};
params.k.callback= '';
params.k.tabname= 'Parameters';
params.k.tooltip= '';
params.k.buttonimage= '';
params.k.buttontext= '';
params.k.buttontooltip= '';
params.k.type= 'generic';
params.k.dimensions= '[]';
params.k.unit= '';
params.feedback_diag.rank=5;
params.feedback_diag.value='''XFeedback.scm''';
params.feedback_diag.prompt='feedback_diag';
params.feedback_diag.evaluate = 1;
params.feedback_diag.enable=1;
params.feedback_diag.visible=1;
params.feedback_diag.parameter_style= { 'entry', {}};
params.feedback_diag.callback= '';
params.feedback_diag.tabname= 'Parameters';
params.feedback_diag.tooltip= '';
params.feedback_diag.buttonimage= '';
params.feedback_diag.buttontext= '';
params.feedback_diag.buttontooltip= '';
params.feedback_diag.type= 'generic';
params.feedback_diag.dimensions= '[]';
params.feedback_diag.unit= '';
params.v.rank=6;
params.v.value='v';
params.v.prompt='v';
params.v.evaluate = 1;
params.v.enable=1;
params.v.visible=1;
params.v.parameter_style= { 'entry', {}};
params.v.callback= '';
params.v.tabname= 'Parameters';
params.v.tooltip= '';
params.v.buttonimage= '';
params.v.buttontext= '';
params.v.buttontooltip= '';
params.v.type= 'scalar';
params.v.dimensions= '[]';
params.v.unit= '';
blk = set_block_mask(blk,params,'missile model parameters');
blk = set_atomic_property(blk,0);
[scsm, block_tag1] = add_block(scsm, blk, 'missile');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[63.221428,-5.093722]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Block_1');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[76.865738,-96.504456]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Block_2');
blk = instantiate_super_block();
scsm0 = subsystem_4();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'Display');
blk = set_block_origin(blk,[173.246548,-36.611736]);
blk = set_block_size(blk,[48.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.854902,0.898039,0.945098,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,4);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag4] = add_block(scsm, blk, 'Display');
blk = instantiate_super_block();
scsm0 = subsystem_5();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'Collision detection');
blk = set_block_origin(blk,[173.246548,-105.504425]);
blk = set_block_size(blk,[48.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag5] = add_block(scsm, blk, 'Collision detection');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[112.297360,-78.502080]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'Block_3');
blk = instantiate_block('system/SignalGenerators/SquareWaveGenerator');
blk = set_block_origin(blk,[-57.778572,-23.093722]);
blk = set_block_size(blk,[36.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.913725,0.941176,0.858824,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.FV='5';
params.SV='-3';
params.period='2';
params.dutyCycle='20';
params.offset='0';
params.datatype='''double''';
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'SquareWaveGenerator');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[112.297455,-139.587099]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'Block_6');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[133.590841,-217.776684]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'Block_7');
blk = instantiate_block('system/Hybrid/SampleHold');
blk = set_block_origin(blk,[-90.851070,-108.504456]);
blk = set_block_size(blk,[36.000000,24.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.572549,0.815686,0.313725,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.typ='''double''';
params.externalActivation='1';
params.alwaysActive='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'SampleHold');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[63.221423,-66.757986]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag11] = add_block(scsm, blk, 'Split');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[-44.851070,-96.504456]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag12] = add_block(scsm, blk, 'Block');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[-45.053615,-157.553620]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag13] = add_block(scsm, blk, 'Block_5');
blk = instantiate_block('system/ActivationOperations/SampleClock');
blk = set_block_origin(blk,[-102.851055,-56.984174]);
blk = set_block_size(blk,[60.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,0.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
params=struct();
params.frequ='0.2';
params.offset='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag14] = add_block(scsm, blk, 'SampleClock');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[88.672867,-157.553618]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag15] = add_block(scsm, blk, 'Block_4');
blk = instantiate_block('system/CustomBlocks/IncludeDiagram');
blk = set_block_ident (blk,'Collision detection 2');
blk = set_block_origin(blk,[173.246548,-166.556221]);
blk = set_block_size(blk,[48.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.nevin='0';
params.nout='0';
params.nevout='0';
params.ndiagrams='1';
params.choice='1';
params.work='getcurrentenv()';
params.includes=struct('path',{{'Mpath'}},'dpath',{{'''Collision detection'''}},'context',{{''''''}});
blk = set_block_parameters(blk,params);
[scsm, block_tag16] = add_block(scsm, blk, 'Collision detection 2');
blk = instantiate_block('system/CustomBlocks/IncludeDiagram');
blk = set_block_ident (blk,'Collision detection 3');
blk = set_block_origin(blk,[173.246548,-226.779034]);
blk = set_block_size(blk,[48.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,0.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.nevin='0';
params.nout='0';
params.nevout='0';
params.ndiagrams='1';
params.choice='1';
params.work='getcurrentenv()';
params.includes=struct('path',{{'Mpath'}},'dpath',{{'''Collision detection'''}},'context',{{''''''}});
blk = set_block_parameters(blk,params);
[scsm, block_tag17] = add_block(scsm, blk, 'Collision detection 3');
blk = instantiate_block('system/CustomBlocks/IncludeDiagram');
blk = set_block_ident (blk,'missile2');
blk = set_block_origin(blk,[-8.901259,-175.553620]);
blk = set_block_size(blk,[48.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.752941,0.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.nevin='0';
params.nout='1';
params.nevout='0';
params.ndiagrams='1';
params.choice='1';
params.work='getcurrentenv()';
params.includes=struct('path',{{'Mpath'}},'dpath',{{'''missile'''}},'context',{{'[''k=1;'',char(10),''w=1.6;'',char(10),''x0=-2;'',char(10),''y0=1/2;'',char(10),''th0=pi/7;'']'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag18] = add_block(scsm, blk, 'missile2');
blk = instantiate_block('system/CustomBlocks/IncludeDiagram');
blk = set_block_ident (blk,'missile3');
blk = set_block_origin(blk,[-8.699062,-235.776691]);
blk = set_block_size(blk,[48.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,0.752941,0.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.nevin='0';
params.nout='1';
params.nevout='0';
params.ndiagrams='1';
params.choice='1';
params.work='getcurrentenv()';
params.includes=struct('path',{{'Mpath'}},'dpath',{{'''missile'''}},'context',{{'[''k=1;'',char(10),''w=1.6;'',char(10),''x0=-2;'',char(10),''y0=3;'',char(10),''th0=-pi/3;'']'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag19] = add_block(scsm, blk, 'missile3');
blk = instantiate_super_block();
scsm0 = subsystem_6();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'Description');
blk = set_block_origin(blk,[201.004410,44.618194]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag20] = add_block(scsm, blk, 'Description');
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag3, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '2', 'output'},{block_tag4, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag5, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '2', 'output'},{block_tag4, '2', 'input'}, [76.865740,-14.111772], false);
scsm=add_explicit_link(scsm,{block_tag6, '2', 'output'},{block_tag8, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag5, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag18, '1', 'output'},{block_tag15, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag19, '1', 'output'},{block_tag9, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag8, '2', 'output'},{block_tag17, '1', 'input'}, [112.297455,-199.779367], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag16, '1', 'input'}, [163.246546,-139.590051], false);
scsm=add_explicit_link(scsm,{block_tag9, '2', 'output'},{block_tag4, '4', 'input'}, [133.590841,-32.111804], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'output'},{block_tag17, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag11, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag11, '2', 'output'},{block_tag10, '1', 'input'}, [-128.959991,-66.757943;-128.959991,-96.504456], false);
scsm=add_explicit_link(scsm,{block_tag11, '1', 'output'},{block_tag6, '1', 'input'}, [63.221423,-78.502102], false);
scsm=add_explicit_link(scsm,{block_tag10, '1', 'output'},{block_tag12, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag12, '2', 'output'},{block_tag13, '1', 'input'}, [-45.053615,-96.504456], false);
scsm=add_explicit_link(scsm,{block_tag12, '1', 'output'},{block_tag1, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag13, '2', 'output'},{block_tag19, '1', 'input'}, [-45.053636,-217.776961], false);
scsm=add_explicit_link(scsm,{block_tag13, '1', 'output'},{block_tag18, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag14, '1', 'output'},{block_tag10, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag15, '1', 'output'},{block_tag16, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag15, '2', 'output'},{block_tag4, '3', 'input'}, [88.672504,-23.111782], false);
blk = instantiate_block('TEXT_f');
blk = set_block_ident(blk, 'Annotation');
blk = set_block_origin(blk,[-92.800814,80.470078]);
blk = set_block_size(blk,[290.000000,34.000000]);
params=struct();
  params.txt=['This model requires XFeedback.scm to be present to run.',char(10),'XFeedback.scm provides the diagram used inside the missiles.'];
blk = set_block_parameters (blk, params);
[scsm, block_tag21] = add_block(scsm, blk, 'Annotation');
out_1 = scsm;
end

Plane_missiles = subsystem_1();
Plane_missiles = set_model_workspace (Plane_missiles, {[char(10),'feedback_diag=''XFeedback.scm'';',char(10),'Mpath= bdeGetModelFilePath(bdeGetCurrentModel);',char(10),'v=1.3;',char(10),'d2=.0002;',char(10)]});
Plane_missiles = set_initial_time (Plane_missiles, '0');
Plane_missiles = set_final_time (Plane_missiles, '100');
tol = {'0.00000001', '0.00000001', '-1', '0' , '1', 'lsodar', '-1'};
Plane_missiles = set_solver_parameters( Plane_missiles, tol);
Plane_missiles = evaluate_model (Plane_missiles);
scsm = Plane_missiles;
