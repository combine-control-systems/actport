function [out_1] = subsystem_2 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'controller');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/MatrixOperations/MatrixGain');
blk = set_block_origin(blk,[309.918701,-275.734650]);
blk = set_block_size(blk,[72.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='C';
params.overflow='''Nothing''';
params.mulmethod='''Gain*u1''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'MatrixGain');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[292.415619,-255.734650]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Split');
blk = instantiate_block('system/Dynamical/ContStateSpace');
blk = set_block_origin(blk,[183.163330,-275.734650]);
blk = set_block_size(blk,[90.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.A='A';
params.B='B';
params.C='eye(size(A))';
params.D='zeros(size(B))';
params.x0='x0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'ContStateSpace_1_1');
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[122.938644,-265.734650]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'regular_in_port');
blk = instantiate_block('system/Ports/Output');
blk = set_block_origin(blk,[431.918701,-265.734650]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'regular_out_port');
blk = instantiate_block('system/Ports/Output');
blk = set_block_origin(blk,[317.304016,-332.797546]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='2';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'regular_out_port_1');
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag4, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag1, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '2', 'output'},{block_tag5, '1', 'input'}, [292.416226,-322.798694], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
out_1 = scsm;
end

function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'Controller');
scsm = set_diagram_context(scsm, {['A=[-0.3,3,1;0,0,2;0,0,0];',char(10),'B=[1;2;3];',char(10),'C=[1,1,2;0,2,3];',char(10),'D=0;',char(10),'x0=[-2;1;2];',char(10),'K=[0.1834511,-0.0635571;0.0556004,0.5931633;0.0409687,0.0975615];',char(10),'L=[-0.0041585,-0.1489701,-0.4993004];',char(10)]});
blk = instantiate_block('system/ActivationOperations/SampleClock');
blk = set_block_origin(blk,[-893.354111,293.715106]);
blk = set_block_size(blk,[60.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,0.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
params=struct();
params.frequ='4';
params.offset='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'SampleClock');
blk = instantiate_block('system/SignalGenerators/Random');
blk = set_block_origin(blk,[-899.354111,230.214892]);
blk = set_block_size(blk,[72.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.distribution='''Normal''';
params.A='zeros(3,1)';
params.B='[0.1;0.1;0.1]';
params.seed='2113248';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Random');
blk = instantiate_block('system/Routing/Demux');
blk = set_block_origin(blk,[-771.483475,220.214892]);
blk = set_block_size(blk,[7.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,2);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nout='2';
params.outports=struct('size',{{'-1','-2'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Demux');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[-525.841812,247.064395]);
blk = set_block_size(blk,[17.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''+'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Sum');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[-698.817947,250.214892]);
blk = set_block_size(blk,[15.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''+'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Sum_1');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[-297.645889,197.295611]);
blk = set_block_size(blk,[40.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''-''','''+'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Sum_2');
blk = instantiate_block('system/MatrixOperations/MatrixGain');
blk = set_block_origin(blk,[-668.993789,357.704389]);
blk = set_block_size(blk,[72.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='L';
params.overflow='''Nothing''';
params.mulmethod='''Gain*u1''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'MatrixGain_1');
blk = instantiate_block('system/Routing/Mux');
blk = set_block_origin(blk,[-482.181004,262.063775]);
blk = set_block_size(blk,[7.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.inports=struct('size',{{'-1','-2'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'Mux');
blk = instantiate_super_block();
scsm0 = subsystem_2();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'controller');
blk = set_block_origin(blk,[-659.997801,256.214729]);
blk = set_block_size(blk,[84.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.945098,0.854902,0.854902,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,2);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag8] = add_block(scsm, blk, 'controller');
blk = instantiate_block('system/Dynamical/ContStateSpace');
blk = set_block_origin(blk,[-432.610112,272.063775]);
blk = set_block_size(blk,[90.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.A='A-K*C';
params.B='[B,K]';
params.C='eye(size(A))';
params.D='zeros(size([B,K]))';
params.x0='zeros(size(x0))';
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'ContStateSpace');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[-310.228060,292.063775]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'Split_6');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[-723.470489,341.754366]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag11] = add_block(scsm, blk, 'Split_7');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Scope');
blk = set_block_origin(blk,[-219.000015,207.295611]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[-1,-1]';
params.winPos='[-1,-1]';
params.winNam='''''';
params.winHidden='0';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[-10,10]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag12] = add_block(scsm, blk, 'Scope');
scsm=add_event_link(scsm,{block_tag0, '1', 'output'},{block_tag1, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag4, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag7, '2', 'input'}, [-498.841812,277.064078], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag9, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'output'},{block_tag10, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '2', 'output'},{block_tag3, '2', 'input'}, [-544.033371,235.215404;-544.033371,262.064508], false);
scsm=add_explicit_link(scsm,{block_tag10, '2', 'output'},{block_tag6, '1', 'input'}, [-310.228234,377.704611], false);
scsm=add_explicit_link(scsm,{block_tag10, '1', 'output'},{block_tag5, '1', 'input'}, [-310.228060,242.295611], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag11, '1', 'input'}, [-723.470489,377.704640], false);
scsm=add_explicit_link(scsm,{block_tag11, '2', 'output'},{block_tag7, '1', 'input'}, [-500.851947,341.754366;-500.851947,307.063532], false);
scsm=add_explicit_link(scsm,{block_tag11, '1', 'output'},{block_tag4, '1', 'input'}, [-723.470489,295.214971], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag3, '1', 'input'}, [-535.841811,292.214445], false);
scsm=add_explicit_link(scsm,{block_tag8, '2', 'output'},{block_tag5, '2', 'input'}, [-557.684921,268.214449;-557.684921,212.295611], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag8, '1', 'input'}, [-669.997801,280.215195], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag12, '1', 'input'}, [], false);
out_1 = scsm;
end

Controller = subsystem_1();
Controller = set_model_workspace (Controller, {''});
Controller = set_initial_time (Controller, '0');
Controller = set_final_time (Controller, '30');
tol = {'0.000001', '0.000001', '-1', '0' , '0', 'lsodar', '-1'};
Controller = set_solver_parameters( Controller, tol);
Controller = evaluate_model (Controller);
scsm = Controller;
