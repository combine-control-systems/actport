function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'quantization');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Scope_1');
blk = set_block_origin(blk,[572.578751,-397.722290]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,4);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='4';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='1';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{'''''','''''','''''',''''''}},'reverseColor',{{'0','0','0','0'}},'grid',{{'''Coarse''','''Coarse''','''Coarse''','''Coarse'''}},'xScale',{{'''linear''','''linear''','''linear''','''linear'''}},'xRefresh',{{'-1','-1','-1','-1'}},'yScale',{{'''linear''','''linear''','''linear''','''linear'''}},'yInterval',{{'[NaN,NaN]','[NaN,NaN]','[NaN,NaN]','[NaN,NaN]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{'''''','''''','''''',''''''}},'color',{{'0','0','0','0'}},'marker',{{'0','0','0','0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'Scope_1');
blk = instantiate_block('system/Hybrid/Quantization');
blk = set_block_origin(blk,[478.953339,-311.237183]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.step='5';
params.method='''Round2''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Quantization');
blk = instantiate_block('system/SignalGenerators/Ramp');
blk = set_block_origin(blk,[280.308136,-407.830780]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.slope='1';
params.startt='0';
params.initout='0';
params.zc='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Ramp');
blk = instantiate_block('system/Hybrid/Quantization');
blk = set_block_origin(blk,[477.451141,-365.238342]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.step='5';
params.method='''Floor''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Quantization_1');
blk = instantiate_block('system/Hybrid/Quantization');
blk = set_block_origin(blk,[475.459778,-423.827057]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.step='5';
params.method='''Round''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Quantization_2');
blk = instantiate_block('system/MathOperations/Bias');
blk = set_block_origin(blk,[368.056183,-407.830780]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.b='-10';
params.over='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Bias_2');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[446.342285,-387.830780]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'Block_2');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[447.668060,-403.827057]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'Block_4');
blk = instantiate_block('system/Hybrid/Quantization');
blk = set_block_origin(blk,[473.526276,-483.954376]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.step='5';
params.method='''Truncation''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'Quantization_3');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[447.668060,-403.827057]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'Block_5');
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag0, '1', 'input'}, [550.246635,-291.237183;550.246635,-362.722290], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag0, '2', 'input'}, [545.014946,-345.238342;545.014946,-372.722290], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag0, '3', 'input'}, [544.019264,-403.827057;544.019264,-382.722290], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag5, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag6, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'input'},{block_tag6, '2', 'output'}, [446.342285,-345.238342], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag7, '1', 'input'}, [446.342285,-403.827057], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'input'},{block_tag9, '1', 'output'}, [], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag1, '1', 'input'}, [447.668060,-291.237183], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'input'},{block_tag9, '2', 'output'}, [447.668060,-463.954376], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'input'},{block_tag7, '2', 'output'}, [], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag0, '4', 'input'}, [562.578751,-463.954376], false);
out_1 = scsm;
end

quantization = subsystem_1();
quantization = set_model_workspace (quantization, {''});
quantization = set_initial_time (quantization, '0');
quantization = set_final_time (quantization, '30');
tol = {'0.000001', '0.000001', '-1', '0' , '0', 'lsodar', '-1'};
quantization = set_solver_parameters( quantization, tol);
quantization = evaluate_model (quantization);
scsm = quantization;
