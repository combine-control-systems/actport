function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'continuous_random');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/SignalGenerators/ContinuousRandom');
blk = set_block_ident (blk,'Uniform');
blk = set_block_origin(blk,[-946.061523,1267.049561]);
blk = set_block_size(blk,[110.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.distrib=struct('uniform','1','normal','0','log_normal','0','beta','0','gamma','0','chi','0','exp','0','F','0','T','0','pearson','0','inv_gamma','0','inv_beta','0');;
params.seed='21148';
params.Uniform_param=struct('A',{{'0'}},'B',{{'1'}});
params.Normal_param=struct('mean',{{}},'variance',{{}});
params.LNormal_param=struct('meanL',{{}},'varianceL',{{}});
params.Beta_param=struct('alpha',{{}},'beta',{{}});
params.Gamma_param=struct('k',{{}},'theta',{{}});
params.Chi_param=struct('K',{{}});
params.Exp_param=struct('lambda',{{}});
params.F_param=struct('d1',{{}},'d2',{{}});
params.T_param=struct('t',{{}});
params.Pearson_param=struct('mean',{{}},'variance',{{}},'skewness',{{}},'kurtosis',{{}});
params.Inv_gamma_param=struct('alpha',{{}},'beta',{{}});
params.Inv_beta_param=struct('alpha',{{}},'beta',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'Uniform');
blk = instantiate_block('system/ActivationOperations/SampleClock');
blk = set_block_origin(blk,[-1037.428345,1335.856567]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,0.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
params=struct();
params.frequ='0.1';
params.offset='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'SampleClock');
blk = instantiate_block('system/SignalGenerators/ContinuousRandom');
blk = set_block_ident (blk,'Standard Normal');
blk = set_block_origin(blk,[-946.755676,1189.369873]);
blk = set_block_size(blk,[110.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.distrib=struct('uniform','0','normal','1','log_normal','0','beta','0','gamma','0','chi','0','exp','0','F','0','T','0','pearson','0','inv_gamma','0','inv_beta','0');;
params.seed='21148';
params.Uniform_param=struct('A',{{}},'B',{{}});
params.Normal_param=struct('mean',{{'0'}},'variance',{{'1'}});
params.LNormal_param=struct('meanL',{{}},'varianceL',{{}});
params.Beta_param=struct('alpha',{{}},'beta',{{}});
params.Gamma_param=struct('k',{{}},'theta',{{}});
params.Chi_param=struct('K',{{}});
params.Exp_param=struct('lambda',{{}});
params.F_param=struct('d1',{{}},'d2',{{}});
params.T_param=struct('t',{{}});
params.Pearson_param=struct('mean',{{}},'variance',{{}},'skewness',{{}},'kurtosis',{{}});
params.Inv_gamma_param=struct('alpha',{{}},'beta',{{}});
params.Inv_beta_param=struct('alpha',{{}},'beta',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Standard Normal');
blk = instantiate_block('system/SignalGenerators/ContinuousRandom');
blk = set_block_ident (blk,'Log-Normal');
blk = set_block_origin(blk,[-945.248352,1118.735107]);
blk = set_block_size(blk,[110.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.distrib=struct('uniform','0','normal','0','log_normal','1','beta','0','gamma','0','chi','0','exp','0','F','0','T','0','pearson','0','inv_gamma','0','inv_beta','0');;
params.seed='21148';
params.Uniform_param=struct('A',{{}},'B',{{}});
params.Normal_param=struct('mean',{{}},'variance',{{}});
params.LNormal_param=struct('meanL',{{'0'}},'varianceL',{{'1'}});
params.Beta_param=struct('alpha',{{}},'beta',{{}});
params.Gamma_param=struct('k',{{}},'theta',{{}});
params.Chi_param=struct('K',{{}});
params.Exp_param=struct('lambda',{{}});
params.F_param=struct('d1',{{}},'d2',{{}});
params.T_param=struct('t',{{}});
params.Pearson_param=struct('mean',{{}},'variance',{{}},'skewness',{{}},'kurtosis',{{}});
params.Inv_gamma_param=struct('alpha',{{}},'beta',{{}});
params.Inv_beta_param=struct('alpha',{{}},'beta',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Log-Normal');
blk = instantiate_block('system/SignalGenerators/ContinuousRandom');
blk = set_block_ident (blk,'Beta');
blk = set_block_origin(blk,[-943.741089,1044.137573]);
blk = set_block_size(blk,[110.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.distrib=struct('uniform','0','normal','0','log_normal','0','beta','1','gamma','0','chi','0','exp','0','F','0','T','0','pearson','0','inv_gamma','0','inv_beta','0');;
params.seed='21148';
params.Uniform_param=struct('A',{{}},'B',{{}});
params.Normal_param=struct('mean',{{}},'variance',{{}});
params.LNormal_param=struct('meanL',{{}},'varianceL',{{}});
params.Beta_param=struct('alpha',{{'1'}},'beta',{{'1'}});
params.Gamma_param=struct('k',{{}},'theta',{{}});
params.Chi_param=struct('K',{{}});
params.Exp_param=struct('lambda',{{}});
params.F_param=struct('d1',{{}},'d2',{{}});
params.T_param=struct('t',{{}});
params.Pearson_param=struct('mean',{{}},'variance',{{}},'skewness',{{}},'kurtosis',{{}});
params.Inv_gamma_param=struct('alpha',{{}},'beta',{{}});
params.Inv_beta_param=struct('alpha',{{}},'beta',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Beta');
blk = instantiate_block('system/SignalGenerators/ContinuousRandom');
blk = set_block_ident (blk,'Gamma');
blk = set_block_origin(blk,[-941.793518,968.219116]);
blk = set_block_size(blk,[110.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.distrib=struct('uniform','0','normal','0','log_normal','0','beta','0','gamma','1','chi','0','exp','0','F','0','T','0','pearson','0','inv_gamma','0','inv_beta','0');;
params.seed='21148';
params.Uniform_param=struct('A',{{}},'B',{{}});
params.Normal_param=struct('mean',{{}},'variance',{{}});
params.LNormal_param=struct('meanL',{{}},'varianceL',{{}});
params.Beta_param=struct('alpha',{{}},'beta',{{}});
params.Gamma_param=struct('k',{{'1'}},'theta',{{'1'}});
params.Chi_param=struct('K',{{}});
params.Exp_param=struct('lambda',{{}});
params.F_param=struct('d1',{{}},'d2',{{}});
params.T_param=struct('t',{{}});
params.Pearson_param=struct('mean',{{}},'variance',{{}},'skewness',{{}},'kurtosis',{{}});
params.Inv_gamma_param=struct('alpha',{{}},'beta',{{}});
params.Inv_beta_param=struct('alpha',{{}},'beta',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Gamma');
blk = instantiate_block('system/SignalGenerators/ContinuousRandom');
blk = set_block_ident (blk,'Chi-squared');
blk = set_block_origin(blk,[-942.047424,893.621582]);
blk = set_block_size(blk,[110.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.distrib=struct('uniform','0','normal','0','log_normal','0','beta','0','gamma','0','chi','1','exp','0','F','0','T','0','pearson','0','inv_gamma','0','inv_beta','0');;
params.seed='21148';
params.Uniform_param=struct('A',{{}},'B',{{}});
params.Normal_param=struct('mean',{{}},'variance',{{}});
params.LNormal_param=struct('meanL',{{}},'varianceL',{{}});
params.Beta_param=struct('alpha',{{}},'beta',{{}});
params.Gamma_param=struct('k',{{}},'theta',{{}});
params.Chi_param=struct('K',{{'1'}});
params.Exp_param=struct('lambda',{{}});
params.F_param=struct('d1',{{}},'d2',{{}});
params.T_param=struct('t',{{}});
params.Pearson_param=struct('mean',{{}},'variance',{{}},'skewness',{{}},'kurtosis',{{}});
params.Inv_gamma_param=struct('alpha',{{}},'beta',{{}});
params.Inv_beta_param=struct('alpha',{{}},'beta',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'Chi-squared');
blk = instantiate_block('system/SignalGenerators/ContinuousRandom');
blk = set_block_ident (blk,'Exponential');
blk = set_block_origin(blk,[-943.026001,809.287109]);
blk = set_block_size(blk,[110.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.distrib=struct('uniform','0','normal','0','log_normal','0','beta','0','gamma','0','chi','0','exp','1','F','0','T','0','pearson','0','inv_gamma','0','inv_beta','0');;
params.seed='21148';
params.Uniform_param=struct('A',{{}},'B',{{}});
params.Normal_param=struct('mean',{{}},'variance',{{}});
params.LNormal_param=struct('meanL',{{}},'varianceL',{{}});
params.Beta_param=struct('alpha',{{}},'beta',{{}});
params.Gamma_param=struct('k',{{}},'theta',{{}});
params.Chi_param=struct('K',{{}});
params.Exp_param=struct('lambda',{{'1'}});
params.F_param=struct('d1',{{}},'d2',{{}});
params.T_param=struct('t',{{}});
params.Pearson_param=struct('mean',{{}},'variance',{{}},'skewness',{{}},'kurtosis',{{}});
params.Inv_gamma_param=struct('alpha',{{}},'beta',{{}});
params.Inv_beta_param=struct('alpha',{{}},'beta',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'Exponential');
blk = instantiate_block('system/SignalGenerators/ContinuousRandom');
blk = set_block_ident (blk,'F-distribution');
blk = set_block_origin(blk,[-939.808899,731.246216]);
blk = set_block_size(blk,[110.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.distrib=struct('uniform','0','normal','0','log_normal','0','beta','0','gamma','0','chi','0','exp','0','F','1','T','0','pearson','0','inv_gamma','0','inv_beta','0');;
params.seed='21148';
params.Uniform_param=struct('A',{{}},'B',{{}});
params.Normal_param=struct('mean',{{}},'variance',{{}});
params.LNormal_param=struct('meanL',{{}},'varianceL',{{}});
params.Beta_param=struct('alpha',{{}},'beta',{{}});
params.Gamma_param=struct('k',{{}},'theta',{{}});
params.Chi_param=struct('K',{{}});
params.Exp_param=struct('lambda',{{}});
params.F_param=struct('d1',{{'1'}},'d2',{{'1'}});
params.T_param=struct('t',{{}});
params.Pearson_param=struct('mean',{{}},'variance',{{}},'skewness',{{}},'kurtosis',{{}});
params.Inv_gamma_param=struct('alpha',{{}},'beta',{{}});
params.Inv_beta_param=struct('alpha',{{}},'beta',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'F-distribution');
blk = instantiate_block('system/SignalGenerators/ContinuousRandom');
blk = set_block_ident (blk,'T-distribution');
blk = set_block_origin(blk,[-939.388916,656.701782]);
blk = set_block_size(blk,[110.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.distrib=struct('uniform','0','normal','0','log_normal','0','beta','0','gamma','0','chi','0','exp','0','F','0','T','1','pearson','0','inv_gamma','0','inv_beta','0');;
params.seed='21148';
params.Uniform_param=struct('A',{{}},'B',{{}});
params.Normal_param=struct('mean',{{}},'variance',{{}});
params.LNormal_param=struct('meanL',{{}},'varianceL',{{}});
params.Beta_param=struct('alpha',{{}},'beta',{{}});
params.Gamma_param=struct('k',{{}},'theta',{{}});
params.Chi_param=struct('K',{{}});
params.Exp_param=struct('lambda',{{}});
params.F_param=struct('d1',{{}},'d2',{{}});
params.T_param=struct('t',{{'1'}});
params.Pearson_param=struct('mean',{{}},'variance',{{}},'skewness',{{}},'kurtosis',{{}});
params.Inv_gamma_param=struct('alpha',{{}},'beta',{{}});
params.Inv_beta_param=struct('alpha',{{}},'beta',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'T-distribution');
blk = instantiate_block('system/SignalGenerators/ContinuousRandom');
blk = set_block_ident (blk,'Pearson');
blk = set_block_origin(blk,[-940.367554,575.863708]);
blk = set_block_size(blk,[110.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.distrib=struct('uniform','0','normal','0','log_normal','0','beta','0','gamma','0','chi','0','exp','0','F','0','T','0','pearson','1','inv_gamma','0','inv_beta','0');;
params.seed='21148';
params.Uniform_param=struct('A',{{}},'B',{{}});
params.Normal_param=struct('mean',{{}},'variance',{{}});
params.LNormal_param=struct('meanL',{{}},'varianceL',{{}});
params.Beta_param=struct('alpha',{{}},'beta',{{}});
params.Gamma_param=struct('k',{{}},'theta',{{}});
params.Chi_param=struct('K',{{}});
params.Exp_param=struct('lambda',{{}});
params.F_param=struct('d1',{{}},'d2',{{}});
params.T_param=struct('t',{{}});
params.Pearson_param=struct('mean',{{'1'}},'variance',{{'1'}},'skewness',{{'1'}},'kurtosis',{{'3'}});
params.Inv_gamma_param=struct('alpha',{{}},'beta',{{}});
params.Inv_beta_param=struct('alpha',{{}},'beta',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'Pearson');
blk = instantiate_block('system/SignalGenerators/ContinuousRandom');
blk = set_block_ident (blk,'Inverse Gamma');
blk = set_block_origin(blk,[-938.899658,497.341248]);
blk = set_block_size(blk,[110.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.distrib=struct('uniform','0','normal','0','log_normal','0','beta','0','gamma','0','chi','0','exp','0','F','0','T','0','pearson','0','inv_gamma','1','inv_beta','0');;
params.seed='21148';
params.Uniform_param=struct('A',{{}},'B',{{}});
params.Normal_param=struct('mean',{{}},'variance',{{}});
params.LNormal_param=struct('meanL',{{}},'varianceL',{{}});
params.Beta_param=struct('alpha',{{}},'beta',{{}});
params.Gamma_param=struct('k',{{}},'theta',{{}});
params.Chi_param=struct('K',{{}});
params.Exp_param=struct('lambda',{{}});
params.F_param=struct('d1',{{}},'d2',{{}});
params.T_param=struct('t',{{}});
params.Pearson_param=struct('mean',{{}},'variance',{{}},'skewness',{{}},'kurtosis',{{}});
params.Inv_gamma_param=struct('alpha',{{'1'}},'beta',{{'1'}});
params.Inv_beta_param=struct('alpha',{{}},'beta',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag11] = add_block(scsm, blk, 'Inverse Gamma');
blk = instantiate_block('system/SignalGenerators/ContinuousRandom');
blk = set_block_ident (blk,'Inverse Beta');
blk = set_block_origin(blk,[-937.431763,418.818817]);
blk = set_block_size(blk,[110.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.distrib=struct('uniform','0','normal','0','log_normal','0','beta','0','gamma','0','chi','0','exp','0','F','0','T','0','pearson','0','inv_gamma','0','inv_beta','1');;
params.seed='21148';
params.Uniform_param=struct('A',{{}},'B',{{}});
params.Normal_param=struct('mean',{{}},'variance',{{}});
params.LNormal_param=struct('meanL',{{}},'varianceL',{{}});
params.Beta_param=struct('alpha',{{}},'beta',{{}});
params.Gamma_param=struct('k',{{}},'theta',{{}});
params.Chi_param=struct('K',{{}});
params.Exp_param=struct('lambda',{{}});
params.F_param=struct('d1',{{}},'d2',{{}});
params.T_param=struct('t',{{}});
params.Pearson_param=struct('mean',{{}},'variance',{{}},'skewness',{{}},'kurtosis',{{}});
params.Inv_gamma_param=struct('alpha',{{}},'beta',{{}});
params.Inv_beta_param=struct('alpha',{{'1'}},'beta',{{'1'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag12] = add_block(scsm, blk, 'Inverse Beta');
blk = instantiate_block('system/Links/ActivationSplit');
blk = set_block_origin(blk,[-986.215515,1325.856567]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.717647,0.058824,0.074510,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,3);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag13] = add_block(scsm, blk, 'ActivationSplit');
blk = instantiate_block('system/Links/ActivationSplit');
blk = set_block_origin(blk,[-986.215515,1249.692627]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.717647,0.058824,0.074510,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,3);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag14] = add_block(scsm, blk, 'Block');
blk = instantiate_block('system/Links/ActivationSplit');
blk = set_block_origin(blk,[-986.215515,1168.735107]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.717647,0.058824,0.074510,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,3);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag15] = add_block(scsm, blk, 'Block_1');
blk = instantiate_block('system/Links/ActivationSplit');
blk = set_block_origin(blk,[-986.215515,1099.484985]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.717647,0.058824,0.074510,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,3);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag16] = add_block(scsm, blk, 'Block_2');
blk = instantiate_block('system/Links/ActivationSplit');
blk = set_block_origin(blk,[-986.215515,1018.219116]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.717647,0.058824,0.074510,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,3);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag17] = add_block(scsm, blk, 'Block_3');
blk = instantiate_block('system/Links/ActivationSplit');
blk = set_block_origin(blk,[-986.215515,943.621582]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.717647,0.058824,0.074510,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,3);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag18] = add_block(scsm, blk, 'Block_4');
blk = instantiate_block('system/Links/ActivationSplit');
blk = set_block_origin(blk,[-986.215515,870.272095]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.717647,0.058824,0.074510,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,3);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag19] = add_block(scsm, blk, 'Block_5');
blk = instantiate_block('system/Links/ActivationSplit');
blk = set_block_origin(blk,[-986.215515,786.389954]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.717647,0.058824,0.074510,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,3);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag20] = add_block(scsm, blk, 'Block_6');
blk = instantiate_block('system/Links/ActivationSplit');
blk = set_block_origin(blk,[-986.215515,714.212280]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.717647,0.058824,0.074510,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,3);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag21] = add_block(scsm, blk, 'Block_7');
blk = instantiate_block('system/Links/ActivationSplit');
blk = set_block_origin(blk,[-986.215515,634.231567]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.717647,0.058824,0.074510,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,3);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag22] = add_block(scsm, blk, 'Block_8');
blk = instantiate_block('system/Links/ActivationSplit');
blk = set_block_origin(blk,[-986.215515,554.250916]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.717647,0.058824,0.074510,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,3);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag23] = add_block(scsm, blk, 'Block_9');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Uniform Scope');
blk = set_block_origin(blk,[-757.495117,1267.049561]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='1';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[NaN,NaN]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag24] = add_block(scsm, blk, 'Uniform Scope');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Standard Normal Scope');
blk = set_block_origin(blk,[-755.051819,1186.576294]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='1';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[NaN,NaN]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag25] = add_block(scsm, blk, 'Standard Normal Scope');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Beta Scope');
blk = set_block_origin(blk,[-754.559265,1032.950073]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='1';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[NaN,NaN]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag26] = add_block(scsm, blk, 'Beta Scope');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Log-Normal Scope');
blk = set_block_origin(blk,[-757.002563,1113.423340]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='1';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[NaN,NaN]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag27] = add_block(scsm, blk, 'Log-Normal Scope');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Chi-squared Scope');
blk = set_block_origin(blk,[-754.066711,887.126770]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='1';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[NaN,NaN]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag28] = add_block(scsm, blk, 'Chi-squared Scope');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Gamma Scope');
blk = set_block_origin(blk,[-756.510010,967.600037]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='1';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[NaN,NaN]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag29] = add_block(scsm, blk, 'Gamma Scope');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'F-distribution Scope');
blk = set_block_origin(blk,[-754.559265,726.682617]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='1';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[NaN,NaN]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag30] = add_block(scsm, blk, 'F-distribution Scope');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Inverse Beta Scope');
blk = set_block_origin(blk,[-753.574158,427.233093]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='1';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[NaN,NaN]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag31] = add_block(scsm, blk, 'Inverse Beta Scope');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Exponential Scope');
blk = set_block_origin(blk,[-757.002563,807.155884]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='1';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[NaN,NaN]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag32] = add_block(scsm, blk, 'Exponential Scope');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'T-distribution Scope');
blk = set_block_origin(blk,[-756.510010,653.529663]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='1';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[NaN,NaN]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag33] = add_block(scsm, blk, 'T-distribution Scope');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Inverse Gamma Scope');
blk = set_block_origin(blk,[-756.017456,507.706360]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='1';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[NaN,NaN]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag34] = add_block(scsm, blk, 'Inverse Gamma Scope');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Pearson Scope');
blk = set_block_origin(blk,[-754.066711,573.056396]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='1';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[NaN,NaN]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag35] = add_block(scsm, blk, 'Pearson Scope');
scsm=add_event_link(scsm,{block_tag1, '1', 'output'},{block_tag13, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag13, '1', 'output'},{block_tag0, '1', 'input'}, [-891.061523,1325.856567], false);
scsm=add_event_link(scsm,{block_tag13, '2', 'output'},{block_tag14, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag14, '1', 'output'},{block_tag2, '1', 'input'}, [-891.755676,1249.692627], false);
scsm=add_event_link(scsm,{block_tag14, '2', 'output'},{block_tag15, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag15, '1', 'output'},{block_tag3, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag15, '2', 'output'},{block_tag16, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag16, '1', 'output'},{block_tag4, '1', 'input'}, [-888.741089,1099.484985], false);
scsm=add_event_link(scsm,{block_tag16, '2', 'output'},{block_tag17, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag17, '1', 'output'},{block_tag5, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag17, '2', 'output'},{block_tag18, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag18, '1', 'output'},{block_tag6, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag18, '2', 'output'},{block_tag19, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag19, '1', 'output'},{block_tag7, '1', 'input'}, [-888.026001,870.272095], false);
scsm=add_event_link(scsm,{block_tag19, '2', 'output'},{block_tag20, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag20, '1', 'output'},{block_tag8, '1', 'input'}, [-884.808899,786.389954], false);
scsm=add_event_link(scsm,{block_tag20, '2', 'output'},{block_tag21, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag21, '1', 'output'},{block_tag9, '1', 'input'}, [-884.388916,714.212280], false);
scsm=add_event_link(scsm,{block_tag21, '2', 'output'},{block_tag22, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag22, '1', 'output'},{block_tag10, '1', 'input'}, [-885.367554,634.231567], false);
scsm=add_event_link(scsm,{block_tag22, '2', 'output'},{block_tag23, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag23, '1', 'output'},{block_tag11, '1', 'input'}, [-883.899658,554.250916], false);
scsm=add_event_link(scsm,{block_tag23, '2', 'output'},{block_tag12, '1', 'input'}, [-986.215515,475.245636;-882.431763,475.245636], false);
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag24, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag25, '1', 'input'}, [-795.903748,1209.369873;-795.903748,1206.576294], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag27, '1', 'input'}, [-796.125458,1138.735107;-796.125458,1133.423340], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag26, '1', 'input'}, [-794.150177,1064.137573;-794.150177,1052.950073], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag29, '1', 'input'}, [-794.151764,988.219116;-794.151764,987.600037], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag28, '1', 'input'}, [-793.057068,913.621582;-793.057068,907.126770], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag32, '1', 'input'}, [-795.014282,829.287109;-795.014282,827.155884], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag30, '1', 'input'}, [-792.184082,751.246216;-792.184082,746.682617], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'output'},{block_tag33, '1', 'input'}, [-792.949463,676.701782;-792.949463,673.529663], false);
scsm=add_explicit_link(scsm,{block_tag10, '1', 'output'},{block_tag35, '1', 'input'}, [-792.217133,595.863708;-792.217133,593.056396], false);
scsm=add_explicit_link(scsm,{block_tag11, '1', 'output'},{block_tag34, '1', 'input'}, [-792.458557,517.341248;-792.458557,527.706360], false);
scsm=add_explicit_link(scsm,{block_tag12, '1', 'output'},{block_tag31, '1', 'input'}, [-790.502960,438.818817;-790.502960,447.233093], false);
out_1 = scsm;
end

continuous_random = subsystem_1();
continuous_random = set_model_workspace (continuous_random, {''});
continuous_random = set_initial_time (continuous_random, '0');
continuous_random = set_final_time (continuous_random, '30');
tol = {'0.000001', '0.000001', '-1', '0' , '0', 'lsodar', '-1'};
continuous_random = set_solver_parameters( continuous_random, tol);
continuous_random = evaluate_model (continuous_random);
scsm = continuous_random;
