function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'cont_trans_func');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/SignalGenerators/StepGenerator');
blk = set_block_origin(blk,[-191.000000,72.000000]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.steptime='5';
params.iniv='2';
params.finv='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'Step Generator');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[-122.000000,51.736443]);
blk = set_block_size(blk,[40.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''-'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Sum');
blk = instantiate_block('system/MathOperations/Gain');
blk = set_block_origin(blk,[-4.860399,-5.558105]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='1';
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Gain');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Scope');
blk = set_block_origin(blk,[137.394485,84.126015]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='1';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[NaN,NaN]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Scope');
blk = instantiate_block('system/SignalGenerators/StepGenerator');
blk = set_block_origin(blk,[-190.271305,-53.116207]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.steptime='5';
params.iniv='2';
params.finv='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Step Generator_1');
blk = instantiate_block('system/MathOperations/Gain');
blk = set_block_origin(blk,[-4.131704,-130.674312]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='1';
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Gain_1');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Scope_1');
blk = set_block_origin(blk,[138.123180,-40.990192]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='1';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[NaN,NaN]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'Scope_1');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[-121.271305,-73.379765]);
blk = set_block_size(blk,[40.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''-'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'Sum_1');
blk = instantiate_block('system/SignalGenerators/StepGenerator');
blk = set_block_origin(blk,[-190.068634,-188.219936]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.steptime='5';
params.iniv='2';
params.finv='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'Step Generator_1_1');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[-121.068634,-208.483494]);
blk = set_block_size(blk,[40.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''-'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'Sum_1_1');
blk = instantiate_block('system/MathOperations/Gain');
blk = set_block_origin(blk,[-3.929033,-265.778041]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='1';
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'Gain_1_1');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Scope_1_1');
blk = set_block_origin(blk,[138.325852,-176.093922]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='1';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[NaN,NaN]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag11] = add_block(scsm, blk, 'Scope_1_1');
blk = instantiate_block('system/SignalGenerators/StepGenerator');
blk = set_block_origin(blk,[-184.051284,-328.820278]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.steptime='5';
params.iniv='2';
params.finv='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag12] = add_block(scsm, blk, 'Step Generator_1_1_1');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[-115.051284,-349.083836]);
blk = set_block_size(blk,[40.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''-'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag13] = add_block(scsm, blk, 'Sum_1_1_1');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_ident (blk,'Scope_1_1_1');
blk = set_block_origin(blk,[144.343201,-316.694263]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='1';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[NaN,NaN]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag14] = add_block(scsm, blk, 'Scope_1_1_1');
blk = instantiate_block('system/MathOperations/Gain');
blk = set_block_origin(blk,[17.818800,-425.352382]);
blk = set_block_size(blk,[48.000000,36.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='1';
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag15] = add_block(scsm, blk, 'Gain_1_1_1');
blk = instantiate_block('system/Dynamical/ContTransFunc');
blk = set_block_origin(blk,[-17.676709,70.964020]);
blk = set_block_size(blk,[60.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.num='[1,0]';
params.den='[1,2,1]';
blk = set_block_parameters(blk,params);
[scsm, block_tag16] = add_block(scsm, blk, 'ContTransFunc');
blk = instantiate_block('system/AdvancedDynamical/ContTransFunc_X');
blk = set_block_origin(blk,[-13.450565,-78.353806]);
blk = set_block_size(blk,[90.000000,65.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.num='[1,0]';
params.den='[1,2,1]';
params.x0='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag17] = add_block(scsm, blk, 'ContTransFunc_X');
blk = instantiate_block('system/AdvancedDynamical/ContTransFunc_Y');
blk = set_block_origin(blk,[-11.702736,-205.945496]);
blk = set_block_size(blk,[90.000000,65.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.num='[1,0]';
params.den='[1,2,1]';
params.y0='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag18] = add_block(scsm, blk, 'ContTransFunc_Y');
blk = instantiate_block('system/AdvancedDynamical/ContTransFunc_SS');
blk = set_block_origin(blk,[9.779915,-340.528503]);
blk = set_block_size(blk,[75.000000,65.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.num='[1,0]';
params.den='[1,2,1]';
blk = set_block_parameters(blk,params);
[scsm, block_tag19] = add_block(scsm, blk, 'ContTransFunc_SS');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[89.858888,100.964020]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag20] = add_block(scsm, blk, 'Split');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[86.549435,-73.819107]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag21] = add_block(scsm, blk, 'Block');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[96.219193,-173.445496]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag22] = add_block(scsm, blk, 'Block_1');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[94.779915,-329.002472]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag23] = add_block(scsm, blk, 'Block_2');
scsm=add_explicit_link(scsm,{block_tag1, '2', 'input'},{block_tag2, '1', 'output'}, [-132.000000,14.441895], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'input'},{block_tag0, '1', 'output'}, [-136.500000,96.736443;-136.500000,92.000000], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'input'},{block_tag4, '1', 'output'}, [-135.771305,-28.379765;-135.771305,-33.116207], false);
scsm=add_explicit_link(scsm,{block_tag7, '2', 'input'},{block_tag5, '1', 'output'}, [-131.271305,-110.674312], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'input'},{block_tag8, '1', 'output'}, [-135.568634,-163.483494;-135.568634,-168.219936], false);
scsm=add_explicit_link(scsm,{block_tag9, '2', 'input'},{block_tag10, '1', 'output'}, [-131.068634,-245.778041], false);
scsm=add_explicit_link(scsm,{block_tag13, '2', 'input'},{block_tag15, '1', 'output'}, [-125.051284,-407.352382], false);
scsm=add_explicit_link(scsm,{block_tag13, '1', 'input'},{block_tag12, '1', 'output'}, [-129.551284,-304.083836;-129.551284,-308.820278], false);
scsm=add_explicit_link(scsm,{block_tag16, '1', 'output'},{block_tag20, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'input'},{block_tag20, '2', 'output'}, [89.858888,14.441895], false);
scsm=add_explicit_link(scsm,{block_tag20, '1', 'output'},{block_tag3, '1', 'input'}, [89.858888,104.126015], false);
scsm=add_explicit_link(scsm,{block_tag16, '1', 'input'},{block_tag1, '1', 'output'}, [-49.838355,100.964020;-49.838355,81.736443], false);
scsm=add_explicit_link(scsm,{block_tag17, '1', 'input'},{block_tag7, '1', 'output'}, [-47.360935,-45.853806;-47.360935,-43.379765], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'input'},{block_tag21, '1', 'output'}, [86.549435,-110.674312], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'input'},{block_tag21, '2', 'output'}, [86.549435,-20.990192], false);
scsm=add_explicit_link(scsm,{block_tag21, '1', 'input'},{block_tag17, '1', 'output'}, [], false);
scsm=add_explicit_link(scsm,{block_tag11, '1', 'input'},{block_tag22, '1', 'output'}, [108.311558,-156.093922;108.311558,-173.445496], false);
scsm=add_explicit_link(scsm,{block_tag10, '1', 'input'},{block_tag22, '2', 'output'}, [96.219193,-245.778041], false);
scsm=add_explicit_link(scsm,{block_tag22, '1', 'input'},{block_tag18, '1', 'output'}, [], false);
scsm=add_explicit_link(scsm,{block_tag18, '1', 'input'},{block_tag9, '1', 'output'}, [-46.385685,-173.445496;-46.385685,-178.483494], false);
scsm=add_explicit_link(scsm,{block_tag19, '1', 'input'},{block_tag13, '1', 'output'}, [-32.635685,-308.028503;-32.635685,-319.083836], false);
scsm=add_explicit_link(scsm,{block_tag15, '1', 'input'},{block_tag23, '1', 'output'}, [94.779915,-407.352382], false);
scsm=add_explicit_link(scsm,{block_tag14, '1', 'input'},{block_tag23, '2', 'output'}, [94.779915,-296.694263], false);
scsm=add_explicit_link(scsm,{block_tag23, '1', 'input'},{block_tag19, '1', 'output'}, [], false);
out_1 = scsm;
end

cont_trans_func = subsystem_1();
cont_trans_func = set_model_workspace (cont_trans_func, {''});
cont_trans_func = set_initial_time (cont_trans_func, '0');
cont_trans_func = set_final_time (cont_trans_func, '30');
tol = {'0.000001', '0.000001', '-1', '0' , '0', 'lsodar', '-1'};
cont_trans_func = set_solver_parameters( cont_trans_func, tol);
cont_trans_func = evaluate_model (cont_trans_func);
scsm = cont_trans_func;
