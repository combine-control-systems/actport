function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'matrix_division');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/MatrixOperations/MatrixDivision');
blk = set_block_origin(blk,[-826.043396,1123.575928]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.div_typ=struct('slash','1','backslash','0');;
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'MatrixDivision');
blk = instantiate_block('system/MatrixOperations/MatrixDivision');
blk = set_block_origin(blk,[-826.260681,1056.756958]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.div_typ=struct('slash','0','backslash','1');;
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'MatrixDivision_1');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[-947.196838,1170.607422]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='[1,2;3,4]';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'Constant');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[-947.768860,1113.575928]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='[4,3;2,1]';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Constant_1');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[-849.165161,1153.575928]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Split');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[-857.677673,1133.575928]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Block');
blk = instantiate_block('system/SignalViewers/Display');
blk = set_block_origin(blk,[-749.614258,1119.433716]);
blk = set_block_size(blk,[96.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.fmt='''%6g''';
params.dt='1';
params.showatend='0';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'Display');
blk = instantiate_block('system/SignalViewers/Display');
blk = set_block_origin(blk,[-749.476929,1052.614746]);
blk = set_block_size(blk,[96.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.fmt='''%6g''';
params.dt='1';
params.showatend='0';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'Display_1');
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag4, '1', 'input'}, [-866.620117,1190.607422;-866.620117,1153.575928], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag5, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag4, '2', 'output'},{block_tag1, '1', 'input'}, [-849.165161,1086.756958], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag0, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag5, '2', 'output'},{block_tag1, '2', 'input'}, [-857.677673,1066.756958], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag7, '1', 'input'}, [-767.868805,1076.756958;-767.868805,1076.614746], false);
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag6, '1', 'input'}, [-767.828827,1143.575928;-767.828827,1143.433716], false);
out_1 = scsm;
end

matrix_division = subsystem_1();
matrix_division = set_model_workspace (matrix_division, {''});
matrix_division = set_initial_time (matrix_division, '0');
matrix_division = set_final_time (matrix_division, '30');
tol = {'0.000001', '0.000001', '-1', '0' , '0', 'lsodar', '-1'};
matrix_division = set_solver_parameters( matrix_division, tol);
matrix_division = evaluate_model (matrix_division);
scsm = matrix_division;
