package actport.simulink

object Simulink {
  object Continuous {
    @inline private def expand(s: String): String = "simulink/Continuous/" + s
    val Derivative: String = expand("Derivative")
    val DescriptorStateSpace: String = expand("Descriptor State-Space")
    val Integrator: String = expand("Integrator")
    val IntegratorSecondOrder: String = expand("Integrator, Second-Order")
    val IntegratorSecondOrderLimited: String = expand("Integrator, Second-Prder Limited")
    val IntegratorLimited: String = expand("Integrator Limited")
    val PIDController: String = expand("PID Controller")
    val PIDController2DOF: String = expand("PID Controller (2DOF)")
    val StateSpace: String = expand("State-Space")
    val TransferFcn: String = expand("Transfer Fcn")
    val TransportDelay: String = expand("Transport Delay")
    val VariableTimeDelay: String = expand("Variable Time Delay")
    val VariableTransportDelay: String = expand("Variable Transport Delay")
    val ZeroPole: String = expand("Zero-Pole")
  }

  object Dashboard {
    @inline private def expand(s: String): String = "simulink/Dashboard/" + s
    val CallbackButton: String = expand("Callback Button")
    val CheckBox: String = expand("Check Box")
    val ComboBox: String = expand("Combo Box")
    val CustomGauge: String = expand("Custom Gauge")
    val DashboardScope: String = expand("Dashboard Scope")
    val Display: String = expand("Display")
    val Edit: String = expand("Edit")
    val Gauge: String = expand("Gauge")
    val HalfGauge: String = expand("Half Gauge")
    val Knob: String = expand("Knob")
    val Lamp: String = expand("Lamp")
    val LinearGauge: String = expand("Linear Gauge")
    val MultiStateImage: String = expand("MultiStateImage")
    val PushButton: String = expand("Push Button")
    val QuarterGauge: String = expand("Quarter Gauge")
    val RadioButton: String = expand("Radio Button")
    val RockerSwitch: String = expand("Rocker Switch")
    val RotarySwitch: String = expand("Rotary Switch")
    val Slider: String = expand("Slider")
    val SliderSwitch: String = expand("Slider Switch")
    val ToggleSwitch: String = expand("Toggle Switch")
  }

  object Discontinuities {
    @inline private def expand(s: String): String = "simulink/Discontinuities/" + s
    val Backlash: String = expand("Backlash")
    val CoulombViscousFriction: String = expand("Coulomb & Viscous Friction")
    val DeadZone: String = expand("Dead Zone")
    val DeadZoneDynamic: String = expand("Dead Zone Dynamic")
    val HitCrossing: String = expand("Hit Crossing")
    val Quantizer: String = expand("Quantizer")
    val RateLimiter: String = expand("Rate Limiter")
    val RateLimiterDynamic: String = expand("Rate Limiter Dynamic")
    val Relay: String = expand("Relay")
    val Saturation: String = expand("Saturation")
    val SaturationDynamic: String = expand("Saturation Dynamic")
    val WrapToZero: String = expand("Wrap To Zero")
  }

  object Discrete {
    @inline private def expand(s: String): String = "simulink/Discrete/" + s
    val Delay: String = expand("Delay")
    val Difference: String = expand("Difference")
    val DiscreteDerivative: String = expand("Discrete Derivative")
    val DiscreteFilter: String = expand("Discrete Filter")
    val DiscreteFIRFilter: String = expand("Discrete FIR Filter")
    val DiscretePIDController: String = expand("Discrete PID Controller")
    val DiscretePIDController2DOF: String = expand("Discrete PID Controller (2DOF)")
    val DiscreteStateSpace: String = expand("Discrete State-Space")
    val DiscreteTimeIntegrator: String = expand("Discrete Time Integrator")
    val DiscreteTransferFcn: String = expand("Discrete Transfer Fcn")
    val DiscreteZeroPole: String = expand("Discrete Zero-Pole")
    val EnabledDelay: String = expand("Enabled Delay")
    val FirstOrderHold: String = expand("First-Order Hold")
    val Memory: String = expand("Memory")
    val ResettableDelay: String = expand("Resettable Delay")
    val TappedDelay: String = expand("Tapped Delay")
    val TransferFcnFirstOrder: String = expand("Transfer Fcn First Order")
    val TransferFcnLeadOrLag: String = expand("Transfer Fcn Lead or Lag")
    val TransferFcnRealZero: String = expand("Transfer Fcn Real Zero")
    val UnitDelay: String = expand("Unit Delay")
    val VariableIntegerDelay: String = expand("Variable Integer Delay")
    val ZeroOrderHold: String = expand("Zero-Order Hold")
  }

  object LogicAndBitOperations {
    @inline private def expand(s: String): String = "simulink/Logic and Bit Operations/" + s
    val BitClear: String = expand("Bit Clear")
    val BitSet: String = expand("Bit Set")
    val BitwiseOperator: String = expand("Bitwise Operator")
    val CombinatorialLogic: String = expand("Combinatorial Logic")
    val CompareToConstant: String = expand("Compare To Constant")
    val CompareToZero: String = expand("Compare To Zero")
    val DetectFallNegative: String = expand("Detect Fall Negative")
    val DetectFallNonpositive: String = expand("Detect Fall Nonpositive")
    val DetectRiseNonnegative: String = expand("Detect Rise Nonnegative")
    val DetectRisePositive: String = expand("Detect Rise Positive")
    val DetectChange: String = expand("Detect Change")
    val DetectDecrease: String = expand("Detect Decrease")
    val DetectIncrease: String = expand("Detect Increase")
    val ExtractBits: String = expand("Extract Bits")
    val IntervalTest: String = expand("Interval Test")
    val IntervalTestDynamic: String = expand("Interval Test Dynamic")
    val LogicalOperator: String = expand("Logical Operator")
    val RelationalOperator: String = expand("Relational Operator")
    val ShiftArithmetic: String = expand("Shift Arithmetic")
  }

  object LookupTables {
    @inline private def expand(s: String): String = "simulink/Lookup Tables/" + s
    val LookupTable_1D: String = expand("1-D Lookup Table")
    val LookupTable_2D: String = expand("2-D Lookup Table")
    val Cosine: String = expand("Cosine")
    val DirectLookupTable_nD: String = expand("Direct Lookup Table (n-D)")
    val InterpolationUsingPrelookup: String = expand("Interpolation Using Prelookup")
    val LookupTableDynamic: String = expand("Lookup Table Dynamic")
    val LookupTable_nD: String = expand("n-D Lookup Table")
    val Prelookup: String = expand("Prelookup")
    val Sine: String = expand("Sine")
  }

  object MathOperations {
    @inline private def expand(s: String): String = "simulink/Math Operations/" + s
    val Abs: String = expand("Abs")
    val Add: String = expand("Add")
    val AlgebraicConstraint: String = expand("Algebraic Constraint")
    val Assignment: String = expand("Assignment")
    val Bias: String = expand("Bias")
    val ComplexToMagnitudeAngle: String = expand("Complex to Magnitude-Angle")
    val ComplexToRealImag: String = expand("Complex to Real-Imag")
    val Divide: String = expand("Divide")
    val DotProduct: String = expand("Dot Product")
    val FindNonzeroElements: String = expand("Find Nonzero Elements")
    val Gain: String = expand("Gain")
    val MagnitudeAngleToComplex: String = expand("Magnitude-Angle to Complex")
    val MathFunction: String = expand("Math Function")
    val MatrixConcatenate: String = expand("Matrix Concatenate")
    val MinMax: String = expand("MinMax")
    val MinMaxRunningResettable: String = expand("MinMax Running Resettable")
    val PermuteDimensions: String = expand("Permute Dimensions")
    val Polynomial: String = expand("Polynomial")
    val Product: String = expand("Product")
    val ProductOfElements: String = expand("Product of Elements")
    val RealImagToComplex: String = expand("Real-Imag to Complex")
    val ReciprocalSqrt: String = expand("Reciprocal Sqrt")
    val Reshape: String = expand("Reshape")
    val RoundingFunction: String = expand("Rounding Function")
    val Sign: String = expand("Sign")
    val SignedSqrt: String = expand("Signed Sqrt")
    val SineWaveFunction: String = expand("Sine Wave Function")
    val SliderGain: String = expand("Slider Gain")
    val Sqrt: String = expand("Sqrt")
    val Squeeze: String = expand("Squeeze")
    val Subtract: String = expand("Subtract")
    val Sum: String = expand("Sum")
    val SumOfElements: String = expand("SumOfElements")
    val TrigonometricFunction: String = expand("Trigonometric Function")
    val UnaryMinus: String = expand("Unary Minus")
    val VectorConcatenate: String = expand("Vector Concatenate")
    val WeightedSampleTimeMath: String = expand("Weighted Sample Time Math")
  }

  object ModelVerification {
    @inline private def expand(s: String): String = "simulink/Model Verification/" + s
    val Assertion: String = expand("Assertion")
    val CheckDynamicGap: String = expand("Check Dynamic Gap")
    val CheckDynamicRange: String = expand("Check Dynamic Range")
    val CheckStaticGap: String = expand("Check Static Gap")
    val CheckStaticRange: String = expand("Check Static Range")
    val CheckDynamicLowerBound: String = expand("Check Dynamic Lower Bound")
    val CheckDynamicUpperBound: String = expand("Check Dynamic Upper Bound")
    val CheckInputResolution: String = expand("Check Input Resolution")
    val CheckStaticLowerBound: String = expand("Check Static Lower Bound")
    val CheckStaticUpperBound: String = expand("Check Static Upper Bound")
    val CheckDiscreteGradient: String = expand("Check Discrete Gradient")
  }

  object ModelWideUtilities {
    @inline private def expand(s: String): String = "simulink/Model-Wide Utilities/" + s
    val BlockSupportTable: String = expand("Block Support Table")
    val DocBlock: String = expand("DocBlock")
    val ModelInfo: String = expand("Model Info")
    val TimeBasedLinearization: String = expand("Time-Based Linearization")
    val TriggerBasedLinearization: String = expand("Trigger-Based Linearization")
  }

  object PortsAndSubsystems {
    @inline private def expand(s: String): String = "simulink/Ports & Subsystems/" + s
    val AtomicSubsystem: String = expand("Atomic Subsystem")
    val CodeReuseSubsystem: String = expand("CodeReuseSubsystem")
    val ConfigurableSubsystem: String = expand("Configurable Subsystem")
    val Enable: String = expand("Enable")
    val EnabledAndTriggeredSubsystem: String = expand("Enabled and Triggered Subsystem")
    val EnabledSubsystem: String = expand("Enabled Subsystem")
    val ForEachSubsystem: String = expand("For Each Subsystem")
    val ForIteratorSubsystem: String = expand("For Iterator Subsystem")
    val FunctionCallFeedbackLatch: String = expand("Function-Call Feedback Latch")
    val FunctionCallGenerator: String = expand("Function-Call Generator")
    val FunctionCallSplit: String = expand("Function-Call Split")
    val FunctionCallSubsystem: String = expand("Function-Call Subsystem")
    val If: String = expand("If")
    val IfActionSubsystem: String = expand("If Action Subsystem")
    val InBusElement: String = expand("In Bus Element")
    val In1: String = expand("In1")
    val Model: String = expand("Model")
    val OutBusElement: String = expand("Out Bus Element")
    val Out1: String = expand("Out1")
    val ResettableSubsystem: String = expand("Resettable Subsystem")
    val Subsystem: String = expand("Subsystem")
    val SubsystemExamples: String = expand("Subsystem Examples")
    val SwitchCase: String = expand("Switch Case")
    val SwitchCaseActionSubsystem: String = expand("Switch Case Action Subsystem")
    val Trigger: String = expand("Trigger")
    val TriggeredSubsystem: String = expand("Triggered Subsystem")
    val UnitSystemConfiguration: String = expand("Unit System Configuration")
    val VariantModel: String = expand("Variant Model")
    val VariantSubsystem: String = expand("Variant Subsystem")
    val WhileIteratorSubsystem: String = expand("While Iterator Subsystem")
  }

  object SignalAttributes {
    @inline private def expand(s: String): String = "simulink/Signal Attributes/" + s
    val BusToVector: String = expand("Bus to Vector")
    val DataTypeConversion: String = expand("Data Type Conversion")
    val DataTypeConversionInherited: String = expand("Data Type Conversion Inherited")
    val DataTypeDuplicate: String = expand("Data Type Duplicate")
    val DataTypePropagation: String = expand("Data Type Propagation")
    val DataTypePropagationExamples: String = expand("Data Type Propagation Examples")
    val DataTypeScalingStrip: String = expand("Data Type Scaling Strip")
    val IC: String = expand("IC")
    val Probe: String = expand("Probe")
    val RateTransition: String = expand("Rate Transition")
    val SignalSpecification: String = expand("Signal Specification")
    val SignalConversion: String = expand("Signal Conversion")
    val UnitConversion: String = expand("Unit Conversion")
    val WeightedSampleTime: String = expand("Weighted Sample Time")
    val Width: String = expand("Width")
  }

  object SignalRouting {
    @inline private def expand(s: String): String = "simulink/Signal Routing/" + s
    val BusElementIn: String = expand("Bus Element In")
    val BusElementOut: String = expand("Bus Element Out")
    val BusAssignment: String = expand("Bus Assignment")
    val BusCreator: String = expand("Bus Creator")
    val BusSelector: String = expand("Bus Selector")
    val DataStoreMemory: String = expand("Data Store Memory")
    val DataStoreRead: String = expand("Data Store Read")
    val DataStoreWrite: String = expand("Data Store Write")
    val Demux: String = expand("Demux")
    val EnvironmentController: String = expand("Environment Controller")
    val From: String = expand("From")
    val Goto: String = expand("Goto")
    val GotoTagVisibility: String = expand("Goto Tag Visibility")
    val IndexVector: String = expand("Index Vector")
    val ManualSwitch: String = expand("Manual Switch")
    val ManualVariantSink: String = expand("Manual Variant Sink")
    val ManualVariantSource: String = expand("Manual Variant Source")
    val Merge: String = expand("Merge")
    val MultiportSwitch: String = expand("Multiport Switch")
    val Mux: String = expand("Mux")
    val ParameterWriter: String = expand("Parameter Writer")
    val Selector: String = expand("Selector")
    val StateReader: String = expand("State Reader")
    val StateWriter: String = expand("State Writer")
    val Switch: String = expand("Switch")
    val VariantSink: String = expand("Variant Sink")
    val VariantSource: String = expand("Variant Source")
    val VectorConcatenate: String = expand("Vector Concatenate")
  }

  object Sinks {
    @inline private def expand(s: String): String = "simulink/Sinks/" + s
    val Display: String = expand("Display")
    val FloatingScope: String = expand("Floating Scope")
    val OutBusElement: String = expand("Out Bus Element")
    val Out1: String = expand("Out1")
    val Scope: String = expand("Scope")
    val StopSimulation: String = expand("Stop Simulation")
    val Terminator: String = expand("Terminator")
    val ToFile: String = expand("To File")
    val ToWorkspace: String = expand("To Workspace")
    val XYGraph: String = expand("XY Graph")
  }

  object Sources {
    @inline private def expand(s: String): String = "simulink/Sources/" + s
    val BandLimitedWhiteNoise: String = expand("Band-Limited White Noise")
    val ChirpSignal: String = expand("Chirp Signal")
    val Clock: String = expand("Clock")
    val Constant: String = expand("Constant")
    val CounterFreeRunning: String = expand("Counter Free-Running")
    val CounterLimited: String = expand("Counter Limited")
    val DigitalClock: String = expand("Digital Clock")
    val EnumeratedConstant: String = expand("Enumerated Constant")
    val FromFile: String = expand("From File")
    val FromSpreadsheet: String = expand("From Spreadsheet")
    val FromWorkspace: String = expand("From Workspace")
    val Ground: String = expand("Ground")
    val InBusElement: String = expand("In Bus Element")
    val In1: String = expand("In1")
    val PulseGenerator: String = expand("Pulse Generator")
    val Ramp: String = expand("Ramp")
    val RandomNumber: String = expand("Random Number")
    val RepeatingSequence: String = expand("Repeating Sequence")
    val RepeatingSequenceInterpolated: String = expand("Repeating Sequence Interpolated")
    val RepeatingSequenceStair: String = expand("Repeating Sequence Stair")
    val SignalBuilder: String = expand("Signal Builder")
    val SignalEditor: String = expand("Signal Editor")
    val SignalGenerator: String = expand("Signal Generator")
    val SineWave: String = expand("Sine Wave")
    val Step: String = expand("Step")
    val UniformRandomNumber: String = expand("Uniform Random Number")
    val WaveformGenerator: String = expand("Waveform Generator")
  }

  object String {
    @inline private def expand(s: String): String = "simulink/String/" + s
    val AsciiToString: String = expand("ASCII to String")
    val ComposeString: String = expand("Compose String")
    val ScanString: String = expand("Scan String")
    val StringCompare: String = expand("String Compare")
    val StringConcatenate: String = expand("String Concatenate")
    val StringConstant: String = expand("String Constant")
    val StringFind: String = expand("String Find")
    val StringLength: String = expand("String Length")
    val StringToAscii: String = expand("String to ASCII")
    val StringToDouble: String = expand("String to Double")
    val StringToEnum: String = expand("String to Enum")
    val StringToSingle: String = expand("String to Single")
    val Substring: String = expand("Substring")
    val ToString: String = expand("To String")
  }

  object UserDefinedFunctions {
    @inline private def expand(s: String): String = "simulink/User-Defined Functions/" + s
    val CCaller: String = expand("C Caller")
    val Fcn: String = expand("Fcn")
    val FunctionCaller: String = expand("Function Caller")
    val InitializeFunction: String = expand("Initialize Function")
    val InterpretedMatlabFunction: String = expand("Interpreted MATLAB Function")
    val Level2MatlabSFunction: String = expand("Level-2 MATLAB S-Function")
    val MatlabFunction: String = expand("MATLAB Function")
    val MatlabSystem: String = expand("MATLAB System")
    val ResetFunction: String = expand("Reset Function")
    val SFunction: String = expand("S-Function")
    val SFunctionBuilder: String = expand("S-Function Builder")
    val SFunctionExamples: String = expand("S-Function Examples")
    val SimulinkFunction: String = expand("Simulink Function")
    val TerminateFunction: String = expand("Terminate Function")
  }
}
