package actport.simulink

/** Simulink standard block paths.
  *
  * Used to avoid repeating and misspelling the paths.
  */
object Simulink {
  object Continuous {
    @inline private def expand(s: String): SimulinkSource = SimulinkSource("simulink/Continuous/" + s)
    val Derivative: SimulinkSource = expand("Derivative")
    val DescriptorStateSpace: SimulinkSource = expand("Descriptor State-Space")
    val Integrator: SimulinkSource = expand("Integrator")
    val IntegratorSecondOrder: SimulinkSource = expand("Integrator, Second-Order")
    val IntegratorSecondOrderLimited: SimulinkSource = expand("Integrator, Second-Prder Limited")
    val IntegratorLimited: SimulinkSource = expand("Integrator Limited")
    val PIDController: SimulinkSource = expand("PID Controller")
    val PIDController2DOF: SimulinkSource = expand("PID Controller (2DOF)")
    val StateSpace: SimulinkSource = expand("State-Space")
    val TransferFcn: SimulinkSource = expand("Transfer Fcn")
    val TransportDelay: SimulinkSource = expand("Transport Delay")
    val VariableTimeDelay: SimulinkSource = expand("Variable Time Delay")
    val VariableTransportDelay: SimulinkSource = expand("Variable Transport Delay")
    val ZeroPole: SimulinkSource = expand("Zero-Pole")
  }

  object Dashboard {
    @inline private def expand(s: String): SimulinkSource = SimulinkSource("simulink/Dashboard/" + s)
    val CallbackButton: SimulinkSource = expand("Callback Button")
    val CheckBox: SimulinkSource = expand("Check Box")
    val ComboBox: SimulinkSource = expand("Combo Box")
    val CustomGauge: SimulinkSource = expand("Custom Gauge")
    val DashboardScope: SimulinkSource = expand("Dashboard Scope")
    val Display: SimulinkSource = expand("Display")
    val Edit: SimulinkSource = expand("Edit")
    val Gauge: SimulinkSource = expand("Gauge")
    val HalfGauge: SimulinkSource = expand("Half Gauge")
    val Knob: SimulinkSource = expand("Knob")
    val Lamp: SimulinkSource = expand("Lamp")
    val LinearGauge: SimulinkSource = expand("Linear Gauge")
    val MultiStateImage: SimulinkSource = expand("MultiStateImage")
    val PushButton: SimulinkSource = expand("Push Button")
    val QuarterGauge: SimulinkSource = expand("Quarter Gauge")
    val RadioButton: SimulinkSource = expand("Radio Button")
    val RockerSwitch: SimulinkSource = expand("Rocker Switch")
    val RotarySwitch: SimulinkSource = expand("Rotary Switch")
    val Slider: SimulinkSource = expand("Slider")
    val SliderSwitch: SimulinkSource = expand("Slider Switch")
    val ToggleSwitch: SimulinkSource = expand("Toggle Switch")
  }

  object Discontinuities {
    @inline private def expand(s: String): SimulinkSource = SimulinkSource("simulink/Discontinuities/" + s)
    val Backlash: SimulinkSource = expand("Backlash")
    val CoulombViscousFriction: SimulinkSource = expand("Coulomb & Viscous Friction")
    val DeadZone: SimulinkSource = expand("Dead Zone")
    val DeadZoneDynamic: SimulinkSource = expand("Dead Zone Dynamic")
    val HitCrossing: SimulinkSource = expand("Hit Crossing")
    val Quantizer: SimulinkSource = expand("Quantizer")
    val RateLimiter: SimulinkSource = expand("Rate Limiter")
    val RateLimiterDynamic: SimulinkSource = expand("Rate Limiter Dynamic")
    val Relay: SimulinkSource = expand("Relay")
    val Saturation: SimulinkSource = expand("Saturation")
    val SaturationDynamic: SimulinkSource = expand("Saturation Dynamic")
    val WrapToZero: SimulinkSource = expand("Wrap To Zero")
  }

  object Discrete {
    @inline private def expand(s: String): SimulinkSource = SimulinkSource("simulink/Discrete/" + s)
    val Delay: SimulinkSource = expand("Delay")
    val Difference: SimulinkSource = expand("Difference")
    val DiscreteDerivative: SimulinkSource = expand("Discrete Derivative")
    val DiscreteFilter: SimulinkSource = expand("Discrete Filter")
    val DiscreteFIRFilter: SimulinkSource = expand("Discrete FIR Filter")
    val DiscretePIDController: SimulinkSource = expand("Discrete PID Controller")
    val DiscretePIDController2DOF: SimulinkSource = expand("Discrete PID Controller (2DOF)")
    val DiscreteStateSpace: SimulinkSource = expand("Discrete State-Space")
    val DiscreteTimeIntegrator: SimulinkSource = expand("Discrete Time Integrator")
    val DiscreteTransferFcn: SimulinkSource = expand("Discrete Transfer Fcn")
    val DiscreteZeroPole: SimulinkSource = expand("Discrete Zero-Pole")
    val EnabledDelay: SimulinkSource = expand("Enabled Delay")
    val FirstOrderHold: SimulinkSource = expand("First-Order Hold")
    val Memory: SimulinkSource = expand("Memory")
    val ResettableDelay: SimulinkSource = expand("Resettable Delay")
    val TappedDelay: SimulinkSource = expand("Tapped Delay")
    val TransferFcnFirstOrder: SimulinkSource = expand("Transfer Fcn First Order")
    val TransferFcnLeadOrLag: SimulinkSource = expand("Transfer Fcn Lead or Lag")
    val TransferFcnRealZero: SimulinkSource = expand("Transfer Fcn Real Zero")
    val UnitDelay: SimulinkSource = expand("Unit Delay")
    val VariableIntegerDelay: SimulinkSource = expand("Variable Integer Delay")
    val ZeroOrderHold: SimulinkSource = expand("Zero-Order Hold")
  }

  object LogicAndBitOperations {
    @inline private def expand(s: String): SimulinkSource = SimulinkSource("simulink/Logic and Bit Operations/" + s)
    val BitClear: SimulinkSource = expand("Bit Clear")
    val BitSet: SimulinkSource = expand("Bit Set")
    val BitwiseOperator: SimulinkSource = expand("Bitwise Operator")
    val CombinatorialLogic: SimulinkSource = expand("Combinatorial Logic")
    val CompareToConstant: SimulinkSource = expand("Compare To Constant")
    val CompareToZero: SimulinkSource = expand("Compare To Zero")
    val DetectFallNegative: SimulinkSource = expand("Detect Fall Negative")
    val DetectFallNonpositive: SimulinkSource = expand("Detect Fall Nonpositive")
    val DetectRiseNonnegative: SimulinkSource = expand("Detect Rise Nonnegative")
    val DetectRisePositive: SimulinkSource = expand("Detect Rise Positive")
    val DetectChange: SimulinkSource = expand("Detect Change")
    val DetectDecrease: SimulinkSource = expand("Detect Decrease")
    val DetectIncrease: SimulinkSource = expand("Detect Increase")
    val ExtractBits: SimulinkSource = expand("Extract Bits")
    val IntervalTest: SimulinkSource = expand("Interval Test")
    val IntervalTestDynamic: SimulinkSource = expand("Interval Test Dynamic")
    val LogicalOperator: SimulinkSource = expand("Logical Operator")
    val RelationalOperator: SimulinkSource = expand("Relational Operator")
    val ShiftArithmetic: SimulinkSource = expand("Shift Arithmetic")
  }

  object LookupTables {
    @inline private def expand(s: String): SimulinkSource = SimulinkSource("simulink/Lookup Tables/" + s)
    val LookupTable_1D: SimulinkSource = expand("1-D Lookup Table")
    val LookupTable_2D: SimulinkSource = expand("2-D Lookup Table")
    val Cosine: SimulinkSource = expand("Cosine")
    val DirectLookupTable_nD: SimulinkSource = expand("Direct Lookup Table (n-D)")
    val InterpolationUsingPrelookup: SimulinkSource = expand("Interpolation Using Prelookup")
    val LookupTableDynamic: SimulinkSource = expand("Lookup Table Dynamic")
    val LookupTable_nD: SimulinkSource = expand("n-D Lookup Table")
    val Prelookup: SimulinkSource = expand("Prelookup")
    val Sine: SimulinkSource = expand("Sine")
  }

  object MathOperations {
    @inline private def expand(s: String): SimulinkSource = SimulinkSource("simulink/Math Operations/" + s)
    val Abs: SimulinkSource = expand("Abs")
    val Add: SimulinkSource = expand("Add")
    val AlgebraicConstraint: SimulinkSource = expand("Algebraic Constraint")
    val Assignment: SimulinkSource = expand("Assignment")
    val Bias: SimulinkSource = expand("Bias")
    val ComplexToMagnitudeAngle: SimulinkSource = expand("Complex to Magnitude-Angle")
    val ComplexToRealImag: SimulinkSource = expand("Complex to Real-Imag")
    val Divide: SimulinkSource = expand("Divide")
    val DotProduct: SimulinkSource = expand("Dot Product")
    val FindNonzeroElements: SimulinkSource = expand("Find Nonzero Elements")
    val Gain: SimulinkSource = expand("Gain")
    val MagnitudeAngleToComplex: SimulinkSource = expand("Magnitude-Angle to Complex")
    val MathFunction: SimulinkSource = expand("Math Function")
    val MatrixConcatenate: SimulinkSource = expand("Matrix Concatenate")
    val MinMax: SimulinkSource = expand("MinMax")
    val MinMaxRunningResettable: SimulinkSource = expand("MinMax Running Resettable")
    val PermuteDimensions: SimulinkSource = expand("Permute Dimensions")
    val Polynomial: SimulinkSource = expand("Polynomial")
    val Product: SimulinkSource = expand("Product")
    val ProductOfElements: SimulinkSource = expand("Product of Elements")
    val RealImagToComplex: SimulinkSource = expand("Real-Imag to Complex")
    val ReciprocalSqrt: SimulinkSource = expand("Reciprocal Sqrt")
    val Reshape: SimulinkSource = expand("Reshape")
    val RoundingFunction: SimulinkSource = expand("Rounding Function")
    val Sign: SimulinkSource = expand("Sign")
    val SignedSqrt: SimulinkSource = expand("Signed Sqrt")
    val SineWaveFunction: SimulinkSource = expand("Sine Wave Function")
    val SliderGain: SimulinkSource = expand("Slider Gain")
    val Sqrt: SimulinkSource = expand("Sqrt")
    val Squeeze: SimulinkSource = expand("Squeeze")
    val Subtract: SimulinkSource = expand("Subtract")
    val Sum: SimulinkSource = expand("Sum")
    val SumOfElements: SimulinkSource = expand("SumOfElements")
    val TrigonometricFunction: SimulinkSource = expand("Trigonometric Function")
    val UnaryMinus: SimulinkSource = expand("Unary Minus")
    val VectorConcatenate: SimulinkSource = expand("Vector Concatenate")
    val WeightedSampleTimeMath: SimulinkSource = expand("Weighted Sample Time Math")
  }

  object ModelVerification {
    @inline private def expand(s: String): SimulinkSource = SimulinkSource("simulink/Model Verification/" + s)
    val Assertion: SimulinkSource = expand("Assertion")
    val CheckDynamicGap: SimulinkSource = expand("Check Dynamic Gap")
    val CheckDynamicRange: SimulinkSource = expand("Check Dynamic Range")
    val CheckStaticGap: SimulinkSource = expand("Check Static Gap")
    val CheckStaticRange: SimulinkSource = expand("Check Static Range")
    val CheckDynamicLowerBound: SimulinkSource = expand("Check Dynamic Lower Bound")
    val CheckDynamicUpperBound: SimulinkSource = expand("Check Dynamic Upper Bound")
    val CheckInputResolution: SimulinkSource = expand("Check Input Resolution")
    val CheckStaticLowerBound: SimulinkSource = expand("Check Static Lower Bound")
    val CheckStaticUpperBound: SimulinkSource = expand("Check Static Upper Bound")
    val CheckDiscreteGradient: SimulinkSource = expand("Check Discrete Gradient")
  }

  object ModelWideUtilities {
    @inline private def expand(s: String): SimulinkSource = SimulinkSource("simulink/Model-Wide Utilities/" + s)
    val BlockSupportTable: SimulinkSource = expand("Block Support Table")
    val DocBlock: SimulinkSource = expand("DocBlock")
    val ModelInfo: SimulinkSource = expand("Model Info")
    val TimeBasedLinearization: SimulinkSource = expand("Time-Based Linearization")
    val TriggerBasedLinearization: SimulinkSource = expand("Trigger-Based Linearization")
  }

  object PortsAndSubsystems {
    @inline private def expand(s: String): SimulinkSource = SimulinkSource("simulink/Ports & Subsystems/" + s)
    val AtomicSubsystem: SimulinkSource = expand("Atomic Subsystem")
    val CodeReuseSubsystem: SimulinkSource = expand("CodeReuseSubsystem")
    val ConfigurableSubsystem: SimulinkSource = expand("Configurable Subsystem")
    val Enable: SimulinkSource = expand("Enable")
    val EnabledAndTriggeredSubsystem: SimulinkSource = expand("Enabled and Triggered Subsystem")
    val EnabledSubsystem: SimulinkSource = expand("Enabled Subsystem")
    val ForEachSubsystem: SimulinkSource = expand("For Each Subsystem")
    val ForIteratorSubsystem: SimulinkSource = expand("For Iterator Subsystem")
    val FunctionCallFeedbackLatch: SimulinkSource = expand("Function-Call Feedback Latch")
    val FunctionCallGenerator: SimulinkSource = expand("Function-Call Generator")
    val FunctionCallSplit: SimulinkSource = expand("Function-Call Split")
    val FunctionCallSubsystem: SimulinkSource = expand("Function-Call Subsystem")
    val If: SimulinkSource = expand("If")
    val IfActionSubsystem: SimulinkSource = expand("If Action Subsystem")
    val InBusElement: SimulinkSource = expand("In Bus Element")
    val In1: SimulinkSource = expand("In1")
    val Model: SimulinkSource = expand("Model")
    val OutBusElement: SimulinkSource = expand("Out Bus Element")
    val Out1: SimulinkSource = expand("Out1")
    val ResettableSubsystem: SimulinkSource = expand("Resettable Subsystem")
    val Subsystem: SimulinkSource = expand("Subsystem")
    val SubsystemExamples: SimulinkSource = expand("Subsystem Examples")
    val SwitchCase: SimulinkSource = expand("Switch Case")
    val SwitchCaseActionSubsystem: SimulinkSource = expand("Switch Case Action Subsystem")
    val Trigger: SimulinkSource = expand("Trigger")
    val TriggeredSubsystem: SimulinkSource = expand("Triggered Subsystem")
    val UnitSystemConfiguration: SimulinkSource = expand("Unit System Configuration")
    val VariantModel: SimulinkSource = expand("Variant Model")
    val VariantSubsystem: SimulinkSource = expand("Variant Subsystem")
    val WhileIteratorSubsystem: SimulinkSource = expand("While Iterator Subsystem")
  }

  object SignalAttributes {
    @inline private def expand(s: String): SimulinkSource = SimulinkSource("simulink/Signal Attributes/" + s)
    val BusToVector: SimulinkSource = expand("Bus to Vector")
    val DataTypeConversion: SimulinkSource = expand("Data Type Conversion")
    val DataTypeConversionInherited: SimulinkSource = expand("Data Type Conversion Inherited")
    val DataTypeDuplicate: SimulinkSource = expand("Data Type Duplicate")
    val DataTypePropagation: SimulinkSource = expand("Data Type Propagation")
    val DataTypePropagationExamples: SimulinkSource = expand("Data Type Propagation Examples")
    val DataTypeScalingStrip: SimulinkSource = expand("Data Type Scaling Strip")
    val IC: SimulinkSource = expand("IC")
    val Probe: SimulinkSource = expand("Probe")
    val RateTransition: SimulinkSource = expand("Rate Transition")
    val SignalSpecification: SimulinkSource = expand("Signal Specification")
    val SignalConversion: SimulinkSource = expand("Signal Conversion")
    val UnitConversion: SimulinkSource = expand("Unit Conversion")
    val WeightedSampleTime: SimulinkSource = expand("Weighted Sample Time")
    val Width: SimulinkSource = expand("Width")
  }

  object SignalRouting {
    @inline private def expand(s: String): SimulinkSource = SimulinkSource("simulink/Signal Routing/" + s)
    val BusElementIn: SimulinkSource = expand("Bus Element In")
    val BusElementOut: SimulinkSource = expand("Bus Element Out")
    val BusAssignment: SimulinkSource = expand("Bus Assignment")
    val BusCreator: SimulinkSource = expand("Bus Creator")
    val BusSelector: SimulinkSource = expand("Bus Selector")
    val DataStoreMemory: SimulinkSource = expand("Data Store Memory")
    val DataStoreRead: SimulinkSource = expand("Data Store Read")
    val DataStoreWrite: SimulinkSource = expand("Data Store Write")
    val Demux: SimulinkSource = expand("Demux")
    val EnvironmentController: SimulinkSource = expand("Environment Controller")
    val From: SimulinkSource = expand("From")
    val Goto: SimulinkSource = expand("Goto")
    val GotoTagVisibility: SimulinkSource = expand("Goto Tag Visibility")
    val IndexVector: SimulinkSource = expand("Index Vector")
    val ManualSwitch: SimulinkSource = expand("Manual Switch")
    val ManualVariantSink: SimulinkSource = expand("Manual Variant Sink")
    val ManualVariantSource: SimulinkSource = expand("Manual Variant Source")
    val Merge: SimulinkSource = expand("Merge")
    val MultiportSwitch: SimulinkSource = expand("Multiport Switch")
    val Mux: SimulinkSource = expand("Mux")
    val ParameterWriter: SimulinkSource = expand("Parameter Writer")
    val Selector: SimulinkSource = expand("Selector")
    val StateReader: SimulinkSource = expand("State Reader")
    val StateWriter: SimulinkSource = expand("State Writer")
    val Switch: SimulinkSource = expand("Switch")
    val VariantSink: SimulinkSource = expand("Variant Sink")
    val VariantSource: SimulinkSource = expand("Variant Source")
    val VectorConcatenate: SimulinkSource = expand("Vector Concatenate")
  }

  object Sinks {
    @inline private def expand(s: String): SimulinkSource = SimulinkSource("simulink/Sinks/" + s)
    val Display: SimulinkSource = expand("Display")
    val FloatingScope: SimulinkSource = expand("Floating Scope")
    val OutBusElement: SimulinkSource = expand("Out Bus Element")
    val Out1: SimulinkSource = expand("Out1")
    val Scope: SimulinkSource = expand("Scope")
    val StopSimulation: SimulinkSource = expand("Stop Simulation")
    val Terminator: SimulinkSource = expand("Terminator")
    val ToFile: SimulinkSource = expand("To File")
    val ToWorkspace: SimulinkSource = expand("To Workspace")
    val XYGraph: SimulinkSource = expand("XY Graph")
  }

  object Sources {
    @inline private def expand(s: String): SimulinkSource = SimulinkSource("simulink/Sources/" + s)
    val BandLimitedWhiteNoise: SimulinkSource = expand("Band-Limited White Noise")
    val ChirpSignal: SimulinkSource = expand("Chirp Signal")
    val Clock: SimulinkSource = expand("Clock")
    val Constant: SimulinkSource = expand("Constant")
    val CounterFreeRunning: SimulinkSource = expand("Counter Free-Running")
    val CounterLimited: SimulinkSource = expand("Counter Limited")
    val DigitalClock: SimulinkSource = expand("Digital Clock")
    val EnumeratedConstant: SimulinkSource = expand("Enumerated Constant")
    val FromFile: SimulinkSource = expand("From File")
    val FromSpreadsheet: SimulinkSource = expand("From Spreadsheet")
    val FromWorkspace: SimulinkSource = expand("From Workspace")
    val Ground: SimulinkSource = expand("Ground")
    val InBusElement: SimulinkSource = expand("In Bus Element")
    val In1: SimulinkSource = expand("In1")
    val PulseGenerator: SimulinkSource = expand("Pulse Generator")
    val Ramp: SimulinkSource = expand("Ramp")
    val RandomNumber: SimulinkSource = expand("Random Number")
    val RepeatingSequence: SimulinkSource = expand("Repeating Sequence")
    val RepeatingSequenceInterpolated: SimulinkSource = expand("Repeating Sequence Interpolated")
    val RepeatingSequenceStair: SimulinkSource = expand("Repeating Sequence Stair")
    val SignalBuilder: SimulinkSource = expand("Signal Builder")
    val SignalEditor: SimulinkSource = expand("Signal Editor")
    val SignalGenerator: SimulinkSource = expand("Signal Generator")
    val SineWave: SimulinkSource = expand("Sine Wave")
    val Step: SimulinkSource = expand("Step")
    val UniformRandomNumber: SimulinkSource = expand("Uniform Random Number")
    val WaveformGenerator: SimulinkSource = expand("Waveform Generator")
  }

  object String {
    @inline private def expand(s: String): SimulinkSource = SimulinkSource("simulink/String/" + s)
    val AsciiToString: SimulinkSource = expand("ASCII to String")
    val ComposeString: SimulinkSource = expand("Compose String")
    val ScanString: SimulinkSource = expand("Scan String")
    val StringCompare: SimulinkSource = expand("String Compare")
    val StringConcatenate: SimulinkSource = expand("String Concatenate")
    val StringConstant: SimulinkSource = expand("String Constant")
    val StringFind: SimulinkSource = expand("String Find")
    val StringLength: SimulinkSource = expand("String Length")
    val StringToAscii: SimulinkSource = expand("String to ASCII")
    val StringToDouble: SimulinkSource = expand("String to Double")
    val StringToEnum: SimulinkSource = expand("String to Enum")
    val StringToSingle: SimulinkSource = expand("String to Single")
    val Substring: SimulinkSource = expand("Substring")
    val ToString: SimulinkSource = expand("To String")
  }

  object UserDefinedFunctions {
    @inline private def expand(s: String): SimulinkSource = SimulinkSource("simulink/User-Defined Functions/" + s)
    val CCaller: SimulinkSource = expand("C Caller")
    val Fcn: SimulinkSource = expand("Fcn")
    val FunctionCaller: SimulinkSource = expand("Function Caller")
    val InitializeFunction: SimulinkSource = expand("Initialize Function")
    val InterpretedMatlabFunction: SimulinkSource = expand("Interpreted MATLAB Function")
    val Level2MatlabSFunction: SimulinkSource = expand("Level-2 MATLAB S-Function")
    val MatlabFunction: SimulinkSource = expand("MATLAB Function")
    val MatlabSystem: SimulinkSource = expand("MATLAB System")
    val ResetFunction: SimulinkSource = expand("Reset Function")
    val SFunction: SimulinkSource = expand("S-Function")
    val SFunctionBuilder: SimulinkSource = expand("S-Function Builder")
    val SFunctionExamples: SimulinkSource = expand("S-Function Examples")
    val SimulinkFunction: SimulinkSource = expand("Simulink Function")
    val TerminateFunction: SimulinkSource = expand("Terminate Function")
  }
}
