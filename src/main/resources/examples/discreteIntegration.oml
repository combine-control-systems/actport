function [out_1] = subsystem_2 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'DiscreteIntegrator');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/MathOperations/Product');
blk = set_block_origin(blk,[362.150215,-158.682747]);
blk = set_block_size(blk,[40.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''*''','''*'''}});
params.overflow='''Nothing''';
params.rmethod='''Floor''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'Product');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[451.314095,-174.346687]);
blk = set_block_size(blk,[40.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''+'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Sum_1');
blk = instantiate_block('system/Dynamical/DiscreteDelay');
blk = set_block_origin(blk,[453.121407,-233.629372]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,1);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.init_cond='init_cond';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'DiscreteDelay_1');
blk = instantiate_block('system/SignalGenerators/Time');
blk = set_block_origin(blk,[-24.077675,-158.188011]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.externalActivation='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Time');
blk = instantiate_block('system/Dynamical/DiscreteDelay');
blk = set_block_origin(blk,[98.007912,-196.563744]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.init_cond='0';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'DiscreteDelay');
blk = instantiate_block('system/MathOperations/Gain');
blk = set_block_origin(blk,[296.482246,-216.760536]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='K';
params.overflow='''Nothing''';
params.externalActivation='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Gain');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[266.101448,-157.623604]);
blk = set_block_size(blk,[40.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''-'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'Sum');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[75.498940,-137.585548]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'Split');
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[237.902832,-208.891861]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'Input');
blk = instantiate_block('system/Ports/Output');
blk = set_block_origin(blk,[506.158783,-271.822693]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'Output');
blk = instantiate_block('system/Ports/EventInput');
blk = set_block_origin(blk,[172.838760,-57.964546]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
params=struct();
params.portNumber='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'EventInput');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[509.268929,-213.629372]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag11] = add_block(scsm, blk, 'Split_1');
blk = instantiate_block('system/Links/ActivationSplit');
blk = set_block_origin(blk,[182.838760,-88.076279]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.717647,0.058824,0.074510,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,3);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag12] = add_block(scsm, blk, 'ActivationSplit');
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag0, '1', 'input'}, [334.126000,-127.624000;334.126000,-113.683000], false);
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag1, '1', 'input'}, [426.732000,-128.683000;426.732000,-129.347000], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag1, '2', 'input'}, [422.515000,-213.629000;422.515000,-159.347000], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag11, '1', 'input'}, [509.269000,-144.347000], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag7, '1', 'input'}, [25.922300,-137.586000], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag6, '2', 'input'}, [202.055000,-176.564000;202.055000,-142.624000], false);
scsm=add_explicit_link(scsm,{block_tag7, '2', 'output'},{block_tag4, '1', 'input'}, [75.498900,-176.564000], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag6, '1', 'input'}, [109.481000,-137.586000;109.481000,-112.624000], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag0, '2', 'input'}, [349.316000,-196.761000;349.316000,-143.683000], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag5, '1', 'input'}, [277.193000,-198.892000;277.193000,-196.761000], false);
scsm=add_explicit_link(scsm,{block_tag11, '2', 'output'},{block_tag9, '1', 'input'}, [509.269000,-240.757000;496.159000,-240.757000], false);
scsm=add_explicit_link(scsm,{block_tag11, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag10, '1', 'output'},{block_tag12, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag12, '2', 'output'},{block_tag5, '1', 'input'}, [316.482000,-88.076300], false);
scsm=add_event_link(scsm,{block_tag12, '1', 'output'},{block_tag3, '1', 'input'}, [-4.077670,-88.076300], false);
out_1 = scsm;
end

function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'discreteIntegration');
scsm = set_diagram_context(scsm, {['init_cond=1;',char(10),'K=1;',char(10)]});
blk = instantiate_super_block();
scsm0 = subsystem_2();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'DiscreteIntegrator');
blk = set_block_origin(blk,[434.972839,-242.915543]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.988235,0.890196,0.811765,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.init_cond.rank=0;
params.init_cond.value='0';
params.init_cond.prompt='Initial condition';
params.init_cond.evaluate = 1;
params.init_cond.enable=1;
params.init_cond.visible=1;
params.init_cond.parameter_style= { 'entry', {}};
params.init_cond.callback= '';
params.init_cond.tabname= 'Parameters';
params.init_cond.tooltip= '';
params.init_cond.buttonimage= '';
params.init_cond.buttontext= '';
params.init_cond.buttontooltip= '';
params.init_cond.type= 'vector';
params.init_cond.dimensions= '[-1]';
params.init_cond.unit= '';
params.K.rank=1;
params.K.value='1';
params.K.prompt='Gain';
params.K.evaluate = 1;
params.K.enable=1;
params.K.visible=1;
params.K.parameter_style= { 'entry', {}};
params.K.callback= '';
params.K.tabname= 'Parameters';
params.K.tooltip= '';
params.K.buttonimage= '';
params.K.buttontext= '';
params.K.buttontooltip= '';
params.K.type= 'scalar';
params.K.dimensions= '[]';
params.K.unit= '';
blk = set_block_mask(blk,params,'DiscreteIntegrator');
blk = set_atomic_property(blk,0);
[scsm, block_tag0] = add_block(scsm, blk, 'DiscreteIntegrator');
blk = instantiate_block('system/Dynamical/Integral');
blk = set_block_origin(blk,[436.972839,-328.893402]);
blk = set_block_size(blk,[36.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.x0='0';
params.reinit='0';
params.satur='0';
params.limit=struct('max',{{}},'min',{{}},'zcross',{{}});
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'Integral');
blk = instantiate_block('system/SignalGenerators/SineWaveGenerator');
blk = set_block_origin(blk,[248.773774,-242.915527]);
blk = set_block_size(blk,[80.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.913725,0.941176,0.858824,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.M='3';
params.F='.2';
params.P='0';
params.offs='.2';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'SineWaveGenerator');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[383.001197,-222.915543]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Split');
blk = instantiate_block('system/ActivationOperations/SampleClock');
blk = set_block_origin(blk,[424.972839,-164.911544]);
blk = set_block_size(blk,[60.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,0.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
params=struct();
params.frequ='.3';
params.offset='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'SampleClock');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_origin(blk,[587.012085,-282.323792]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.850980,0.929412,0.949020,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='0';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{'''''',''''''}},'reverseColor',{{'0','0'}},'grid',{{'''Coarse''','''Coarse'''}},'xScale',{{'''linear''','''linear'''}},'xRefresh',{{'-1','-1'}},'yScale',{{'''linear''','''linear'''}},'yInterval',{{'[0,35]','[0,35]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{'''''',''''''}},'color',{{'0','0'}},'marker',{{'0','0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Scope_1');
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag3, '1', 'input'}, [383.001000,-222.916000], false);
scsm=add_explicit_link(scsm,{block_tag3, '2', 'output'},{block_tag1, '1', 'input'}, [383.001012,-298.892969], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag0, '1', 'input'}, [383.001000,-222.406000;383.001000,-222.916000], false);
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag5, '1', 'input'}, [531.378000,-222.916000;531.378000,-252.324000], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag5, '2', 'input'}, [530.801000,-298.892931;530.801000,-272.324000], false);
scsm=add_event_link(scsm,{block_tag4, '1', 'output'},{block_tag0, '1', 'input'}, [], false);
out_1 = scsm;
end

discreteIntegration = subsystem_1();
discreteIntegration = set_model_workspace (discreteIntegration, {''});
discreteIntegration = set_initial_time (discreteIntegration, '0');
discreteIntegration = set_final_time (discreteIntegration, '30');
tol = {'0.000001', '0.000001', '-1', '0' , '0', 'lsodar', '0'};
discreteIntegration = set_solver_parameters( discreteIntegration, tol);
discreteIntegration = evaluate_model (discreteIntegration);
scsm = discreteIntegration;
