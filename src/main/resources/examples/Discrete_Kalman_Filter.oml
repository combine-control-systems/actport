function [out_1] = subsystem_2 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'System');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[661.260132,-455.217407]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'Input');
blk = instantiate_block('system/Ports/EventInput');
blk = set_block_origin(blk,[775.000000,-347.000000]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
params=struct();
params.portNumber='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'EventInput');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[702.596940,-445.217407]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'fork');
blk = instantiate_block('system/Ports/Output');
blk = set_block_origin(blk,[1130.612546,-495.500000]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Output');
blk = instantiate_block('system/Ports/Output');
blk = set_block_origin(blk,[963.000000,-371.000000]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='2';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'Output_1');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[876.217407,-445.217407]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'fork_1');
blk = instantiate_block('system/MatrixOperations/MatrixGain');
blk = set_block_ident (blk,'MatrixGain');
blk = set_block_origin(blk,[923.999981,-463.217097]);
blk = set_block_size(blk,[72.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='C';
params.overflow='''Nothing''';
params.mulmethod='''Gain*u1''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'MatrixGain');
blk = instantiate_block('system/MatrixOperations/MatrixGain');
blk = set_block_ident (blk,'MatrixGain ');
blk = set_block_origin(blk,[922.000000,-535.500000]);
blk = set_block_size(blk,[72.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='D';
params.overflow='''Nothing''';
params.mulmethod='''Gain*u1''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'MatrixGain ');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[1081.000000,-515.500000]);
blk = set_block_size(blk,[12.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''+'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'Sum_1_1');
blk = instantiate_block('system/Dynamical/DiscrStateSpace');
blk = set_block_origin(blk,[740.000000,-465.217407]);
blk = set_block_size(blk,[90.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.A='A';
params.B='B';
params.C='eye(n,n)';
params.D='zeros(n,2)';
params.x0='[23.166583,-20.864137,15.937984]';
params.externalActivation='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'DiscrStateSpace_1');
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag1, '1', 'output'},{block_tag9, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'output'},{block_tag5, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag9, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '2', 'output'},{block_tag7, '1', 'input'}, [702.597000,-517.500000], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag8, '1', 'input'}, [1016.000000,-445.217000;1016.000000,-470.500000], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag8, '2', 'input'}, [1016.000000,-517.500000;1016.000000,-500.500000], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag3, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag6, '1', 'input'}, [913.999981,-445.217407], false);
scsm=add_explicit_link(scsm,{block_tag5, '2', 'output'},{block_tag4, '1', 'input'}, [876.217000,-361.000000], false);
out_1 = scsm;
end

function [out_1] = subsystem_3 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'KalmanFilter');
scsm = set_diagram_context(scsm, {''});
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[490.842224,-305.009338]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='A';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'Constant');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[562.286010,-285.009338]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'fork');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[562.485513,-366.363466]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag2] = add_block(scsm, blk, 'fork_1');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[741.823242,-402.677978]);
blk = set_block_size(blk,[44.500000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='B*B''';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'Constant_1');
blk = instantiate_block('system/MatrixOperations/MatrixConcatenation');
blk = set_block_origin(blk,[968.010010,-458.009338]);
blk = set_block_size(blk,[130.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,3);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='3';
params.method='''Horizontal''';
blk = set_block_parameters(blk,params);
[scsm, block_tag4] = add_block(scsm, blk, 'MatrixConcatenation');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[848.260010,-448.009338]);
blk = set_block_size(blk,[52.500000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='-B*D''';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Constant_2');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[777.421509,-521.268901]);
blk = set_block_size(blk,[115.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='eye(size(A))';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'Constant_3');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[938.098522,-428.009338]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'fork_2');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[1001.815670,-568.821228]);
blk = set_block_size(blk,[44.500000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='D*D''';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag8] = add_block(scsm, blk, 'Constant_4');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[845.432312,-595.403015]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='C';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag9] = add_block(scsm, blk, 'Constant_5');
blk = instantiate_block('system/MatrixOperations/MatrixConcatenation');
blk = set_block_origin(blk,[1079.010010,-567.509338]);
blk = set_block_size(blk,[130.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,3);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='3';
params.method='''Horizontal''';
blk = set_block_parameters(blk,params);
[scsm, block_tag10] = add_block(scsm, blk, 'MatrixConcatenation_1');
blk = instantiate_block('system/MatrixOperations/MatrixConcatenation');
blk = set_block_origin(blk,[1079.010010,-642.509338]);
blk = set_block_size(blk,[130.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,3);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='3';
params.method='''Horizontal''';
blk = set_block_parameters(blk,params);
[scsm, block_tag11] = add_block(scsm, blk, 'MatrixConcatenation_2');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[920.764399,-501.268901]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag12] = add_block(scsm, blk, 'fork_4');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[890.494995,-704.535502]);
blk = set_block_size(blk,[135.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='zeros(size(A))';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag13] = add_block(scsm, blk, 'Constant_6');
blk = instantiate_block('system/SignalGenerators/Constant');
blk = set_block_origin(blk,[884.021546,-757.924682]);
blk = set_block_size(blk,[145.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.C='zeros(size(C''))';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag14] = add_block(scsm, blk, 'Constant_7');
blk = instantiate_block('system/MatrixOperations/MatrixConcatenation');
blk = set_block_origin(blk,[1079.010010,-734.509338]);
blk = set_block_size(blk,[130.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,3);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='3';
params.method='''Horizontal''';
blk = set_block_parameters(blk,params);
[scsm, block_tag15] = add_block(scsm, blk, 'MatrixConcatenation_3');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[1065.547610,-684.535502]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag16] = add_block(scsm, blk, 'fork_5');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[920.724569,-539.040539]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag17] = add_block(scsm, blk, 'fork_6');
blk = instantiate_block('system/MatrixOperations/MatrixConcatenation');
blk = set_block_origin(blk,[1225.010010,-478.009338]);
blk = set_block_size(blk,[130.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,3);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='3';
params.method='''Vertical''';
blk = set_block_parameters(blk,params);
[scsm, block_tag18] = add_block(scsm, blk, 'MatrixConcatenation_4');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[1241.586860,-705.069756]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag19] = add_block(scsm, blk, 'fork_7');
blk = instantiate_block('system/Ports/Output');
blk = set_block_origin(blk,[1537.801390,-774.009338]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.insize='[-1;-2]';
params.intyp='''inherit''';
blk = set_block_parameters(blk,params);
[scsm, block_tag20] = add_block(scsm, blk, 'Output');
blk = instantiate_block('system/Ports/Input');
blk = set_block_origin(blk,[629.847534,-824.834289]);
blk = set_block_size(blk,[20.000000,21.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.portNumber='1';
params.outsize='[-1;-2]';
params.outtyp='''inherit''';
params.dept='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag21] = add_block(scsm, blk, 'Input');
blk = instantiate_block('system/MatrixOperations/MatrixConcatenation');
blk = set_block_origin(blk,[704.023168,-844.334289]);
blk = set_block_size(blk,[130.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,3);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='3';
params.method='''Vertical''';
blk = set_block_parameters(blk,params);
[scsm, block_tag22] = add_block(scsm, blk, 'MatrixConcatenation_5');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[1045.818930,-738.373840]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag23] = add_block(scsm, blk, 'fork_9');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[1491.585380,-764.009338]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag24] = add_block(scsm, blk, 'fork_10');
blk = instantiate_block('system/Ports/EventInput');
blk = set_block_origin(blk,[1617.765505,-589.918248]);
blk = set_block_size(blk,[20.000000,20.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
params=struct();
params.portNumber='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag25] = add_block(scsm, blk, 'EventInput');
blk = instantiate_block('system/MatrixOperations/Transpose');
blk = set_block_origin(blk,[585.009644,-386.363466]);
blk = set_block_size(blk,[101.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.rule='''Transpose''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag26] = add_block(scsm, blk, 'Transpose_4_1');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_origin(blk,[854.010010,-397.509338]);
blk = set_block_size(blk,[40.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''+''','''+'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag27] = add_block(scsm, blk, 'Sum_1_1');
blk = instantiate_block('system/MatrixOperations/Transpose');
blk = set_block_origin(blk,[949.978699,-523.106994]);
blk = set_block_size(blk,[101.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.rule='''Transpose''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag28] = add_block(scsm, blk, 'Transpose_4');
blk = instantiate_block('system/MatrixOperations/Transpose');
blk = set_block_origin(blk,[929.681397,-643.008239]);
blk = set_block_size(blk,[101.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.rule='''Transpose''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag29] = add_block(scsm, blk, 'Transpose_1');
blk = instantiate_block('system/MatrixOperations/Transpose');
blk = set_block_origin(blk,[1268.510010,-725.097839]);
blk = set_block_size(blk,[80.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.rule='''Transpose''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag30] = add_block(scsm, blk, 'Transpose_2');
blk = instantiate_block('system/MatrixOperations/MatrixGain');
blk = set_block_origin(blk,[1510.865348,-674.412902]);
blk = set_block_size(blk,[72.000000,36.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.gain='-1';
params.overflow='''Nothing''';
params.mulmethod='''Gain*u1''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag31] = add_block(scsm, blk, 'MatrixGain_1_1');
blk = instantiate_block('system/MatrixOperations/MatrixInverse');
blk = set_block_origin(blk,[1398.598510,-468.009338]);
blk = set_block_size(blk,[41.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag32] = add_block(scsm, blk, 'MatrixInverse_1');
blk = instantiate_block('system/MatrixOperations/MatrixMultiplication');
blk = set_block_origin(blk,[607.698609,-315.009338]);
blk = set_block_size(blk,[81.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''*''','''*'''}});
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag33] = add_block(scsm, blk, 'MatrixMultiplication_6_1');
blk = instantiate_block('system/MatrixOperations/MatrixMultiplication');
blk = set_block_origin(blk,[719.510010,-350.509338]);
blk = set_block_size(blk,[81.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''*''','''*'''}});
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag34] = add_block(scsm, blk, 'MatrixMultiplication_6');
blk = instantiate_block('system/MatrixOperations/MatrixMultiplication');
blk = set_block_origin(blk,[591.510010,-795.009338]);
blk = set_block_size(blk,[81.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''*''','''*'''}});
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag35] = add_block(scsm, blk, 'MatrixMultiplication_2');
blk = instantiate_block('system/MatrixOperations/MatrixMultiplication');
blk = set_block_origin(blk,[1280.510010,-654.009338]);
blk = set_block_size(blk,[81.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''*''','''*'''}});
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag36] = add_block(scsm, blk, 'MatrixMultiplication_1');
blk = instantiate_block('system/MatrixOperations/MatrixMultiplication');
blk = set_block_origin(blk,[1401.348510,-676.412902]);
blk = set_block_size(blk,[81.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''*''','''*'''}});
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag37] = add_block(scsm, blk, 'MatrixMultiplication_3');
blk = instantiate_block('system/MatrixOperations/MatrixMultiplication');
blk = set_block_origin(blk,[1294.510010,-784.009338]);
blk = set_block_size(blk,[81.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''*''','''*'''}});
params.overflow='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag38] = add_block(scsm, blk, 'MatrixMultiplication_5');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[1374.752200,-634.153381]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag39] = add_block(scsm, blk, 'Split');
blk = instantiate_block('system/Links/Split');
blk = set_block_origin(blk,[912.730042,-575.403015]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.250980,0.250980,0.250980,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,3);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag40] = add_block(scsm, blk, 'Split_1');
blk = instantiate_block('system/Dynamical/DiscreteDelay');
blk = set_block_origin(blk,[1609.765505,-692.412902]);
blk = set_block_size(blk,[36.000000,72.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.init_cond='0.5*ones(3,3)';
params.typ='''double''';
params.externalActivation='1';
blk = set_block_parameters(blk,params);
[scsm, block_tag41] = add_block(scsm, blk, 'DiscreteDelay_1');
blk = instantiate_block('system/Dynamical/DiscreteDelay');
blk = set_block_origin(blk,[1418.010010,-788.009338]);
blk = set_block_size(blk,[24.000000,48.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.init_cond='zeros(size(A,1),1)';
params.typ='''double''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag42] = add_block(scsm, blk, 'DiscreteDelay');
blk = instantiate_block('system/MatrixOperations/MatrixExtractor');
blk = set_block_origin(blk,[595.957378,-875.302737]);
blk = set_block_size(blk,[80.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.extractx=struct('x_selectall','0','x_vectorindex','1','x_startingindex','0','x_startingindexdecreasing','0','x_vectorindexport','0','x_startingindexport','0','x_startingindexportdecreasing','0');;
params.x_vector_index=struct('x_vi',{{'[1:3]'}});
params.x_starting_index=struct('x_si',{{}},'x_osz',{{}});
params.x_starting_indexdecreasing=struct('x_si',{{}},'x_osz',{{}});
params.x_starting_index_port=struct('x_osz',{{}});
params.x_starting_index_portdecreasing=struct('x_osz',{{}});
params.extracty=struct('y_selectall','0','y_vectorindex','1','y_startingindex','0','y_startingindexdecreasing','0','y_vectorindexport','0','y_startingindexport','0','y_startingindexportdecreasing','0');;
params.y_vector_index=struct('y_vi',{{'1'}});
params.y_starting_index=struct('y_si',{{}},'y_osz',{{}});
params.y_starting_indexdecreasing=struct('y_si',{{}},'y_osz',{{}});
params.y_starting_index_port=struct('y_osz',{{}});
params.y_starting_index_portdecreasing=struct('y_osz',{{}});
params.onebased='1';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag43] = add_block(scsm, blk, 'MatrixExtractor_1');
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag1, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '1', 'output'},{block_tag33, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag1, '2', 'output'},{block_tag2, '1', 'input'}, [562.286010,-366.363466], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag35, '1', 'input'}, [562.485513,-765.009338], false);
scsm=add_explicit_link(scsm,{block_tag2, '2', 'output'},{block_tag26, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag33, '1', 'output'},{block_tag34, '1', 'input'}, [698.698609,-320.509338], false);
scsm=add_explicit_link(scsm,{block_tag26, '1', 'output'},{block_tag34, '2', 'input'}, [703.215010,-366.363466;703.215010,-340.509338], false);
scsm=add_explicit_link(scsm,{block_tag34, '1', 'output'},{block_tag27, '1', 'input'}, [810.510010,-352.509338], false);
scsm=add_explicit_link(scsm,{block_tag3, '1', 'output'},{block_tag27, '2', 'input'}, [813.010010,-382.677978;813.010010,-382.509338], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag7, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag27, '1', 'output'},{block_tag4, '1', 'input'}, [920.010010,-367.509338;920.010010,-408.009338], false);
scsm=add_explicit_link(scsm,{block_tag6, '1', 'output'},{block_tag12, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag7, '1', 'output'},{block_tag4, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag7, '2', 'output'},{block_tag28, '1', 'input'}, [938.099010,-503.107338], false);
scsm=add_explicit_link(scsm,{block_tag9, '1', 'output'},{block_tag40, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag12, '1', 'output'},{block_tag4, '3', 'input'}, [920.764010,-448.009338], false);
scsm=add_explicit_link(scsm,{block_tag12, '2', 'output'},{block_tag17, '1', 'input'}, [920.764399,-539.040539], false);
scsm=add_explicit_link(scsm,{block_tag29, '1', 'output'},{block_tag11, '2', 'input'}, [1050.010010,-623.008338;1050.010010,-612.509338], false);
scsm=add_explicit_link(scsm,{block_tag13, '1', 'output'},{block_tag16, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag16, '1', 'output'},{block_tag11, '3', 'input'}, [1065.547610,-632.509338], false);
scsm=add_explicit_link(scsm,{block_tag16, '2', 'output'},{block_tag15, '1', 'input'}, [1065.547610,-684.509338], false);
scsm=add_explicit_link(scsm,{block_tag14, '1', 'output'},{block_tag23, '1', 'input'}, [1045.818930,-737.924682], false);
scsm=add_explicit_link(scsm,{block_tag17, '1', 'output'},{block_tag11, '1', 'input'}, [920.725010,-592.509338], false);
scsm=add_explicit_link(scsm,{block_tag17, '2', 'output'},{block_tag15, '3', 'input'}, [829.010010,-539.040338;829.010010,-764.509338;1069.010010,-764.509338], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag18, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag10, '1', 'output'},{block_tag18, '2', 'input'}, [1219.010010,-495.509338;1152.010010,-495.509338;1152.010010,-448.009338], false);
scsm=add_explicit_link(scsm,{block_tag11, '1', 'output'},{block_tag18, '3', 'input'}, [1238.100010,-612.509338;1238.100010,-484.509338;1169.010010,-484.509338;1169.010010,-468.009338], false);
scsm=add_explicit_link(scsm,{block_tag15, '1', 'output'},{block_tag19, '1', 'input'}, [1241.590010,-704.509338;1241.590010,-705.069756], false);
scsm=add_explicit_link(scsm,{block_tag19, '1', 'output'},{block_tag30, '1', 'input'}, [1241.586860,-705.097839], false);
scsm=add_explicit_link(scsm,{block_tag19, '2', 'output'},{block_tag36, '1', 'input'}, [1241.590010,-624.009338], false);
scsm=add_explicit_link(scsm,{block_tag36, '1', 'output'},{block_tag39, '1', 'input'}, [1374.752200,-634.009338], false);
scsm=add_explicit_link(scsm,{block_tag38, '1', 'output'},{block_tag42, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag42, '1', 'output'},{block_tag24, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag21, '1', 'output'},{block_tag22, '2', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag35, '1', 'output'},{block_tag22, '1', 'input'}, [691.202010,-775.009338;691.202010,-794.334338], false);
scsm=add_explicit_link(scsm,{block_tag43, '1', 'output'},{block_tag22, '3', 'input'}, [688.799010,-855.302338;688.799010,-834.334338], false);
scsm=add_explicit_link(scsm,{block_tag23, '1', 'output'},{block_tag15, '2', 'input'}, [1056.010010,-738.374338;1056.010010,-704.509338], false);
scsm=add_explicit_link(scsm,{block_tag23, '2', 'output'},{block_tag43, '1', 'input'}, [1045.818930,-887.248352;585.957378,-887.248352], false);
scsm=add_explicit_link(scsm,{block_tag24, '1', 'output'},{block_tag20, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag24, '2', 'output'},{block_tag35, '2', 'input'}, [1491.590010,-899.295338;563.115723,-899.295338;563.115723,-785.009338], false);
scsm=add_explicit_link(scsm,{block_tag37, '1', 'output'},{block_tag31, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag31, '1', 'output'},{block_tag41, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag41, '1', 'output'},{block_tag33, '2', 'input'}, [1677.640010,-656.412902;1677.640010,-240.345338;586.147010,-240.345338;586.147010,-305.009338], false);
scsm=add_event_link(scsm,{block_tag25, '1', 'output'},{block_tag41, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag18, '1', 'output'},{block_tag32, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag32, '1', 'output'},{block_tag36, '2', 'input'}, [1466.076660,-448.009338;1466.076660,-526.167338;1261.210010,-526.167338;1261.210010,-644.009338], false);
scsm=add_explicit_link(scsm,{block_tag22, '1', 'output'},{block_tag38, '2', 'input'}, [1138.330010,-814.334338;1138.330010,-774.009338], false);
scsm=add_explicit_link(scsm,{block_tag30, '1', 'output'},{block_tag37, '2', 'input'}, [1386.360010,-705.097839;1386.360010,-666.245338;1391.348510,-666.245338], false);
scsm=add_explicit_link(scsm,{block_tag39, '2', 'output'},{block_tag37, '1', 'input'}, [1391.350010,-634.153338], false);
scsm=add_explicit_link(scsm,{block_tag39, '1', 'output'},{block_tag38, '1', 'input'}, [1374.752200,-733.082338;1264.010010,-733.082338;1264.010010,-754.009338], false);
scsm=add_explicit_link(scsm,{block_tag28, '1', 'output'},{block_tag10, '1', 'input'}, [1069.010010,-503.107338], false);
scsm=add_explicit_link(scsm,{block_tag40, '2', 'output'},{block_tag29, '1', 'input'}, [912.730010,-623.008338], false);
scsm=add_explicit_link(scsm,{block_tag40, '1', 'output'},{block_tag10, '3', 'input'}, [1064.000010,-575.403015;1064.000010,-557.509338], false);
scsm=add_explicit_link(scsm,{block_tag8, '1', 'output'},{block_tag10, '2', 'input'}, [1062.660010,-548.821338;1062.660010,-537.509338], false);
out_1 = scsm;
end

function [out_1] = subsystem_1 ()
scsm = instantiate_diagram();
scsm = set_diagram_bg_color (scsm, [1, 1, 1]);
scsm = set_diagram_3d (scsm, 1);
scsm = set_diagram_zoom (scsm, 1);
scsm = set_diagram_name (scsm, 'Discrete_Kalman_Filter');
scsm = set_diagram_context(scsm, {['A=[0,1,0;0,1,1;-.1,-.3,-.5];',char(10),'B=[1,0;1,0;0,0.5];',char(10),'C=[1,0,0];',char(10),'D=[0.1,0.2];',char(10),'dt=0.1;',char(10),'n=size(A,1);',char(10),'nw=size(B,2);',char(10)]});
blk = instantiate_block('system/SignalGenerators/Random');
blk = set_block_origin(blk,[147.355728,-393.000000]);
blk = set_block_size(blk,[89.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.913725,0.941176,0.858824,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
params=struct();
params.distribution='''Normal''';
params.A='zeros(nw,1)';
params.B='ones(nw,1)';
params.seed='2113248';
blk = set_block_parameters(blk,params);
[scsm, block_tag0] = add_block(scsm, blk, 'Random');
blk = instantiate_block('system/ActivationOperations/SampleClock');
blk = set_block_origin(blk,[196.330433,-258.518463]);
blk = set_block_size(blk,[60.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,0.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,1);
params=struct();
params.frequ='dt';
params.offset='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag1] = add_block(scsm, blk, 'SampleClock');
blk = instantiate_super_block();
scsm0 = subsystem_2();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'System');
blk = set_block_origin(blk,[277.478333,-393.000000]);
blk = set_block_size(blk,[50.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.898039,0.874510,0.925490,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,2);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag2] = add_block(scsm, blk, 'System');
blk = instantiate_block('system/Links/ActivationSplit');
blk = set_block_origin(blk,[226.330433,-287.488357]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.717647,0.058824,0.074510,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,3);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag3] = add_block(scsm, blk, 'fork');
blk = instantiate_super_block();
scsm0 = subsystem_3();
blk = fill_super_block(blk,scsm0);
blk = set_block_ident (blk,'KalmanFilter');
blk = set_block_origin(blk,[431.592834,-383.000000]);
blk = set_block_size(blk,[50.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.898039,0.874510,0.925490,1.000000]);
blk = set_block_fg_color(blk,[0.000000,0.000000,0.000000,1.000000]);
blk = set_block_icon_text(blk,'','text1');
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,0);
blk = set_atomic_property(blk,0);
[scsm, block_tag4] = add_block(scsm, blk, 'KalmanFilter');
blk = instantiate_block('system/MathOperations/Sum');
blk = set_block_ident (blk,'Sum');
blk = set_block_origin(blk,[580.662842,-407.999969]);
blk = set_block_size(blk,[12.000000,60.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[1.000000,1.000000,1.000000,1.000000]);
blk = set_block_nin (blk,2);
blk = set_block_nout (blk,1);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='2';
params.in_ports=struct('sgn',{{'''-''','''+'''}});
params.satur='''Nothing''';
params.externalActivation='0';
blk = set_block_parameters(blk,params);
[scsm, block_tag5] = add_block(scsm, blk, 'Sum');
blk = instantiate_block('system/Links/ActivationSplit');
blk = set_block_origin(blk,[302.478000,-287.488357]);
blk = set_block_size(blk,[0.000000,0.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.717647,0.058824,0.074510,1.000000]);
blk = set_block_nin (blk,0);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,1);
blk = set_block_evtnout (blk,3);
params=struct();
blk = set_block_parameters(blk,params);
[scsm, block_tag6] = add_block(scsm, blk, 'ActivationSplit');
blk = instantiate_block('system/SignalViewers/Scope');
blk = set_block_origin(blk,[669.171265,-397.999969]);
blk = set_block_size(blk,[40.000000,40.000000]);
blk = set_block_flip(blk,0);
blk = set_block_theta(blk,0.000000);
blk = set_block_bg_color(blk,[0.850980,0.929412,0.949020,1.000000]);
blk = set_block_nin (blk,1);
blk = set_block_nout (blk,0);
blk = set_block_evtnin (blk,0);
blk = set_block_evtnout (blk,0);
params=struct();
params.nin='1';
params.externalActivation='0';
params.winSize='[400,400]';
params.winPos='[300,300]';
params.winNam='''''';
params.winHidden='0';
params.showAtEnd='0';
params.option='''Reuse''';
params.useSubplot='1';
params.win_s=struct('title',{{''''''}},'reverseColor',{{'0'}},'grid',{{'''Coarse'''}},'xScale',{{'''linear'''}},'xRefresh',{{'-1'}},'yScale',{{'''linear'''}},'yInterval',{{'[-50,30]'}});
params.plotTitle='''''';
params.plotColor='0';
params.plotGrid='''Coarse''';
params.xScale='''linear''';
params.xRefresh='-1';
params.yScale='''linear''';
params.yInterval='[NaN,NaN]';
params.signals=struct('name',{{''''''}},'color',{{'0'}},'marker',{{'0'}});
blk = set_block_parameters(blk,params);
[scsm, block_tag7] = add_block(scsm, blk, 'Scope_1');
scsm=add_event_link(scsm,{block_tag1, '1', 'output'},{block_tag3, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag0, '1', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag3, '1', 'output'},{block_tag0, '1', 'input'}, [191.855728,-287.488442], false);
scsm=add_explicit_link(scsm,{block_tag2, '1', 'output'},{block_tag4, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag3, '2', 'output'},{block_tag6, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag4, '1', 'output'},{block_tag5, '1', 'input'}, [], false);
scsm=add_explicit_link(scsm,{block_tag2, '2', 'output'},{block_tag5, '2', 'input'}, [394.000000,-383.000000;394.000000,-416.000000;552.209000,-416.000000;552.209000,-393.009000;570.662842,-393.004484], false);
scsm=add_explicit_link(scsm,{block_tag5, '1', 'output'},{block_tag7, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag6, '2', 'output'},{block_tag2, '1', 'input'}, [], false);
scsm=add_event_link(scsm,{block_tag6, '1', 'output'},{block_tag4, '1', 'input'}, [456.592931,-287.488601], false);
out_1 = scsm;
end

Discrete_Kalman_Filter = subsystem_1();
Discrete_Kalman_Filter = set_model_workspace (Discrete_Kalman_Filter, {''});
Discrete_Kalman_Filter = set_initial_time (Discrete_Kalman_Filter, '0');
Discrete_Kalman_Filter = set_final_time (Discrete_Kalman_Filter, '15');
tol = {'0.000001', '0.000001', '1e-10', '0' , '0', 'lsodar', '0'};
Discrete_Kalman_Filter = set_solver_parameters( Discrete_Kalman_Filter, tol);
Discrete_Kalman_Filter = evaluate_model (Discrete_Kalman_Filter);
scsm = Discrete_Kalman_Filter;
