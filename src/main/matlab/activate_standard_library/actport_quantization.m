% activate = 'system/Hybrid/Quantization'
function model = actport_quatinzation(model, block_id, model_path)
    import actport.model.Matlab.*

    name = get_name(model, block_id);
    block_path = sprintf('%s/%s', model_path, name);

    % Matlab do not support different rounding functions. Manual implementation is required
    add_clean_subsystem(block_path);

    step_block_path = sprintf('%s/Step', block_path);
    add_block('simulink/Sources/Constant', step_block_path);
    set_param(step_block_path, 'Value', get_parameter(model, block_id, 'step', '0.1'));

    func_block_path = sprintf('%s/Func', block_path);
    add_block('simulink/User-Defined Functions/MATLAB Function', func_block_path);
    switch get_parameter(model, block_id, 'method', 'Round2')
        case '''Round'''
            sf = sfroot();
            block = sf.find('Path', func_block_path, '-isa', 'Stateflow.EMChart');
            block.Script = sprintf([...
                'function x = f(u, step)\n'...
                '%%#codegen\n'...
                'x =  step * ceil(u/step - 0.5);\n'...
                'end\n'...
            ]);
        case '''Truncation'''
            sf = sfroot();
            block = sf.find('Path', func_block_path, '-isa', 'Stateflow.EMChart');
            block.Script = sprintf([...
                'function x = f(u, step)\n'...
                '%%#codegen\n'...
                'x =  step * fix(u/step)\n'...
                'end\n'...
            ]);
        case '''Floor'''
            sf = sfroot();
            block = sf.find('Path', func_block_path, '-isa', 'Stateflow.EMChart');
            block.Script = sprintf([...
                'function x = f(u, step)\n'...
                '%%#codegen\n'...
                'x = step * floor(u/step)\n'...
                'end\n'...
            ]);
        case '''Ceil'''
            sf = sfroot();
            block = sf.find('Path', func_block_path, '-isa', 'Stateflow.EMChart');
            block.Script = sprintf([...
                'function x = f(u, step)\n'...
                '%%#codegen\n'...
                'x = step * cail(u/step)\n'...
                'end\n'...
            ]);
        case '''Round2'''
            sf = sfroot();
            block = sf.find('Path', func_block_path, '-isa', 'Stateflow.EMChart');
            block.Script = sprintf([...
                'function x = f(u, step)\n'...
                '%%#codegen\n'...
                'if(u < 0.)\n'...
                '     x = step * (fix(u/step + .5) - .5);\n'...
                'else\n'...
                '     x = step * (fix(u/step - .5) + .5);\n'...
                'end\n'...
                'end\n'...
            ]);
    end

    % Add output port.
    add_block('simulink/Ports & Subsystems/Out1', sprintf('%s/Out1', block_path));
    add_line(block_path, 'Func/1', 'Out1/1');
    % Add input port
    add_block('simulink/Ports & Subsystems/In1', sprintf('%s/In1', block_path));
    add_line(block_path, 'In1/1', 'Func/1');
    add_line(block_path, 'Step/1', 'Func/2');

    % Rearrange the blocks in the subsystem.
    Simulink.BlockDiagram.arrangeSystem(block_path);

    set_common_parameters(model, block_id, model_path);
end
